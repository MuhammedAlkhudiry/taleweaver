{"version":3,"sources":["editor/tree/Node.ts","editor/tree/RootNode.ts","editor/tree/BranchNode.ts","editor/tree/LeafNode.ts","editor/tree/TreePosition.ts","editor/state/DocStartToken.ts","editor/state/DocEndToken.ts","editor/state/BlockStartToken.ts","editor/state/BlockEndToken.ts","editor/model/Doc.ts","editor/viewmodel/BlockViewModel.ts","editor/viewmodel/DocViewModel.ts","editor/view/View.ts","editor/view/PageView.ts","editor/transform/CursorTransformation.ts","editor/transform/cursortransformationsteps/TranslateCursor.ts","editor/command/cursor/moveToLineStart.ts","editor/command/cursor/moveToLineEnd.ts","editor/transform/cursortransformationsteps/TranslateCursorHead.ts","editor/command/cursor/moveHeadTo.ts","editor/command/cursor/moveHeadToLineStart.ts","editor/command/cursor/moveHeadToLineEnd.ts","editor/view/EditorCursorView.ts","editor/helpers/isElementInViewport.ts","editor/command/cursor/moveTo.ts","editor/event/Event.ts","editor/view/DocView.ts","editor/helpers/throttle.ts","editor/transform/CursorTransformer.ts","editor/transform/documenttransformationsteps/Assign.ts","editor/transform/DocumentTransformer.ts","editor/TaleWeaver.ts","editor/state/State.ts","editor/state/InlineStartToken.ts","editor/state/InlineEndToken.ts","editor/state/helpers/Serializer.ts","editor/model/Paragraph.ts","editor/model/Block.ts","editor/model/Text.ts","editor/model/Inline.ts","editor/viewmodel/TextViewModel.ts","editor/viewmodel/WordViewModel.ts","editor/view/ParagraphLineView.ts","editor/view/LineView.ts","editor/view/WordView.ts","editor/view/helpers/measureText.ts","editor/view/TextView.ts","editor/event/EventObserver.ts","editor/event/EditorCursorEventObserver.ts","editor/command/cursor/moveHeadBackwardByWord.ts","editor/command/cursor/moveHeadBackward.ts","editor/command/cursor/moveBackwardByWord.ts","editor/command/cursor/moveBackward.ts","editor/command/cursor/moveHeadForwardByWord.ts","editor/command/cursor/moveHeadForward.ts","editor/command/cursor/moveForwardByWord.ts","editor/command/cursor/moveForward.ts","editor/command/cursor/moveHeadToDocumentStart.ts","editor/command/cursor/moveHeadToPreviousLine.ts","editor/command/cursor/moveToDocumentStart.ts","editor/command/cursor/moveToPreviousLine.ts","editor/command/cursor/moveHeadToDocumentEnd.ts","editor/command/cursor/moveHeadToNextLine.ts","editor/command/cursor/moveToDocumentEnd.ts","editor/command/cursor/moveToNextLine.ts","editor/transform/DocumentTransformation.ts","editor/event/DocumentEventObserver.ts","editor/command/document/insertText.ts","editor/Config.ts","editor/cursor/Cursor.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Node","RootNode","BranchNode","LeafNode","TreePosition","node","offset","Object","classCallCheck","this","parentAt","childAt","DocStartToken","attributes","DocEndToken","BlockStartToken","type","BlockEndToken","Doc","taleWeaver","tokens","_this","possibleConstructorReturn","getPrototypeOf","call","children","Error","length","startToken","getAttributes","childStartOffset","depth","n","nn","token","childTokens","slice","blockStartToken","block","getConfig","getBlockClass","getType","assertThisInitialized","appendChild","size","forEach","child","getSize","push","index","indexOf","splice","concat","cumulatedOffset","childSize","BlockViewModel","parent","wordViewModelClasses","Set","getChildren","inline","_this$children","wordViewModelClass","getWordViewModelClass","add","wordViewModels","fromInline","apply","toConsumableArray","postProcess","siblings","cumulatedParentOffset","sibling","DocViewModel","doc","map","View","PageView","docView","config","lineViews","mounted","lineView","pageViews","getPageViews","setPageView","domDocumentContent","getDOM","domPage","document","createElement","className","style","width","height","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","userSelect","position","domPageContent","mount","from","to","viewPositionBoxes","cumulatedHeight","lineViewPositionBox","mapModelPositionRangeToViewPositionBox","Math","max","min","x1","y1","x2","y2","getHeight","x","y","mapViewPositionToModelPosition","lineViewAwarePosition","resolveModelPosition","objectSpread","pageView","pageViewPosition","CursorTransformation","steps","step","TranslateCursor","displacement","preserveLineViewPosition","arguments","undefined","moveToLineStart","transformation","editorCursor","getEditorCursor","head","getHead","viewAwarePosition","getDocView","lineViewPosition","addStep","moveToLineEnd","TranslateCursorHead","moveHeadTo","moveHeadToLineStart","moveHeadRightByLine","EditorCursorView","domSelections","selecting","blinkState","blinkInterval","lineViewX","lastLineViewX","renderHead","renderSelections","updateNativeCursor","_viewPositionBoxes$","mapModelPositionRangeToViewPositionBoxes","pageViewPositionBox","domHead","left","top","parentElement","removeChild","element","rect","getBoundingClientRect","bottom","window","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","isElementInViewport","scrollIntoView","anchor","getAnchor","selectionsCount","domSelection","pop","background","selectionIndex","_ref","pointerEvents","viewAwareAnchorPosition","domWordContent","wordView","selection","getSelection","removeAllRanges","range","createRange","selectNode","addRange","_this2","marginLeft","visibility","render","startBlinking","observe","extraArgs","stopBlinking","_this3","setInterval","clearInterval","applyEditorCursorTransformation","moveTo","KeyPressEvent","key","shift","meta","alt","DocView","docViewModel","handleContextMenu","event","preventDefault","handleMouseDown","editorCursorView","clientX","clientY","beginSelect","handleMouseMove","func","milliseconds","throttledRunTimeout","lastRunAt","_len","args","Array","_key","clearTimeout","setTimeout","Date","now","throttle","moveSelect","handleMouseUp","endSelect","handleKeyDown","dispatchEvent","shiftKey","metaKey","altKey","handleKeyUp","wordViewBlocks","buildWordViewBlocks","buildLineViews","buildPageViews","buildEditorCursorView","domWrapper","domDocument","contentEditable","spellcheck","outline","addEventListener","_loop","clientRects","offsets","sqDistances","clientRect","xDistance","yDistance","pageModelPosition","pageViewAwarePosition","docViewPosition","blockViewModel","wordViewBlock","wordViews","wordViewModel","getWordViewClass","_this4","pageContentWidth","pageWidth","pagePaddingLeft","pagePaddingRight","LineView","getLineViewClass","cumulatedWidth","getWidth","setLineView","appendWordView","_this5","pageViewConigs","pageHeight","pagePaddingTop","pagePaddingBottom","pageContentHeight","appendLineView","setDocView","CursorTransformer","cursor","getSteps","getDisplacement","getExtraArgs","Assign","text","DocumentTransformer","setContent","getText","TaleWeaver","state","getTokens","cursorTransformer","docTransformer","eventObservers","getEventObserverClasses","SomeEventObserver","eventObserver","onEvent","State","InlineStartToken","InlineEndToken","Serializer","docStartToken","JSON","stringify","join","serializedTokens","split","serializedToken","docStartTokenRegex","test","result","match","parse","blockStartTokenRegex","inlineStartTokenRegex","Paragraph","Block","inlineStartToken","getInlineClass","Text","Inline","content","WORD_DELIMITERS","TextViewModel","segments","segment","getContent","wordStartOffset","textViewModels","contentLength","char","mergedWordViewModels","chainedSegments","_chainedSegments","getSegments","lastSegment","inlineContent","WordViewModel","ParagraphLineView","getPageView","domParagraphLine","domLine","domLineContent","getLineViews","previousPageView","getPreviousPageView","previousPageLineViews","nextPageView","getNextPageView","viewPositionBox","wordViewPositionBox","wordViewAwarePosition","WordView","getWordViews","previousLineView","getPreviousLineView","previousLineWordViews","nextLineView","getNextLineView","wordViewPosition","textMeasurer","TextMeasurer","$iframe","src","border","body","$textContainers","Map","createClass","value","textStyle","textStyleKey","getTextStyleKey","has","$textContainer","display","whiteSpace","fontFamily","fontSize","fontWeight","lineHeight","letterSpacing","contentDocument","set","get","adjustedText","replace","getTextContainerElement","innerHTML","boundingClientRect","measureText","measure","placeholderTextStyle","TextView","getLineView","textViewModel","substring","domTextWord","createTextNode","domWord","getScreenX","lastWidth","measurement","at","EventObserver","cursorCommand","cursorTransformation","documentCommand","documentTransformation","applyDocumentTransformation","EditorCursorEventObserver","keyPressEvent","dispatchCursorCommand","previousWordView","getPreviousWordView","nextWordView","getNextWordView","moveHeadToLineEnd","getDoc","getEditorCursorView","getLineViewX","previousLinePosition","documentSize","nextLinePosition","DocumentTransformation","DocumentEventObserver","dispatchDocumentCommand","Config","blockClasses","inlineClasses","lineViewClasses","wordViewClasses","eventObserverClasses","registerBlockType","registerInlineType","registerEventObserverClass","blockClass","lineViewClass","inlineClass","wordViewClass","eventObserverClass","Cursor","id","toString","random","observers","observer","getElementById","innerText","notifyObservers","docText","trim","serialized","docLineText","TaleWeaverComponent","props","domRef","React","createRef","initialData","domElement","current","react_default","a","ref","Component","App","App_TaleWeaverComponent","Boolean","location","hostname","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31aefb39.chunk.js","sourcesContent":["abstract class Node {\n\n  abstract getType(): string;\n\n  abstract getSize(): number;\n};\n\nexport default Node;\n","import Node from './Node';\nimport TreePosition from './TreePosition';\n\nabstract class RootNode extends Node {\n\n  abstract getChildren(): Node[];\n\n  abstract childAt(offset: number): TreePosition;\n};\n\nexport default RootNode;\n","import Node from './Node';\nimport TreePosition from './TreePosition';\n\nabstract class BranchNode extends Node {\n\n  abstract getParent(): Node;\n\n  abstract getPreviousSibling(): Node | null;\n\n  abstract getNextSibling(): Node | null;\n\n  abstract getChildren(): Node[];\n\n  abstract parentAt(offset: number): TreePosition;\n\n  abstract childAt(offset: number): TreePosition;\n};\n\nexport default BranchNode;\n","import Node from './Node';\nimport TreePosition from './TreePosition';\n\nabstract class LeafNode extends Node {\n\n  abstract getParent(): Node;\n\n  abstract getPreviousSibling(): Node | null;\n\n  abstract getNextSibling(): Node | null;\n\n  abstract parentAt(offset: number): TreePosition;\n};\n\nexport default LeafNode;\n","import Node from './Node';\nimport RootNode from './RootNode';\nimport BranchNode from './BranchNode';\nimport LeafNode from './LeafNode';\n\nclass TreePosition {\n  private node: Node;\n  private offset: number;\n\n  constructor(node: Node, offset: number) {\n    this.node = node;\n    this.offset = offset;\n  }\n\n  getNode(): Node {\n    return this.node;\n  }\n\n  getOffset(): number {\n    return this.offset;\n  }\n\n  toParent(): TreePosition | null {\n    if (this.node instanceof BranchNode) {\n      return this.node.parentAt(this.offset);\n    }\n    if (this.node instanceof LeafNode) {\n      return this.node.parentAt(this.offset);\n    }\n    return null;\n  }\n\n  toChild(): TreePosition | null {\n    if (this.node instanceof RootNode) {\n      return this.node.childAt(this.offset);\n    }\n    if (this.node instanceof BranchNode) {\n      return this.node.childAt(this.offset);\n    }\n    return null;\n  }\n}\n\nexport default TreePosition;\n","interface Attributes {\n  [key: string]: any;\n}\n\nclass DocStartToken {\n  private attributes: Attributes;\n\n  constructor(attributes: Attributes) {\n    this.attributes = attributes;\n  }\n\n  getAttributes(): Attributes {\n    return this.attributes;\n  }\n}\n\nexport default DocStartToken;\n","class DocEndToken {}\n\nexport default DocEndToken;\n","interface Attributes {\n  [key: string]: any;\n}\n\nclass BlockStartToken {\n  private type: string;\n  private attributes: Attributes;\n\n  constructor(type: string, attributes: Attributes) {\n    this.type = type;\n    this.attributes = attributes;\n  }\n\n  getType(): string {\n    return this.type;\n  }\n\n  getAttributes(): Attributes {\n    return this.attributes;\n  }\n}\n\nexport default BlockStartToken;\n","class BlockEndToken {}\n\nexport default BlockEndToken;\n","import TaleWeaver from '../TaleWeaver';\nimport RootNode from '../tree/RootNode';\nimport TreePosition from '../tree/TreePosition';\nimport Token from '../state/Token';\nimport DocStartToken from '../state/DocStartToken';\nimport DocEndToken from '../state/DocEndToken';\nimport BlockStartToken from '../state/BlockStartToken';\nimport BlockEndToken from '../state/BlockEndToken';\nimport Block from './Block';\n\ntype Child = Block;\n\ninterface Attributes {\n  [key: string]: any;\n}\n\nexport default class Doc extends RootNode {\n  static getType(): string {\n    return 'Doc';\n  }\n\n  protected taleWeaver: TaleWeaver;\n  protected children: Child[];\n  protected attributes: Attributes;\n\n  constructor(taleWeaver: TaleWeaver, tokens: Token[]) {\n    super();\n    this.taleWeaver = taleWeaver;\n    this.children = [];\n    if (!(tokens[0] instanceof DocStartToken)) {\n      throw new Error(`Error building doc from tokens, expecting first token to be DocStartToken.`);\n    }\n    if (!(tokens[tokens.length - 1] instanceof DocEndToken)) {\n      throw new Error(`Error building doc from tokens, expecting last token to be DocEndToken.`);\n    }\n    const startToken = tokens[0] as DocStartToken;\n    this.attributes = startToken.getAttributes();\n    let childStartOffset = 1;\n    let depth = 0;\n    for (let n = 1, nn = tokens.length - 1; n < nn; n++) {\n      const token = tokens[n];\n      if (token instanceof BlockStartToken) {\n        if (depth === 0) {\n          childStartOffset = n;\n        }\n        depth += 1;\n      } else if (token instanceof BlockEndToken) {\n        depth -= 1;\n      }\n      if (depth === 0) {\n        const childTokens = tokens.slice(childStartOffset, n + 1);\n        const blockStartToken = tokens[childStartOffset] as BlockStartToken;\n        const BlockClass = taleWeaver.getConfig().getBlockClass(blockStartToken.getType());\n        const block = new BlockClass(taleWeaver, this, childTokens);\n        this.appendChild(block);\n      }\n    }\n  }\n\n  getType(): string {\n    return Doc.getType();\n  }\n\n  getSize(): number {\n    let size = 0;\n    this.children.forEach(child => {\n      size += child.getSize();\n    });\n    return size;\n  }\n\n  appendChild(child: Child) {\n    this.children.push(child);\n  }\n\n  removeChild(child: Child) {\n    const index = this.children.indexOf(child);\n    if (index < 0) {\n      return;\n    }\n    this.children.splice(index, 1);\n  }\n\n  getChildren(): Child[] {\n    return this.children;\n  }\n\n  childAt(offset: number): TreePosition {\n    if (offset < 0) {\n      throw new Error(`Doc offset out of range: ${offset}`);\n    }\n    let cumulatedOffset = 0;\n    for (let n = 0, nn = this.children.length; n < nn; n++) {\n      const child = this.children[n];\n      const childSize = child.getSize();\n      if (offset < cumulatedOffset + childSize) {\n        return new TreePosition(child, offset - cumulatedOffset);\n      }\n      cumulatedOffset += childSize;\n    }\n    throw new Error(`Doc offset out of range: ${offset}`);\n  }\n}\n","import TaleWeaver from '../TaleWeaver';\nimport Node from '../tree/Node';\nimport BranchNode from '../tree/BranchNode';\nimport TreePosition from '../tree/TreePosition';\nimport Block from '../model/Block';\nimport DocViewModel from './DocViewModel';\nimport WordViewModel from './WordViewModel';\n\ntype Parent = DocViewModel;\ntype Child = WordViewModel;\n\nclass BlockViewModel extends BranchNode {\n  protected taleWeaver: TaleWeaver;\n  protected block: Block;\n  protected parent: Parent;\n  protected children: Child[];\n\n  constructor(taleWeaver: TaleWeaver, block: Block, parent: Parent) {\n    super();\n    this.taleWeaver = taleWeaver;\n    this.block = block;\n    this.parent = parent;\n    this.children = [];\n    const wordViewModelClasses = new Set();\n    block.getChildren().forEach(inline => {\n      const wordViewModelClass = taleWeaver.getConfig().getWordViewModelClass(inline.getType());\n      wordViewModelClasses.add(wordViewModelClass);\n      // @ts-ignore\n      const wordViewModels: WordViewModel[] = wordViewModelClass.fromInline(taleWeaver, inline, this);\n      this.children.push(...wordViewModels);\n    });\n    wordViewModelClasses.forEach(wordViewModelClass => {\n      this.children = wordViewModelClass.postProcess(taleWeaver, this.children, this);\n    });\n  }\n\n  getType(): string {\n    return this.block.getType();\n  }\n  \n  getSize(): number {\n    return this.block.getSize();\n  }\n\n  getParent(): Parent {\n    return this.parent;\n  }\n\n  getPreviousSibling(): Node | null {\n    const siblings = this.parent.getChildren();\n    let index = siblings.indexOf(this);\n    if (index < 0) {\n      throw new Error(`Model is corrupted, block not found in parent.`);\n    }\n    if (index === 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  getNextSibling(): Node | null {\n    const siblings = this.parent.getChildren();\n    let index = siblings.indexOf(this);\n    if (index < 0) {\n      throw new Error(`Model is corrupted, block not found in parent.`);\n    }\n    if (index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  getChildren(): Child[] {\n    return this.children;\n  }\n\n  parentAt(offset: number): TreePosition {\n    if (offset < 0) {\n      throw new Error(`Block view offset out of range: ${offset}.`);\n    }\n    if (offset > this.getSize() - 1) {\n      throw new Error(`Block view offset out of range: ${offset}.`);\n    }\n    const parent = this.parent;\n    const siblings = parent.getChildren();\n    let cumulatedParentOffset = 1;\n    for (let n = 0, nn = siblings.length; n < nn; n++) {\n      const sibling = siblings[n];\n      if (sibling === this) {\n        return new TreePosition(parent, cumulatedParentOffset + offset);\n      }\n      cumulatedParentOffset += sibling.getSize();\n    }\n    throw new Error(`View model is corrupted, block view not found in parent.`);\n  }\n\n  childAt(offset: number): TreePosition {\n    if (offset < 1) {\n      throw new Error(`Block view offset out of range: ${offset}`);\n    }\n    let cumulatedOffset = 1;\n    for (let n = 0, nn = this.children.length; n < nn; n++) {\n      const child = this.children[n];\n      const childSize = child.getSize();\n      if (offset < cumulatedOffset + childSize) {\n        return new TreePosition(child, offset - cumulatedOffset);\n      }\n      cumulatedOffset += childSize;\n    }\n    throw new Error(`Block view offset out of range: ${offset}`);\n  }\n}\n\nexport default BlockViewModel;\n","import TaleWeaver from '../TaleWeaver';\nimport RootNode from '../tree/RootNode';\nimport TreePosition from '../tree/TreePosition';\nimport Doc from '../model/Doc';\nimport BlockViewModel from './BlockViewModel';\n\ntype Child = BlockViewModel;\n\nclass DocViewModel extends RootNode {\n  static getType(): string {\n    return 'Doc';\n  }\n\n  protected taleWeaver: TaleWeaver;\n  protected doc: Doc;\n  protected children: Child[];\n\n  constructor(taleWeaver: TaleWeaver, doc: Doc) {\n    super();\n    this.taleWeaver = taleWeaver;\n    this.doc = doc;\n    this.children = doc.getChildren().map(block => {\n      const blockViewModel = new BlockViewModel(taleWeaver, block, this);\n      return blockViewModel;\n    });\n  }\n\n  getType(): string {\n    return DocViewModel.getType();\n  }\n\n  getSize(): number {\n    return this.doc.getSize();\n  }\n\n  getChildren(): Child[] {\n    return this.children;\n  }\n\n  childAt(offset: number): TreePosition {\n    if (offset < 1) {\n      throw new Error(`Doc view offset out of range: ${offset}`);\n    }\n    let cumulatedOffset = 1;\n    for (let n = 0, nn = this.children.length; n < nn; n++) {\n      const child = this.children[n];\n      const childSize = child.getSize();\n      if (offset < cumulatedOffset + childSize) {\n        return new TreePosition(child, offset - cumulatedOffset);\n      }\n      cumulatedOffset += childSize;\n    }\n    throw new Error(`Doc view offset out of range: ${offset}`);\n  }\n}\n\nexport default DocViewModel;\n","export interface ViewDOMElements {}\n\nabstract class View {\n\n  abstract getSize(): number;\n\n  abstract mount(domWrapper: HTMLElement): void;\n  \n  abstract getDOM(): ViewDOMElements;\n}\n\nexport default View;\n","import DocView from './DocView';\nimport LineView, { LineViewAwarePosition } from './LineView';\n\n/**\n * Page view configs.\n */\nexport interface PageViewConfig {\n  width: number;\n  height: number;\n  paddingTop: number;\n  paddingBottom: number;\n  paddingLeft: number;\n  paddingRight: number;\n}\n\nexport interface PageViewDOMElements {\n  domPage: HTMLDivElement;\n  domPageContent: HTMLDivElement;\n}\n\nexport interface PageViewPositionBox {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n}\n\nexport interface PageViewAwarePosition extends LineViewAwarePosition {\n  pageView: PageView;\n  pageViewPosition: number;\n};\n\nexport default class PageView {\n  private docView: DocView;\n  private config: PageViewConfig;\n\n  private lineViews: LineView[];\n\n  private mounted: boolean;\n  private domPage?: HTMLDivElement;\n  private domPageContent?: HTMLDivElement;\n\n  constructor(docView: DocView, config: PageViewConfig) {\n    this.docView = docView;\n    this.config = config;\n\n    this.lineViews = [];\n\n    this.mounted = false;\n  }\n\n  /**\n   * Gets the model size of the page.\n   */\n  getSize(): number {\n    let size = 0;\n    this.lineViews!.forEach(lineView => size += lineView.getSize());\n    return size;\n  }\n\n  /**\n   * Gets the parent document view.\n   */\n  getDocView(): DocView {\n    return this.docView!;\n  }\n\n  /**\n   * Gets the previous page view in the parent document view.\n   */\n  getPreviousPageView(): PageView | null {\n    const pageViews = this.docView!.getPageViews();\n    const index = pageViews.indexOf(this);\n    if (index < 0) {\n      return null;\n    }\n    if (index === 0) {\n      return null;\n    }\n    return pageViews[index - 1];\n  }\n\n  /**\n   * Gets the next page view in the parent document view.\n   */\n  getNextPageView(): PageView | null {\n    const pageViews = this.docView!.getPageViews();\n    const index = pageViews.indexOf(this);\n    if (index < 0) {\n      return null;\n    }\n    if (index === pageViews.length - 1) {\n      return null;\n    }\n    return pageViews[index + 1];\n  }\n\n  /**\n   * Appends a line view to the page.\n   */\n  appendLineView(lineView: LineView) {\n    this.lineViews.push(lineView);\n    lineView.setPageView(this);\n  }\n\n  /**\n   * Remove a line view from the page.\n   */\n  removeLineView(lineView: LineView) {\n    const index = this.lineViews.indexOf(lineView);\n    if (index < 0) {\n      return;\n    }\n    this.lineViews.splice(index, 1);\n  }\n\n  /**\n   * Gets the child line views.\n   */\n  getLineViews(): LineView[] {\n    return this.lineViews;\n  }\n\n  /**\n   * Mounts the view to DOM.\n   */\n  mount() {\n    // Do not mount if already mounted\n    if (this.mounted) {\n      return;\n    }\n\n    // Get wrapper element\n    const { domDocumentContent } = this.docView.getDOM();\n\n    // Build page element\n    this.domPage = document.createElement('div');\n    this.domPage.className = 'tw--page';\n    this.domPage.style.width = `${this.config.width}px`;\n    this.domPage.style.height = `${this.config.height}px`;\n    this.domPage.style.padding = `${this.config.paddingTop}px ${this.config.paddingRight}px ${this.config.paddingBottom}px ${this.config.paddingLeft}px`;\n    this.domPage.style.userSelect = 'none';\n    this.domPage.style.position = 'relative';\n    domDocumentContent.appendChild(this.domPage);\n\n    // Build page content element\n    this.domPageContent = document.createElement('div');\n    this.domPageContent.className = 'tw--page-content';\n    this.domPageContent.style.position = 'relative';\n    this.domPageContent.style.height = '100%';\n    this.domPage.appendChild(this.domPageContent);\n\n    // Mount line views\n    this.lineViews.forEach(lineView => lineView.mount());\n  }\n\n  /**\n   * Gets DOM elements mounted by the view.\n   */\n  getDOM(): PageViewDOMElements {\n    return {\n      domPage: this.domPage!,\n      domPageContent: this.domPageContent!,\n    };\n  }\n\n  /**\n   * Gets the height of the view.\n   */\n  getHeight(): number {\n    return this.config.height;\n  }\n\n  /**\n   * Maps a model position range to view position boxes.\n   * @param from - Left-bound of the model position range.\n   * @param to - Right-bound of the model position range.\n   */\n  mapModelPositionRangeToViewPositionBoxes(from: number, to: number): PageViewPositionBox[] {\n    // Iterate through lines to break up model position range\n    const viewPositionBoxes: PageViewPositionBox[] = [];\n    let offset = 0;\n    let cumulatedHeight = 0;\n    for (let n = 0, nn = this.lineViews.length; n < nn; n++) {\n      const lineView = this.lineViews[n];\n      // If overlap between position range and line\n      if (to >= offset && from < offset + lineView.getSize()) {\n        // Get line view position boxes\n        const lineViewPositionBox = lineView.mapModelPositionRangeToViewPositionBox(\n          Math.max(0, from - offset),\n          Math.min(lineView.getSize(), to - offset),\n        );\n        // Map line view position box to document view position box\n        viewPositionBoxes.push({\n          x1: lineViewPositionBox.x1,\n          y1: cumulatedHeight,\n          x2: lineViewPositionBox.x2,\n          y2: cumulatedHeight + lineViewPositionBox.height,\n        });\n      }\n      offset += lineView.getSize();\n      cumulatedHeight += lineView.getHeight();\n    }\n    return viewPositionBoxes;\n  }\n\n  /**\n   * Maps a view position to model position.\n   * @param x - X-coordinate of the view position.\n   * @param y - Y-coordinate of the view position.\n   */\n  mapViewPositionToModelPosition(x: number, y: number): number {\n    // Iterate through lines until the line that contains the view position\n    // is found\n    let offset = 0;\n    let cumulatedHeight = 0;\n    for (let n = 0, nn = this.lineViews.length; n < nn; n++) {\n      const lineView = this.lineViews[n];\n      // If posterior of line is past Y-coordinate\n      if (cumulatedHeight + lineView.getHeight() >= y) {\n        // Get model position in line\n        const lineModelPosition = lineView.mapViewPositionToModelPosition(x);\n        // Map line model position to page model position\n        return offset + lineModelPosition;\n      }\n      offset += lineView.getSize();\n      cumulatedHeight += lineView.getHeight();\n    }\n    return offset - 1;\n  }\n\n  /**\n   * Resolves a flat model position to a view-aware position\n   * object.\n   * @param position - Flat model position to resolve.\n   */\n  resolveModelPosition(position: number): PageViewAwarePosition {\n    // Iterate through lines until the line that contains the view position\n    // is found\n    let offset = 0;\n    for (let n = 0, nn = this.lineViews.length; n < nn; n++) {\n      const lineView = this.lineViews[n];\n      // If posterior of line is past position\n      if (offset + lineView.getSize() > position) {\n        // Resolve model position in line\n        const lineViewAwarePosition = lineView.resolveModelPosition(position - offset);\n        // Map line view aware position to page view aware position\n        return {\n          ...lineViewAwarePosition,\n          pageView: this,\n          pageViewPosition: position,\n        };\n      }\n      offset += lineView.getSize();\n    }\n    throw new Error(`Cannot resolve page model position ${position}.`);\n  }\n}\n","import CursorTransformationStep from './CursorTransformationStep';\n\n/**\n * Describes a cursor transformation as a series\n * of steps.\n */\nexport default class CursorTransformation {\n  private steps: CursorTransformationStep[] = [];\n\n  /**\n   * Create a new cursor transformation.\n   */\n  constructor() {\n    this.steps = [];\n  }\n\n  /**\n   * Add a step to the transformation.\n   */\n  addStep(step: CursorTransformationStep) {\n    this.steps.push(step);\n  }\n\n  /**\n   * Get all steps of the transformation.\n   */\n  getSteps(): CursorTransformationStep[] {\n    return this.steps;\n  }\n}\n","import CursorTransformationStep from '../CursorTransformationStep';\nimport { CursorTransformationExtraArgs } from '../../cursor/Cursor';\n\n/**\n * A transformation step for translating the cursor\n * by a certain displacement. The cursor head gets\n * displaced and the anchor gets moved to the head.\n */\nexport default class TranslateCursor implements CursorTransformationStep {\n  private displacement: number;\n  private preserveLineViewPosition: boolean;\n\n  /**\n   * Create a new move cursor anchor transformation step.\n   * @param displacement - Vector to displace the cursor anchor by.\n   * @param preserveLineViewPosition - Whether to preserve line view position.\n   */\n  constructor(displacement: number, preserveLineViewPosition: boolean = false) {\n    this.displacement = displacement;\n    this.preserveLineViewPosition = preserveLineViewPosition;\n  }\n\n  getType(): string {\n    return 'TranslateCursor';\n  }\n\n  getExtraArgs(): CursorTransformationExtraArgs {\n    return { preserveLineViewPosition: this.preserveLineViewPosition };\n  }\n\n  /**\n   * Get displacement vector.\n   */\n  getDisplacement(): number {\n    return this.displacement;\n  }\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursor from '../../transform/cursortransformationsteps/TranslateCursor';\n\nexport default function moveToLineStart(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const docView = taleWeaver.getDocView();\n    const viewAwarePosition = docView.resolveModelPosition(head);\n    if (viewAwarePosition.lineViewPosition > 0) {\n      transformation.addStep(new TranslateCursor(0 - viewAwarePosition.lineViewPosition));\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursor from '../../transform/cursortransformationsteps/TranslateCursor';\n\nexport default function moveToLineEnd(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const docView = taleWeaver.getDocView();\n    const viewAwarePosition = docView.resolveModelPosition(head);\n    if (viewAwarePosition.lineViewPosition < viewAwarePosition.lineView.getSize() - 1) {\n      transformation.addStep(new TranslateCursor(viewAwarePosition.lineView.getSize() - 1 - viewAwarePosition.lineViewPosition));\n    }\n    return transformation;\n  };\n}\n","import CursorTransformationStep from '../CursorTransformationStep';\nimport { CursorTransformationExtraArgs } from '../../cursor/Cursor';\n\n/**\n * A transformation step for translating the cursor head\n * by a certain displacement.\n */\nexport default class TranslateCursorHead implements CursorTransformationStep {\n  private displacement: number;\n  private preserveLineViewPosition: boolean;\n\n  /**\n   * Create a new move cursor head transformation step.\n   * @param displacement - Vector to displace the cursor head by.\n   * @param preserveLineViewPosition - Whether to preserve line view position.\n   */\n  constructor(displacement: number, preserveLineViewPosition: boolean = false) {\n    this.displacement = displacement;\n    this.preserveLineViewPosition = preserveLineViewPosition;\n  }\n\n  getType(): string {\n    return 'TranslateCursorHead';\n  }\n\n  getExtraArgs(): CursorTransformationExtraArgs {\n    return { preserveLineViewPosition: this.preserveLineViewPosition };\n  }\n\n  /**\n   * Get displacement vector.\n   */\n  getDisplacement(): number {\n    return this.displacement;\n  }\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursorHead from '../../transform/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadTo(position: number): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    transformation.addStep(new TranslateCursorHead(position - editorCursor.getHead()));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursorHead from '../../transform/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadToLineStart(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const docView = taleWeaver.getDocView();\n    const viewAwarePosition = docView.resolveModelPosition(head);\n    if (viewAwarePosition.lineViewPosition > 0) {\n      transformation.addStep(new TranslateCursorHead(0 - viewAwarePosition.lineViewPosition));\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursorHead from '../../transform/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadRightByLine(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const docView = taleWeaver.getDocView();\n    const viewAwarePosition = docView.resolveModelPosition(head);\n    if (viewAwarePosition.lineViewPosition < viewAwarePosition.lineView.getSize() - 1) {\n      transformation.addStep(new TranslateCursorHead(viewAwarePosition.lineView.getSize() - 1 - viewAwarePosition.lineViewPosition));\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../TaleWeaver';\nimport Cursor from '../cursor/Cursor';\nimport DocView from './DocView';\nimport { moveTo, moveHeadTo } from '../command/cursor';\nimport isElementInViewport from '../helpers/isElementInViewport';\n\nexport default class EditorCursorView {\n  private taleWeaver: TaleWeaver;\n  private editorCursor: Cursor;\n  private docView?: DocView;\n  private domHead?: HTMLElement;\n  private domSelections: HTMLElement[];\n  private selecting: boolean;\n  private blinkState: boolean;\n  private blinkInterval: NodeJS.Timeout | null;\n  private lineViewX: number | null;\n  private lastLineViewX: number;\n\n  constructor(taleWeaver: TaleWeaver, editorCursor: Cursor) {\n    this.taleWeaver = taleWeaver;\n    this.editorCursor = editorCursor;\n    this.domSelections = [];\n    this.selecting = false;\n    this.blinkState = false;\n    this.blinkInterval = null;\n    this.lineViewX = null;\n    this.lastLineViewX = 0;\n  }\n\n  private render(preserveLineViewPosition: boolean = false) {\n    this.renderHead(preserveLineViewPosition);\n    this.renderSelections();\n    this.updateNativeCursor();\n  }\n\n  private renderHead(preserveLineViewPosition: boolean) {\n    const editorCursor = this.editorCursor;\n    const head = editorCursor.getHead();\n    const viewPositionBoxes = this.docView!.mapModelPositionRangeToViewPositionBoxes(head, head);\n    const { pageView, pageViewPositionBox } = viewPositionBoxes[0];\n    const domHead = this.domHead!;\n    domHead.style.left = `${pageViewPositionBox.x1}px`;\n    domHead.style.top = `${pageViewPositionBox.y1}px`;\n    domHead.style.height = `${pageViewPositionBox.y2 - pageViewPositionBox.y1}px`;\n    const { domPageContent } = pageView.getDOM();\n    if (domHead.parentElement && domHead.parentElement !== domPageContent) {\n      domHead.parentElement!.removeChild(domHead);\n    }\n    if (!domHead.parentElement) {\n      domPageContent.appendChild(domHead);\n    }\n    if (preserveLineViewPosition) {\n      if (this.lineViewX === null) {\n        this.lineViewX = this.lastLineViewX;\n      }\n    } else {\n      this.lineViewX = null;\n    }\n    this.lastLineViewX = pageViewPositionBox.x1;\n\n    // Scroll view port to head if head is out of view port\n    if (!isElementInViewport(domHead)) {\n      domHead.scrollIntoView({ block: 'nearest' });\n    }\n  }\n\n  private renderSelections() {\n    const editorCursor = this.editorCursor;\n    const anchor = editorCursor.getAnchor();\n    const head = editorCursor.getHead();\n    const from = Math.min(anchor, head);\n    const to = Math.max(anchor, head);\n    const viewPositionBoxes = this.docView!.mapModelPositionRangeToViewPositionBoxes(from, to);\n    let selectionsCount = viewPositionBoxes.length;\n    while (this.domSelections.length > selectionsCount) {\n      const domSelection = this.domSelections.pop()!;\n      domSelection.parentElement!.removeChild(domSelection);\n    }\n    while (this.domSelections.length < selectionsCount) {\n      const domSelection = document.createElement('div');\n      domSelection.className = 'tw--editor-cursor-selection';\n      domSelection.style.position = 'absolute';\n      domSelection.style.background = 'hsla(217, 100%, 65%, 0.25)';\n      this.domSelections.push(domSelection);\n    }\n    let selectionIndex = 0;\n    viewPositionBoxes.forEach(({ pageView, pageViewPositionBox }) => {\n      const { domPageContent } = pageView.getDOM();\n      const domSelection = this.domSelections[selectionIndex]!;\n      domSelection.style.left = `${pageViewPositionBox.x1}px`;\n      domSelection.style.width = `${pageViewPositionBox.x2 - pageViewPositionBox.x1}px`;\n      domSelection.style.top = `${pageViewPositionBox.y1}px`;\n      domSelection.style.height = `${pageViewPositionBox.y2 - pageViewPositionBox.y1}px`;\n      domSelection.style.pointerEvents = 'none';\n      if (domSelection.parentElement && domSelection.parentElement !== domPageContent) {\n        domSelection.parentElement!.removeChild(domSelection);\n      }\n      if (!domSelection.parentElement) {\n        domPageContent.appendChild(domSelection);\n      }\n      selectionIndex++;\n    });\n  }\n\n  private updateNativeCursor() {\n    const docView = this.taleWeaver.getDocView();\n    const anchor = this.editorCursor.getAnchor();\n    const head = this.editorCursor.getHead();\n    const viewAwareAnchorPosition = docView.resolveModelPosition(anchor);\n    const viewAwareHeadPosition = docView.resolveModelPosition(head);\n    const { domWordContent } = viewAwareAnchorPosition.wordView.getDOM();\n    const selection = getSelection();\n    selection.removeAllRanges();\n    const range = document.createRange();\n    range.selectNode(domWordContent);\n    selection.addRange(range);\n  }\n\n  getLineViewX(): number | null {\n    return this.lineViewX;\n  }\n\n  setDocView(docView: DocView) {\n    this.docView = docView;\n  }\n\n  mount() {\n    if (!this.domHead) {\n      this.domHead = document.createElement('div');\n      this.domHead.className = 'tw--editor-cursor-head';\n      this.domHead.style.position = 'absolute';\n      this.domHead.style.width = '2px';\n      this.domHead.style.marginLeft = '-1px';\n      this.domHead.style.background = 'hsla(217, 100%, 65%, 1)';\n      this.domHead.style.visibility = 'hidden';\n    }\n    this.render();\n    this.startBlinking();\n    this.editorCursor.observe((editorCursor, extraArgs) => {\n      this.render(extraArgs.preserveLineViewPosition);\n      if (this.blinkInterval !== null) {\n        this.stopBlinking();\n        this.startBlinking();\n      }\n    });\n  }\n\n  getEditorCursor(): Cursor {\n    return this.editorCursor;\n  }\n\n  getDocView(): DocView {\n    return this.docView!;\n  }\n\n  startBlinking() {\n    if (this.blinkInterval !== null) {\n      return;\n    }\n    this.blinkInterval = setInterval(() => {\n      if (this.blinkState) {\n        this.domHead!.style.visibility = 'hidden';\n      } else {\n        this.domHead!.style.visibility = 'visible';\n      }\n      this.blinkState = !this.blinkState;\n    }, 500);\n  }\n\n  stopBlinking() {\n    if (this.blinkInterval === null) {\n      return;\n    }\n    this.blinkState = true;\n    this.domHead!.style.visibility = 'visible';\n    clearInterval(this.blinkInterval);\n    this.blinkInterval = null;\n  }\n\n  beginSelect(position: number) {\n    this.taleWeaver.applyEditorCursorTransformation(moveTo(position)(this.taleWeaver));\n    this.selecting = true;\n    this.stopBlinking();\n  }\n\n  moveSelect(position: number) {\n    if (this.selecting) {\n      this.taleWeaver.applyEditorCursorTransformation(moveHeadTo(position)(this.taleWeaver));\n    }\n  }\n\n  endSelect(position: number) {\n    this.taleWeaver.applyEditorCursorTransformation(moveHeadTo(position)(this.taleWeaver));\n    this.selecting = false;\n    this.startBlinking();\n  }\n}\n","export default function isElementInViewport(element: HTMLElement) {\n  const rect = element.getBoundingClientRect();\n  return (\n      rect.top >= 0 &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement!.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement!.clientWidth)\n  );\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursor from '../../transform/cursortransformationsteps/TranslateCursor';\n\nexport default function moveTo(position: number): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    transformation.addStep(new TranslateCursor(position - editorCursor.getHead()));\n    return transformation;\n  };\n}\n","export default interface Event {}\n\nexport class KeyPressEvent implements Event {\n  public readonly key: string;\n  public readonly shift: boolean;\n  public readonly meta: boolean;\n  public readonly alt: boolean;\n\n  constructor(key: string, shift: boolean, meta: boolean, alt: boolean) {\n    this.key = key;\n    this.shift = shift;\n    this.meta = meta;\n    this.alt = alt;\n  }\n}\n","import TaleWeaver from '../TaleWeaver';\nimport DocViewModel from '../viewmodel/DocViewModel';\nimport BlockViewModel from '../viewmodel/BlockViewModel';\nimport throttle from '../helpers/throttle';\nimport View, { ViewDOMElements } from './View';\nimport PageView, { PageViewPositionBox, PageViewAwarePosition } from './PageView';\nimport WordView from './WordView';\nimport LineView from './LineView';\nimport EditorCursorView from './EditorCursorView';\nimport { KeyPressEvent } from '../event/Event';\n\n/**\n * Box views of a block element, useful\n * as an intermediate data structure\n * where the word views can be further\n * broken down into line views.\n */\ninterface WordViewBlock {\n  blockViewModel: BlockViewModel;\n  wordViews: WordView[];\n};\n\n/**\n * Document view configs.\n */\ninterface DocViewConfig {\n  /** Width of a page in the document. */\n  pageWidth: number;\n  /** Height of a page in the document. */\n  pageHeight: number;\n  /** Topping padding of a page in the document. */\n  pagePaddingTop: number;\n  /** Bottom padding of a page in the document. */\n  pagePaddingBottom: number;\n  /** Left padding of a page in the document. */\n  pagePaddingLeft: number;\n  /** Right padding of a page in the document. */\n  pagePaddingRight: number;\n};\n\nexport interface DocViewDOMElements extends ViewDOMElements {\n  domDocument: HTMLDivElement;\n  domDocumentContent: HTMLDivElement;\n}\n\nexport interface DocViewPositionBox {\n  pageView: PageView;\n  pageViewPositionBox: PageViewPositionBox;\n};\n\nexport interface DocViewAwarePosition extends PageViewAwarePosition {\n  docView: DocView;\n  docViewPosition: number;\n};\n\n/**\n * View of a document.\n */\nexport default class DocView extends View {\n  private taleWeaver: TaleWeaver;\n  private docViewModel: DocViewModel;\n  private config: DocViewConfig;\n\n  private wordViewBlocks: WordViewBlock[];\n  private lineViews: LineView[];\n  private pageViews: PageView[];\n  private editorCursorView: EditorCursorView | null;\n\n  private mounted: boolean;\n  private domDocument?: HTMLDivElement;\n  private domDocumentContent?: HTMLDivElement;\n\n  constructor(taleWeaver: TaleWeaver, docViewModel: DocViewModel, config: DocViewConfig) {\n    super();\n    this.taleWeaver = taleWeaver;\n    this.docViewModel = docViewModel;\n    this.config = config;\n\n    this.wordViewBlocks = [];\n    this.lineViews = [];\n    this.pageViews = [];\n    this.editorCursorView = null;\n\n    this.mounted = false;\n    \n    // Build child views\n    this.buildWordViewBlocks();\n    this.buildLineViews();\n    this.buildPageViews();\n    this.buildEditorCursorView();\n  }\n\n  getSize(): number {\n    return this.docViewModel.getSize();\n  }\n\n  mount(domWrapper: HTMLElement) {\n    // Do not mount if already mounted\n    if (this.mounted) {\n      return;\n    }\n\n    // Build document element\n    this.domDocument = document.createElement('div');\n    this.domDocument.className = 'tw--document';\n    this.domDocument.contentEditable = 'true';\n    this.domDocument.spellcheck = false;\n    this.domDocument.style.outline = 'none';\n    domWrapper.appendChild(this.domDocument);\n\n    // Build document content element\n    this.domDocumentContent = document.createElement('div');\n    this.domDocumentContent.className = 'tw--document-content';\n    this.domDocument.appendChild(this.domDocumentContent);\n\n    // Mount page views\n    this.pageViews.forEach(pageView => pageView.mount());\n\n    // Mount editor cursor view, if available\n    if (this.editorCursorView) {\n      this.editorCursorView.mount();\n    }\n\n    // Attach event listeners\n    this.domDocument.addEventListener('contextmenu', this.handleContextMenu);\n    this.domDocument.addEventListener('mousedown', this.handleMouseDown);\n    this.domDocument.addEventListener('mousemove', this.handleMouseMove);\n    window.addEventListener('mouseup', this.handleMouseUp);\n    window.addEventListener('keydown', this.handleKeyDown);\n    window.addEventListener('keyup', this.handleKeyUp);\n  }\n\n  getDOM(): DocViewDOMElements {\n    return {\n      domDocument: this.domDocument!,\n      domDocumentContent: this.domDocumentContent!,\n    };\n  }\n\n  /**\n   * Gets the child page views.\n   */\n  getPageViews(): PageView[] {\n    return this.pageViews;\n  }\n\n  /**\n   * Gets the child editor cursor view.\n   */\n  getEditorCursorView(): EditorCursorView | null {\n    return this.editorCursorView;\n  }\n\n  /**\n   * Maps a model position range to view position boxes.\n   * @param from - Left-bound of the model position range.\n   * @param to - Right-bound of the model position range.\n   */\n  mapModelPositionRangeToViewPositionBoxes(from: number, to: number): DocViewPositionBox[] {\n    // Iterate through pages to break up model position range\n    const viewPositionBoxes: DocViewPositionBox[] = [];\n    let offset = 0;\n    for (let n = 0, nn = this.pageViews.length; n < nn; n++) {\n      const pageView = this.pageViews[n];\n      // If overlap between position range and page\n      if (to >= offset && from < offset + pageView.getSize()) {\n        // Get page view position boxes\n        const pageViewPositionBoxes = pageView.mapModelPositionRangeToViewPositionBoxes(\n          Math.max(0, from - offset),\n          Math.min(pageView.getSize(), to - offset),\n        );\n        // Map page view position boxes to document view position boxes\n        pageViewPositionBoxes.forEach(pageViewPositionBox => {\n          viewPositionBoxes.push({\n            pageView,\n            pageViewPositionBox,\n          });\n        });\n      }\n      offset += pageView.getSize();\n    }\n    return viewPositionBoxes;\n  }\n\n  /**\n   * Maps a view position to model position.\n   * @param x - X-coordinate of the view position.\n   * @param y - Y-coordinate of the view position.\n   */\n  mapViewPositionToModelPosition(x: number, y: number): number {\n    // Iterate through pages until the page that contains the view position\n    // is found\n    let offset = 0;\n    const clientRects: ClientRect[] = [];\n    const offsets: number[] = [];\n    for (let n = 0, nn = this.pageViews.length; n < nn; n++) {\n      const pageView = this.pageViews[n];\n      // Get page bounding client rect\n      const { domPageContent } = pageView.getDOM();\n      clientRects.push(domPageContent.getBoundingClientRect());\n      offsets.push(offset);\n      offset += pageView.getSize();\n    }\n    // Find page view closest to the view position\n    const sqDistances = clientRects.map(clientRect => {\n      const xDistance = Math.max(Math.max(clientRect.left - x, 0), Math.max(x - (clientRect.left + clientRect.width), 0));\n      const yDistance = Math.max(Math.max(clientRect.top - y, 0), Math.max(y - (clientRect.top + clientRect.height), 0));\n      return xDistance * xDistance + yDistance * yDistance;\n    });\n    const index = sqDistances.indexOf(Math.min(...sqDistances));\n    // Map position on closest page\n    const pageView = this.pageViews[index];\n    const clientRect = clientRects[index];\n    const pageModelPosition = pageView.mapViewPositionToModelPosition(\n      Math.min(Math.max(x - clientRect.left, 0), clientRect.width),\n      Math.min(Math.max(y - clientRect.top, 0), clientRect.height),\n    );\n    return offsets[index] + pageModelPosition;\n  }\n\n  /**\n   * Resolves a flat model position to a view-aware position\n   * object.\n   * @param position - Flat model position to resolve.\n   */\n  resolveModelPosition(position: number): DocViewAwarePosition {\n    // Iterate through pages until the page that contains the view position\n    // is found\n    let offset = 0;\n    for (let n = 0, nn = this.pageViews.length; n < nn; n++) {\n      const pageView = this.pageViews[n];\n      // If posterior of page is past position\n      if (offset + pageView.getSize() > position) {\n        // Resolve model position in page\n        const pageViewAwarePosition = pageView.resolveModelPosition(position - offset);\n        // Map page view aware position to document view aware position\n        return {\n          ...pageViewAwarePosition,\n          docView: this,\n          docViewPosition: position,\n        };\n      }\n      offset += pageView.getSize();\n    }\n    throw new Error(`Cannot resolve document model position ${position}.`);\n  }\n\n  /**\n   * Builds word views for each block element in\n   * the document.\n   */\n  private buildWordViewBlocks() {\n    const config = this.taleWeaver.getConfig();\n    // Reset wordViewBlocks\n    this.wordViewBlocks.length = 0;\n    // Loop through block elements in the document\n    this.docViewModel.getChildren().forEach(blockViewModel => {\n      const wordViewBlock: WordViewBlock = {\n        blockViewModel,\n        wordViews: [],\n      };\n      // Loop through inline elements in the block element\n      blockViewModel.getChildren().forEach(wordViewModel => {\n        // Build word view from word\n        const WordView = config.getWordViewClass(wordViewModel.getType())!;\n        const wordView = new WordView(wordViewModel, {});\n        wordViewBlock.wordViews.push(wordView);\n      });\n      this.wordViewBlocks.push(wordViewBlock);\n    });\n  }\n\n  /**\n   * Builds line views from word views, should not\n   * be called unless buildWordViewBlocks was called.\n   */\n  private buildLineViews() {\n    // Reset lineViews\n    this.lineViews.length = 0;\n    const config = this.taleWeaver.getConfig();\n    // Determine page content width as width minus paddings\n    const pageContentWidth = this.config.pageWidth - this.config.pagePaddingLeft - this.config.pagePaddingRight;\n    // Loop through blocks of word views\n    this.wordViewBlocks.forEach(wordViewBlock => {\n      // Build line views for block\n      const LineView = config.getLineViewClass(wordViewBlock.blockViewModel.getType())!;\n      let lineView = new LineView({\n        width: this.config.pageWidth - this.config.pagePaddingLeft - this.config.pagePaddingRight,\n      });\n      this.lineViews.push(lineView);\n      let cumulatedWidth = 0;\n      // Loop through word views in block\n      wordViewBlock.wordViews.forEach(wordView => {\n        // Start new line if current line i is full\n        if (cumulatedWidth + wordView.getWidth() > pageContentWidth) {\n          lineView = new LineView({\n            width: this.config.pageWidth - this.config.pagePaddingLeft - this.config.pagePaddingRight,\n          });\n          this.lineViews.push(lineView);\n          cumulatedWidth = 0;\n        }\n        // Append word view to current line view\n        wordView.setLineView(lineView);\n        lineView.appendWordView(wordView);\n        cumulatedWidth += wordView.getWidth();\n      });\n    });\n  }\n\n  /**\n   * Builds page views from line views, should not\n   * be called unless buildLineViews was called.\n   */\n  private buildPageViews() {\n    // Reset pageViews\n    this.pageViews.length = 0;\n    // Build page views\n    const pageViewConigs = {\n      width: this.config.pageWidth,\n      height: this.config.pageHeight,\n      paddingTop: this.config.pagePaddingTop,\n      paddingBottom: this.config.pagePaddingBottom,\n      paddingLeft: this.config.pagePaddingLeft,\n      paddingRight: this.config.pagePaddingRight,\n    };\n    let pageView = new PageView(this, pageViewConigs);\n    this.pageViews.push(pageView);\n    let cumulatedHeight = 0;\n    // Determine page content height as height minus paddings\n    const pageContentHeight = this.config.pageHeight - this.config.pagePaddingTop - this.config.pagePaddingBottom;\n    // Loop through line views\n    this.lineViews.forEach(lineView => {\n      // Start new page if current page is full\n      if (cumulatedHeight + lineView.getHeight() > pageContentHeight) {\n        pageView = new PageView(this, pageViewConigs);\n        this.pageViews.push(pageView);\n        cumulatedHeight = 0;\n      }\n      // Append line view to page view\n      lineView.setPageView(pageView);\n      pageView.appendLineView(lineView);\n      cumulatedHeight += lineView.getHeight();\n    });\n  }\n\n  /**\n   * Builds editor cursor views.\n   */\n  private buildEditorCursorView() {\n    const editorCursor = this.taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return;\n    }\n    this.editorCursorView = new EditorCursorView(this.taleWeaver!, editorCursor);\n    this.editorCursorView.setDocView(this);\n  }\n\n  /**\n   * Handles contextmenu DOM event.\n   */\n  private handleContextMenu = (event: Event) => {\n    // Disable browser context menu functionality\n    event.preventDefault();\n  }\n\n  /**\n   * Handles mouse down DOM event.\n   */\n  private handleMouseDown = (event: MouseEvent) => {\n    event.preventDefault();\n    // No need to handle mouse down if no editor cursor\n    if (!this.editorCursorView) {\n      return;\n    }\n    const position = this.mapViewPositionToModelPosition(event.clientX, event.clientY);\n    this.editorCursorView.beginSelect(position);\n  }\n\n  /**\n   * Handles mouse move DOM event.\n   */\n  private handleMouseMove = throttle((event: MouseEvent) => {\n    // No need to handle mouse down if no editor cursor\n    if (!this.editorCursorView) {\n      return;\n    }\n    const position = this.mapViewPositionToModelPosition(event.clientX, event.clientY);\n    this.editorCursorView.moveSelect(position);\n  }, 5)\n\n  /**\n   * Handles mouse up DOM event.\n   */\n  private handleMouseUp = (event: MouseEvent) => {\n    // No need to handle mouse down if no editor cursor\n    if (!this.editorCursorView) {\n      return;\n    }\n    const position = this.mapViewPositionToModelPosition(event.clientX, event.clientY);\n    this.editorCursorView.endSelect(position);\n  }\n\n  /**\n   * Handles key down DOM event.\n   */\n  private handleKeyDown = (event: KeyboardEvent) => {\n    this.taleWeaver.dispatchEvent(new KeyPressEvent(event.key, event.shiftKey, event.metaKey, event.altKey));\n    event.preventDefault();\n  }\n\n  /**\n   * Handles key up DOM event.\n   */\n  private handleKeyUp = (event: KeyboardEvent) => {\n  }\n}\n","/**\n * Throttles a function so that it runs at most\n * once per specified number of milliseconds.\n */\nexport default function throttle(func: (...args: any) => void, milliseconds: number) {\n  let throttledRunTimeout: NodeJS.Timeout;\n  let lastRunAt: number;\n  return (...args: any) => {\n    if (!lastRunAt) {\n      func(...args);\n      lastRunAt = Date.now();\n    } else {\n      clearTimeout(throttledRunTimeout);\n      throttledRunTimeout = setTimeout(() => {\n        func(...args);\n        lastRunAt = Date.now();\n      }, milliseconds - (Date.now() - lastRunAt));\n    }\n  };\n}\n","import Cursor from '../cursor/Cursor';\nimport CursorTransformation from './CursorTransformation';\nimport TranslateCursor from './cursortransformationsteps/TranslateCursor';\nimport TranslateCursorHead from './cursortransformationsteps/TranslateCursorHead';\n\n/**\n * Transformer for applying transformations\n * on cursors.\n */\nexport default class CursorTransformer {\n  /**\n   * Applies a transformation on a cursor.\n   * @param cursor - Cursor to apply transformation on.\n   * @param transformation - Transformation to apply.\n   */\n  apply(cursor: Cursor, transformation: CursorTransformation) {\n    const steps = transformation.getSteps();\n    steps.forEach(step => {\n      if (step instanceof TranslateCursor) {\n        cursor.moveTo(cursor.getHead() + step.getDisplacement(), step.getExtraArgs());\n      } else if (step instanceof TranslateCursorHead) {\n        cursor.moveHeadTo(cursor.getHead() + step.getDisplacement(), step.getExtraArgs());\n      } else {\n        throw new Error(`Unrecognized cursor transformation step: ${step.getType()}`);\n      }\n    });\n  }\n}\n","import DocumentTransformationStep from '../DocumentTransformationStep';\n\n/**\n * A transformation step for assigning content\n * to a word in the document.\n */\nexport default class Assign implements DocumentTransformationStep {\n  private text: string;\n\n  /**\n   * Create a new assign document transformation step.\n   * @param text - Text to assign to the inline element.\n   */\n  constructor(text: string) {\n    this.text = text;\n  }\n\n  getType(): string {\n    return 'Assign';\n  }\n\n  getText(): string {\n    return this.text;\n  }\n}\n","import Doc from '../model/Doc';\nimport DocumentTransformation from './DocumentTransformation';\nimport Assign from './documenttransformationsteps/Assign';\n\n/**\n * Transformer for applying transformations\n * on the document.\n */\nexport default class DocumentTransformer {\n  /**\n   * Applies a transformation on a document element.\n   * @param doc - Document element to apply transformation on.\n   * @param transformation - Transformation to apply.\n   */\n  apply(doc: Doc, transformation: DocumentTransformation) {\n    const steps = transformation.getSteps();\n    steps.forEach(step => {\n      if (step instanceof Assign) {\n        doc.getChildren()[0].getChildren()[0].setContent(step.getText());\n      } else {\n        throw new Error(`Unrecognized document transformation step: ${step.getType()}`);\n      }\n    });\n  }\n}\n","import Config from './Config'\nimport State from './state/State';\nimport Doc from './model/Doc';\nimport DocViewModel from './viewmodel/DocViewModel';\nimport DocView from './view/DocView';\nimport Cursor from './cursor/Cursor';\nimport CursorTransformation from './transform/CursorTransformation';\nimport DocumentTransformation from './transform/DocumentTransformation';\nimport Event from './event/Event';\nimport EventObserver from './event/EventObserver';\nimport CursorTransformer from './transform/CursorTransformer';\nimport DocumentTransformer from './transform/DocumentTransformer';\n\nexport default class TaleWeaver {\n  protected config: Config;\n  protected state: State;\n  protected editorCursor: Cursor | null;\n  protected doc: Doc;\n  protected docViewModel: DocViewModel;\n  protected docView: DocView;\n  protected cursorTransformer: CursorTransformer;\n  protected docTransformer: DocumentTransformer;\n  protected eventObservers: EventObserver[];\n\n  constructor(config: Config, state: State, editorCursor: Cursor | null) {\n    this.config = config;\n    this.state = state;\n    this.editorCursor = editorCursor;\n    this.doc = new Doc(this, this.state.getTokens());\n    this.docViewModel = new DocViewModel(this, this.doc);\n    this.docView = new DocView(\n      this,\n      this.docViewModel,\n      {\n        pageWidth: 800,\n        pageHeight: 1200,\n        pagePaddingTop: 60,\n        pagePaddingBottom: 60,\n        pagePaddingLeft: 60,\n        pagePaddingRight: 60,\n      },\n    );\n    this.cursorTransformer = new CursorTransformer();\n    this.docTransformer = new DocumentTransformer();\n    this.eventObservers = config.getEventObserverClasses().map(SomeEventObserver => {\n      return new SomeEventObserver(this);\n    });\n  }\n\n  getConfig(): Config {\n    return this.config;\n  }\n\n  getState(): State {\n    return this.state;\n  }\n\n  getDoc(): Doc {\n    return this.doc;\n  }\n\n  getDocView(): DocView {\n    return this.docView;\n  }\n\n  getEditorCursor(): Cursor | null {\n    return this.editorCursor;\n  }\n\n  mount(domWrapper: HTMLElement) {\n    this.docView.mount(domWrapper);\n  }\n\n  /**\n   * Dispatches an event to the event observers.\n   * @param event - Event to dispatch.\n   */\n  dispatchEvent(event: Event) {\n    this.eventObservers.forEach(eventObserver => {\n      eventObserver.onEvent(event);\n    });\n  }\n\n  /**\n   * Applies a transformation on the editor cursor.\n   * @param transformation - Cursor transformation to apply.\n   */\n  applyEditorCursorTransformation(transformation: CursorTransformation) {\n    if (!this.editorCursor) {\n      throw new Error('No editor cursor available to apply transformation.');\n    }\n    this.cursorTransformer.apply(this.editorCursor, transformation);\n    const { domDocumentContent } = this.docView.getDOM();\n  }\n\n  applyDocumentTransformation(transformation: DocumentTransformation) {\n    if (!this.doc) {\n      throw new Error('No document available to apply transformation.');\n    }\n    this.docTransformer.apply(this.doc, transformation);\n  }\n}\n","import Token from './Token';\n\nclass State {\n  protected tokens: Token[];\n\n  constructor(tokens: Token[]) {\n    this.tokens = tokens;\n  }\n\n  getTokens(): Token[] {\n    return this.tokens;\n  }\n}\n\nexport default State;\n","interface Attributes {\n  [key: string]: any;\n}\n\nclass InlineStartToken {\n  private type: string;\n  private attributes: Attributes;\n\n  constructor(type: string, attributes: Attributes) {\n    this.type = type;\n    this.attributes = attributes;\n  }\n\n  getType(): string {\n    return this.type;\n  }\n\n  getAttributes(): Attributes {\n    return this.attributes;\n  }\n}\n\nexport default InlineStartToken;\n","class InlineEndToken {}\n\nexport default InlineEndToken;\n","import State from '../State';\nimport DocStartToken from '../DocStartToken';\nimport DocEndToken from '../DocEndToken';\nimport BlockStartToken from '../BlockStartToken';\nimport BlockEndToken from '../BlockEndToken';\nimport InlineStartToken from '../InlineStartToken';\nimport InlineEndToken from '../InlineEndToken';\n\nclass Serializer {\n  serialize(state: State): string {\n    const tokens = state.getTokens();\n    return tokens.map(token => {\n      if (token instanceof DocStartToken) {\n        const docStartToken = token as DocStartToken;\n        return `<Doc ${JSON.stringify(docStartToken.getAttributes())}>`;\n      }\n      if (token instanceof DocEndToken) {\n        return '</Doc>';\n      }\n      if (token instanceof BlockStartToken) {\n        const blockStartToken = token as BlockStartToken;\n        return `<Block.${blockStartToken.getType()} ${JSON.stringify(token.getAttributes())}>`;\n      }\n      if (token instanceof BlockEndToken) {\n        return '</Block>';\n      }\n      if (token instanceof InlineStartToken) {\n        const inilneStartToken = token as InlineStartToken;\n        return `<Inline.${inilneStartToken.getType()} ${JSON.stringify(token.getAttributes())}>`;\n      }\n      if (token instanceof InlineEndToken) {\n        return '</Inline>';\n      }\n      if (token === '\\n') {\n        return '\\\\n';\n      }\n      return token;\n    }).join('\\n');\n  }\n\n  parse(serializedTokens: string): State {\n    const tokens = serializedTokens.split('\\n').map(serializedToken => {\n      const docStartTokenRegex = /^<Doc\\s(.+)>/;\n      if (docStartTokenRegex.test(serializedToken)) {\n        const result = serializedToken.match(docStartTokenRegex)!;\n        const attributes = JSON.parse(result[1]);\n        return new DocStartToken(attributes);\n      }\n      if (serializedToken === '</Doc>') {\n        return new DocEndToken();\n      }\n      const blockStartTokenRegex = /^<Block\\.(\\w+)\\s(.+)>/;\n      if (blockStartTokenRegex.test(serializedToken)) {\n        const result = serializedToken.match(blockStartTokenRegex)!;\n        const type = result[1];\n        const attributes = JSON.parse(result[2]);\n        return new BlockStartToken(type, attributes);\n      }\n      if (serializedToken === '</Block>') {\n        return new BlockEndToken();\n      }\n      const inlineStartTokenRegex = /^<Inline\\.(\\w+)\\s(.+)>/;\n      if (inlineStartTokenRegex.test(serializedToken)) {\n        const result = serializedToken.match(inlineStartTokenRegex)!;\n        const type = result[1];\n        const attributes = JSON.parse(result[2]);\n        return new InlineStartToken(type, attributes);\n      }\n      if (serializedToken === '</Inline>') {\n        return new InlineEndToken();\n      }\n      if (serializedToken.length === 1) {\n        return serializedToken;\n      }\n      if (serializedToken === '\\\\n') {\n        return '\\n';\n      }\n      throw new Error(`Cannot parse serialized token: ${serializedToken}`);\n    });\n    const state = new State(tokens);\n    return state;\n  }\n}\n\nexport default Serializer;\n","import Block from './Block';\n\nclass Paragraph extends Block {\n  static getType(): string {\n    return 'Paragraph';\n  }\n\n  getType(): string {\n    return Paragraph.getType();\n  }\n}\n\nexport default Paragraph;\n","import TaleWeaver from '../TaleWeaver';\nimport Node from '../tree/Node';\nimport BranchNode from '../tree/BranchNode';\nimport TreePosition from '../tree/TreePosition';\nimport Token from '../state/Token';\nimport BlockStartToken from '../state/BlockStartToken';\nimport BlockEndToken from '../state/BlockEndToken';\nimport InlineStartToken from '../state/InlineStartToken';\nimport InlineEndToken from '../state/InlineEndToken';\nimport Doc from './Doc';\nimport Inline from './Inline';\n\ntype Parent = Doc;\ntype Child = Inline;\n\ninterface Attributes {\n  [key: string]: any;\n}\n\nexport default abstract class Block extends BranchNode {\n  protected taleWeaver: TaleWeaver;\n  protected parent: Parent;\n  protected children: Child[];\n  protected attributes: Attributes;\n\n  constructor(taleWeaver: TaleWeaver, parent: Parent, tokens: Token[]) {\n    super();\n    this.taleWeaver = taleWeaver;\n    this.parent = parent;\n    this.children = [];\n    if (!(tokens[0] instanceof BlockStartToken)) {\n      throw new Error(`Error building block from tokens, expecting first token to be BlockStartToken.`);\n    }\n    if (!(tokens[tokens.length - 1] instanceof BlockEndToken)) {\n      throw new Error(`Error building block from tokens, expecting last token to be BlockEndToken.`);\n    }\n    const startToken = tokens[0] as BlockStartToken;\n    this.attributes = startToken.getAttributes();\n    let childStartOffset = 1;\n    let depth = 0;\n    for (let n = 1, nn = tokens.length - 1; n < nn; n++) {\n      const token = tokens[n];\n      if (token instanceof InlineStartToken) {\n        if (depth === 0) {\n          childStartOffset = n;\n        }\n        depth += 1;\n      } else if (token instanceof InlineEndToken) {\n        depth -= 1;\n      }\n      if (depth === 0) {\n        const childTokens = tokens.slice(childStartOffset, n + 1);\n        const inlineStartToken = tokens[childStartOffset] as InlineStartToken;\n        const InlineClass = taleWeaver.getConfig().getInlineClass(inlineStartToken.getType());\n        const inline = new InlineClass(taleWeaver, this, childTokens);\n        this.appendChild(inline);\n      }\n    }\n  }\n\n  getSize(): number {\n    let size = 0;\n    this.children.forEach(child => {\n      size += child.getSize();\n    });\n    return size;\n  }\n\n  getParent(): Parent {\n    return this.parent;\n  }\n\n  getPreviousSibling(): Node | null {\n    const siblings = this.parent.getChildren();\n    let index = siblings.indexOf(this);\n    if (index < 0) {\n      throw new Error(`Model is corrupted, block not found in parent.`);\n    }\n    if (index === 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  getNextSibling(): Node | null {\n    const siblings = this.parent.getChildren();\n    let index = siblings.indexOf(this);\n    if (index < 0) {\n      throw new Error(`Model is corrupted, block not found in parent.`);\n    }\n    if (index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n  \n  appendChild(child: Child) {\n    this.children.push(child);\n  }\n\n  removeChild(child: Child) {\n    const index = this.children.indexOf(child);\n    if (index < 0) {\n      return;\n    }\n    this.children.splice(index, 1);\n  }\n\n  getChildren(): Child[] {\n    return this.children;\n  }\n\n  parentAt(offset: number): TreePosition {\n    if (offset < 0) {\n      throw new Error(`Block offset out of range: ${offset}.`);\n    }\n    if (offset > this.getSize() - 1) {\n      throw new Error(`Block offset out of range: ${offset}.`);\n    }\n    const parent = this.parent;\n    const siblings = parent.getChildren();\n    let cumulatedParentOffset = 1;\n    for (let n = 0, nn = siblings.length; n < nn; n++) {\n      const sibling = siblings[n];\n      if (sibling === this) {\n        return new TreePosition(parent, cumulatedParentOffset + offset);\n      }\n      cumulatedParentOffset += sibling.getSize();\n    }\n    throw new Error(`Model is corrupted, block not found in parent.`);\n  }\n\n  childAt(offset: number): TreePosition {\n    if (offset < 0) {\n      throw new Error(`Block offset out of range: ${offset}.`);\n    }\n    let cumulatedOffset = 0;\n    for (let n = 0, nn = this.children.length; n < nn; n++) {\n      const child = this.children[n];\n      const childSize = child.getSize();\n      if (offset < cumulatedOffset + childSize) {\n        return new TreePosition(child, offset - cumulatedOffset);\n      }\n      cumulatedOffset += childSize;\n    }\n    throw new Error(`Block offset out of range: ${offset}.`);\n  }\n}\n","import Inline from './Inline';\n\nclass Text extends Inline {\n  static getType(): string {\n    return 'Text';\n  }\n\n  getType(): string {\n    return Text.getType();\n  }\n}\n\nexport default Text;\n","import TaleWeaver from '../TaleWeaver';\nimport Node from '../tree/Node';\nimport LeafNode from '../tree/LeafNode';\nimport TreePosition from '../tree/TreePosition';\nimport Token from '../state/Token';\nimport InlineStartToken from '../state/InlineStartToken';\nimport InlineEndToken from '../state/InlineEndToken';\nimport Block from './Block';\n\ntype Parent = Block;\n\ninterface Attributes {\n  [key: string]: any;\n}\n\nexport default abstract class Inline extends LeafNode {\n  static fromTokens(taleWeaver: TaleWeaver, block: Block, tokens: Token[]): Inline {\n    if (!(tokens[0] instanceof InlineStartToken)) {\n      throw new Error(`Error building block from tokens, expecting first token to be InlineStartToken.`);\n    }\n    if (!(tokens[tokens.length - 1] instanceof InlineEndToken)) {\n      throw new Error(`Error building block from tokens, expecting last token to be InlineEndToken.`);\n    }\n    const startToken = tokens[0] as InlineStartToken;\n    const InlineClass = taleWeaver.getConfig().getInlineClass(startToken.getType());\n    const inline = new InlineClass(block, tokens.slice(1, tokens.length - 1).join(''), startToken.getAttributes());\n    return inline;\n  }\n\n  protected taleWeaver: TaleWeaver;\n  protected parent: Parent;\n  protected attributes: Attributes;\n  protected content: string;\n\n  constructor(taleWeaver: TaleWeaver, parent: Parent, tokens: Token[]) {\n    super();\n    this.taleWeaver = taleWeaver;\n    this.parent = parent;\n    if (!(tokens[0] instanceof InlineStartToken)) {\n      throw new Error(`Error building inline from tokens, expecting first token to be InlineStartToken.`);\n    }\n    if (!(tokens[tokens.length - 1] instanceof InlineEndToken)) {\n      throw new Error(`Error building inline from tokens, expecting last token to be InlineEndToken.`);\n    }\n    const startToken = tokens[0] as InlineStartToken;\n    this.attributes = startToken.getAttributes();\n    this.content = tokens.slice(1, tokens.length - 1).join('');\n  }\n\n  getSize(): number {\n    return this.content.length;\n  }\n\n  getParent(): Parent {\n    return this.parent;\n  }\n\n  getPreviousSibling(): Node | null {\n    const siblings = this.parent.getChildren();\n    let index = siblings.indexOf(this);\n    if (index < 0) {\n      throw new Error(`Model is corrupted, block not found in parent.`);\n    }\n    if (index === 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  getNextSibling(): Node | null {\n    const siblings = this.parent.getChildren();\n    let index = siblings.indexOf(this);\n    if (index < 0) {\n      throw new Error(`Model is corrupted, block not found in parent.`);\n    }\n    if (index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  parentAt(offset: number): TreePosition {\n    if (offset < 0) {\n      throw new Error(`Inline offset out of range: ${offset}.`);\n    }\n    if (offset > this.getSize() - 1) {\n      throw new Error(`Inline offset out of range: ${offset}.`);\n    }\n    const parent = this.parent;\n    const siblings = parent.getChildren();\n    let cumulatedParentOffset = 1;\n    for (let n = 0, nn = siblings.length; n < nn; n++) {\n      const sibling = siblings[n];\n      if (sibling === this) {\n        return new TreePosition(parent, cumulatedParentOffset + offset);\n      }\n      cumulatedParentOffset += sibling.getSize();\n    }\n    throw new Error(`Model is corrupted, inline not found in parent.`);\n  }\n\n  setContent(content: string) {\n    this.content = content;\n  }\n\n  getContent(): string {\n    return this.content;\n  }\n}\n","import TaleWeaver from '../TaleWeaver';\nimport Text from '../model/Text';\nimport BlockViewModel from './BlockViewModel';\nimport WordViewModel, { Parent, Segment } from './WordViewModel';\n\nconst WORD_DELIMITERS = [\n  ' ',\n  '\\t',\n  '\\n',\n];\n\nclass TextViewModel extends WordViewModel {\n  static getType(): string {\n    return 'Text';\n  }\n\n  static fromInline(taleWeaver: TaleWeaver, inline: Text, parent: Parent): TextViewModel[] {\n    const content = inline.getContent();\n    let wordStartOffset = 0;\n    let offset = 0;\n    const textViewModels: TextViewModel[] = [];\n    for (let contentLength = content.length; offset < contentLength; offset++) {\n      const char = content[offset];\n      if (WORD_DELIMITERS.indexOf(char) >= 0) {\n        textViewModels.push(new TextViewModel(taleWeaver, [\n          {\n            inline,\n            from: wordStartOffset,\n            to: offset,\n          },\n        ], parent));\n        wordStartOffset = offset + 1;\n      }\n    }\n    if (wordStartOffset < offset - 1) {\n      textViewModels.push(new TextViewModel(taleWeaver, [\n        {\n          inline,\n          from: wordStartOffset,\n          to: offset - 1,\n        },\n      ], parent));\n    }\n    return textViewModels;\n  }\n\n  static postProcess(taleWeaver: TaleWeaver, wordViewModels: WordViewModel[], parent: Parent): WordViewModel[] {\n    const mergedWordViewModels: WordViewModel[] = [];\n    let chainedSegments: Segment[] = [];\n    wordViewModels.forEach(wordViewModel => {\n      if (!(wordViewModel instanceof TextViewModel)) {\n        if (chainedSegments.length > 0) {\n          mergedWordViewModels.push(new TextViewModel(taleWeaver, chainedSegments, parent));\n          chainedSegments = [];\n        }\n        mergedWordViewModels.push(wordViewModel);\n        return;\n      }\n      const textViewModel = wordViewModel as TextViewModel;\n      const segments = textViewModel.getSegments();\n      const lastSegment = segments[segments.length - 1];\n      const inlineContent = lastSegment.inline.getContent();\n      if (WORD_DELIMITERS.indexOf(inlineContent[lastSegment.to]) >= 0) {\n        if (chainedSegments.length > 0) {\n          mergedWordViewModels.push(new TextViewModel(taleWeaver, [...chainedSegments, ...wordViewModel.getSegments()], parent));\n          chainedSegments = [];\n        } else {\n          mergedWordViewModels.push(wordViewModel);\n        }\n      } else {\n        chainedSegments.push(...segments);\n      }\n    });\n    if (chainedSegments.length > 0) {\n      mergedWordViewModels.push(new TextViewModel(taleWeaver, chainedSegments, parent));\n    }\n    return mergedWordViewModels;\n  }\n\n  getType(): string {\n    return TextViewModel.getType();\n  }\n\n  getSize(): number {\n    let size = 0;\n    this.segments.forEach(segment => {\n      size += segment.to - segment.from + 1;\n    });\n    return size;\n  }\n}\n\nexport default TextViewModel;\n","import TaleWeaver from '../TaleWeaver';\nimport Node from '../tree/Node';\nimport LeafNode from '../tree/LeafNode';\nimport TreePosition from '../tree/TreePosition';\nimport Inline from '../model/Inline';\nimport BlockViewModel from './BlockViewModel';\n\nexport type Parent = BlockViewModel;\n\nexport interface Segment {\n  inline: Inline;\n  from: number;\n  to: number;\n}\n\nabstract class WordViewModel extends LeafNode {\n  protected taleWeaver: TaleWeaver;\n  protected segments: Segment[];\n  protected parent: Parent;\n\n  constructor(taleWeaver: TaleWeaver, segments: Segment[], parent: Parent) {\n    super();\n    this.taleWeaver = taleWeaver;\n    this.segments = segments;\n    this.parent = parent;\n  }\n\n  abstract getType(): string;\n\n  abstract getSize(): number;\n\n  getParent(): Parent {\n    return this.parent;\n  }\n\n  getPreviousSibling(): Node | null {\n    const siblings = this.parent.getChildren();\n    let index = siblings.indexOf(this);\n    if (index < 0) {\n      throw new Error(`Model is corrupted, block not found in parent.`);\n    }\n    if (index === 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  getNextSibling(): Node | null {\n    const siblings = this.parent.getChildren();\n    let index = siblings.indexOf(this);\n    if (index < 0) {\n      throw new Error(`Model is corrupted, block not found in parent.`);\n    }\n    if (index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  parentAt(offset: number): TreePosition {\n    if (offset < 0) {\n      throw new Error(`Word view offset out of range: ${offset}.`);\n    }\n    if (offset > this.getSize() - 1) {\n      throw new Error(`Word view offset out of range: ${offset}.`);\n    }\n    const parent = this.parent;\n    const siblings = parent.getChildren();\n    let cumulatedParentOffset = 1;\n    for (let n = 0, nn = siblings.length; n < nn; n++) {\n      const sibling = siblings[n];\n      if (sibling === this) {\n        return new TreePosition(parent, cumulatedParentOffset + offset);\n      }\n      cumulatedParentOffset += sibling.getSize();\n    }\n    throw new Error(`View model is corrupted, word view not found in parent.`);\n  }\n\n  getSegments(): Segment[] {\n    return this.segments;\n  }\n}\n\nexport default WordViewModel;\n","import LineView, { LineViewDOMElements, LineViewConfig } from './LineView';\n\nexport default class ParagraphLineView extends LineView {\n  private domParagraphLine?: HTMLDivElement;\n  private mounted: boolean;\n\n  constructor(config: LineViewConfig) {\n    super(config);\n    this.mounted = false;\n  }\n\n  mount() {\n    if (this.mounted) {\n      return;\n    }\n    // Get wrapper element\n    const { domPageContent } = this.getPageView().getDOM();\n\n    // Build line element\n    this.domParagraphLine = document.createElement('div');\n    this.domParagraphLine.className = 'tw--paragraph-line';\n    domPageContent.appendChild(this.domParagraphLine);\n\n    // Mount word views\n    this.wordViews.forEach(wordView => wordView.mount());\n  }\n\n  getDOM(): LineViewDOMElements {\n    return {\n      domLine: this.domParagraphLine!,\n      domLineContent: this.domParagraphLine!,\n    };\n  }\n}\n","import PageView from './PageView';\nimport WordView, { WordViewAwarePosition } from './WordView';\n\n/**\n * Line view configs.\n */\nexport interface LineViewConfig {\n  width: number;\n}\n\nexport interface LineViewDOMElements {\n  domLine: HTMLElement;\n  domLineContent: HTMLElement;\n}\n\n/**\n * Describes a screen selection within a line view.\n */\nexport interface LineViewPositionBox {\n  x1: number;\n  x2: number;\n  height: number;\n}\n\nexport interface LineViewAwarePosition extends WordViewAwarePosition {\n  lineView: LineView;\n  lineViewPosition: number;\n};\n\n/**\n * Abstract class for line views.\n */\nexport default abstract class LineView {\n  /** Config for the line view. */\n  protected config: LineViewConfig;\n  /** Parent page view. */\n  protected pageView?: PageView;\n  /** Child word views. */\n  protected wordViews: WordView[];\n\n  /**\n   * Creates a new line view instance.\n   * @param config - Config for the line view.\n   */\n  constructor(config: LineViewConfig) {\n    this.config = config;\n    this.wordViews = [];\n  }\n\n  /**\n   * Gets the size of the line in the document.\n   */\n  getSize(): number {\n    let size = 0;\n    this.wordViews!.forEach(wordView => size += wordView.getSize());\n    return size;\n  }\n\n  /**\n   * Sets the parent page view.\n   * @param pageView - Parent page view.\n   */\n  setPageView(pageView: PageView) {\n    this.pageView = pageView;\n  }\n\n  /**\n   * Gets the parent page view.\n   */\n  getPageView(): PageView {\n    return this.pageView!;\n  }\n\n  /**\n   * Gets the previous line view in the parent page view.\n   */\n  getPreviousLineView(): LineView | null {\n    const lineViews = this.pageView!.getLineViews();\n    const index = lineViews.indexOf(this);\n\n    // Short circuit if line view is not found in the parent\n    // page view\n    if (index < 0) {\n      return null;\n    }\n\n    // If this is the first line of the page, try to move\n    // to last line of previous page\n    if (index === 0) {\n      const previousPageView = this.pageView!.getPreviousPageView();\n      if (!previousPageView) {\n        return null;\n      }\n      const previousPageLineViews = previousPageView.getLineViews();\n      return previousPageLineViews[previousPageLineViews.length - 1];\n    }\n    return lineViews[index - 1];\n  }\n\n  /**\n   * Gets the next line view in the parent page view.\n   */\n  getNextLineView(): LineView | null {\n    const lineViews = this.pageView!.getLineViews();\n    const index = lineViews.indexOf(this);\n\n    // Short circuit if line view is not found in the parent\n    // page view\n    if (index < 0) {\n      return null;\n    }\n\n    // If this is the last line of the page, try to move\n    // to first line of next page\n    if (index === lineViews.length - 1) {\n      const nextPageView = this.pageView!.getNextPageView();\n      if (!nextPageView) {\n        return null;\n      }\n      const nextPageLineViews = nextPageView.getLineViews();\n      return nextPageLineViews[0];\n    }\n    return lineViews[index + 1];\n  }\n\n  /**\n   * Appends a child word view.\n   * @param wordView - Child word view to append.\n   */\n  appendWordView(wordView: WordView) {\n    this.wordViews.push(wordView);\n  }\n\n  /**\n   * Removes a child word view.\n   * @param wordView - Child word view to remove.\n   */\n  removeWordView(wordView: WordView) {\n    const index = this.wordViews.indexOf(wordView);\n    if (index < 0) {\n      return;\n    }\n    this.wordViews.splice(index, 1);\n  }\n\n  /**\n   * Gets the child word views.\n   */\n  getWordViews(): WordView[] {\n    return this.wordViews;\n  }\n\n  /**\n   * Mounts the view to DOM.\n   */\n  abstract mount(): void;\n\n  /**\n   * Gets DOM elements mounted by the view.\n   */\n  abstract getDOM(): LineViewDOMElements;\n\n  /**\n   * Gets the height of the view.\n   */\n  getHeight(): number {\n    return Math.max(...this.wordViews.map(wordView => wordView.getHeight()));\n  }\n\n  /**\n   * Maps a model position range to view position boxes.\n   * @param from - Left-bound of the model position range.\n   * @param to - Right-bound of the model position range.\n   */\n  mapModelPositionRangeToViewPositionBox(from: number, to: number): LineViewPositionBox {\n    // Iterate through words to break up model position range\n    const viewPositionBox: LineViewPositionBox = {\n      x1: -1,\n      x2: -1,\n      height: 0,\n    };\n    let offset = 0;\n    let cumulatedWidth = 0;\n    for (let n = 0, nn = this.wordViews.length; n < nn; n++) {\n      const wordView = this.wordViews[n];\n      // If overlap between position range and word\n      if (to >= offset && from < offset + wordView.getSize()) {\n        const wordViewPositionBox = wordView.mapModelPositionRangeToViewPositionBox(\n          Math.max(0, from - offset),\n          Math.min(wordView.getSize(), to - offset),\n        );\n        if (offset <= from && offset + wordView.getSize() > from) {\n          viewPositionBox.x1 = cumulatedWidth + wordViewPositionBox.x1;\n        }\n        if (offset <= to && offset + wordView.getSize() >= to) {\n          viewPositionBox.x2 = cumulatedWidth + wordViewPositionBox.x2;\n        }\n        if (viewPositionBox.height < wordViewPositionBox.height) {\n          viewPositionBox.height = wordViewPositionBox.height;\n        }\n      }\n      offset += wordView.getSize();\n      cumulatedWidth += wordView.getWidth();\n    }\n    return viewPositionBox;\n  }\n\n  /**\n   * Maps a view position to model position.\n   * @param x - X-coordinate of the view position.\n   */\n  mapViewPositionToModelPosition(x: number): number {\n    // Iterate through words until the word that contains the view position\n    // is found\n    let offset = 0;\n    let cumulatedWidth = 0;\n    for (let n = 0, nn = this.wordViews.length; n < nn; n++) {\n      const wordView = this.wordViews[n];\n      // If posterior of word is past X-coordinate\n      if (cumulatedWidth + wordView.getWidth() >= x) {\n        // Get model position in word\n        const wordModelPosition = wordView.mapViewPositionToModelPosition(x - cumulatedWidth);\n        // Map word model position to line model position\n        offset += wordModelPosition;\n        break;\n      }\n      offset += wordView.getSize();\n      cumulatedWidth += wordView.getWidth();\n    }\n    if (offset >= this.getSize()) {\n      offset -= 1;\n    }\n    return offset;\n  }\n\n  /**\n   * Resolves a flat model position to a view-aware position\n   * object.\n   * @param position - Flat model position to resolve.\n   */\n  resolveModelPosition(position: number): LineViewAwarePosition {\n    // Iterate through words until the word that contains the view position\n    // is found\n    let offset = 0;\n    for (let n = 0, nn = this.wordViews.length; n < nn; n++) {\n      const wordView = this.wordViews[n];\n      // If posterior of word is past position\n      if (offset + wordView.getSize() >= position) {\n        // Resolve model position in word\n        const wordViewAwarePosition = wordView.resolveModelPosition(position - offset);\n        // Map word view aware position to line view aware position\n        return {\n          ...wordViewAwarePosition,\n          lineView: this,\n          lineViewPosition: position,\n        };\n      }\n      offset += wordView.getSize();\n    }\n    throw new Error(`Cannot resolve line model position ${position}.`);\n  }\n}\n","import LineView from './LineView';\nimport WordViewModel from '../viewmodel/WordViewModel';\n\n/**\n * Word view config.\n */\nexport interface WordViewConfig {\n}\n\nexport interface WordViewDOMElements {\n  domWord: HTMLElement | Text;\n  domWordContent: HTMLElement | Text;\n}\n\n/**\n * Describes a screen selection within a word view.\n */\nexport interface WordViewPositionBox {\n  x1: number;\n  x2: number;\n  height: number;\n}\n\nexport interface WordViewAwarePosition {\n  wordView: WordView;\n  wordViewPosition: number;\n};\n\n/**\n * Abstract class for word views.\n */\nexport default abstract class WordView {\n  /** Config for the word view. */\n  protected config: WordViewConfig;\n  /** Word view model. */\n  protected wordViewModel: WordViewModel;\n  /** Parent line view. */\n  protected lineView?: LineView;\n  /** Rendered DOM element. */\n  protected domElement?: HTMLElement | Text;\n\n  /**\n   * Creates a new work view instance.\n   * @param wordViewModel - Word view model.\n   * @param config - Config for the word view.\n   */\n  constructor(wordViewModel: WordViewModel, config: WordViewConfig) {\n    this.wordViewModel = wordViewModel;\n    this.config = config;\n  }\n\n  /**\n   * Gets the size of the word in the document.\n   */\n  getSize(): number {\n    return this.wordViewModel.getSize();\n  }\n\n  /**\n   * Sets the parent line view.\n   * @param lineView - Parent line view.\n   */\n  setLineView(lineView: LineView) {\n    this.lineView = lineView;\n  }\n\n  /**\n   * Gets the parent line view.\n   */\n  getLineView(): LineView {\n    return this.lineView!;\n  }\n\n  /**\n   * Gets the previous word view in the parent line view.\n   */\n  getPreviousWordView(): WordView | null {\n    const wordViews = this.lineView!.getWordViews();\n    const index = wordViews.indexOf(this);\n\n    // Short circuit if word view is not found in the parent\n    // line view\n    if (index < 0) {\n      return null;\n    }\n\n    // If this is the first word of the line, try to move\n    // to last word of previous line\n    if (index === 0) {\n      const previousLineView = this.lineView!.getPreviousLineView();\n      if (!previousLineView) {\n        return null;\n      }\n      const previousLineWordViews = previousLineView.getWordViews();\n      return previousLineWordViews[previousLineWordViews.length - 1];\n    }\n    return wordViews[index - 1];\n  }\n\n  /**\n   * Gets the next word view in the parent line view.\n   */\n  getNextWordView(): WordView | null {\n    const wordViews = this.lineView!.getWordViews();\n    const index = wordViews.indexOf(this);\n\n    // Short circuit if word view is not found in the parent\n    // line view\n    if (index < 0) {\n      return null;\n    }\n\n    // If this is the last word of the line, try to move\n    // to first word of next line\n    if (index === wordViews.length - 1) {\n      const nextLineView = this.lineView!.getNextLineView();\n      if (!nextLineView) {\n        return null;\n      }\n      const nextLineWordViews = nextLineView.getWordViews();\n      return nextLineWordViews[0];\n    }\n    return wordViews[index + 1];\n  }\n\n  /**\n   * Mounts the view to DOM.\n   */\n  abstract mount(): void;\n\n  /**\n   * Gets DOM elements mounted by the view.\n   */\n  abstract getDOM(): WordViewDOMElements;\n\n  /**\n   * Gets the width of the word view.\n   */\n  abstract getWidth(): number;\n\n  /**\n   * Gets the height of the word view.\n   */\n  abstract getHeight(): number;\n\n  /**\n   * Maps a model position range to view position boxes.\n   * @param from - Left-bound of the model position range.\n   * @param to - Right-bound of the model position range.\n   */\n  abstract mapModelPositionRangeToViewPositionBox(from: number, to: number): WordViewPositionBox;\n\n  /**\n   * Maps a view position to model position.\n   * @param x - X-coordinate of the view position.\n   */\n  abstract mapViewPositionToModelPosition(x: number): number;\n\n  /**\n   * Resolves a flat model position to a view-aware position\n   * object.\n   * @param position - Flat model position to resolve.\n   */\n  resolveModelPosition(position: number): WordViewAwarePosition {\n    return {\n      wordView: this,\n      wordViewPosition: position,\n    };\n  }\n}\n","import TextStyle from './TextStyle';\n\ntype Measurement = {\n  width: number;\n  height: number;\n};\n\nfunction getTextStyleKey(textStyle: TextStyle): string {\n  return JSON.stringify(textStyle);\n}\n\nexport class TextMeasurer {\n  private $iframe: HTMLIFrameElement;\n  private $textContainers: Map<string, HTMLSpanElement>;\n\n  constructor() {\n    this.$iframe = document.createElement('iframe');\n    this.$iframe.src = 'about:blank';\n    this.$iframe.style.width = '0';\n    this.$iframe.style.height = '0';\n    this.$iframe.style.border = 'none';\n    document.body.appendChild(this.$iframe);\n    this.$textContainers = new Map<string, HTMLSpanElement>();\n  }\n\n  getTextContainerElement(textStyle: TextStyle): HTMLSpanElement {\n    const textStyleKey = getTextStyleKey(textStyle);\n    if (!this.$textContainers.has(textStyleKey)) {\n      const $textContainer = document.createElement('span');\n      $textContainer.style.display = 'inline-block';\n      $textContainer.style.whiteSpace = 'pre';\n      $textContainer.style.fontFamily = textStyle.fontFamily;\n      $textContainer.style.fontSize = `${textStyle.fontSize}px`;\n      $textContainer.style.fontWeight = `${textStyle.fontWeight}`;\n      $textContainer.style.lineHeight = `${textStyle.lineHeight}px`;\n      $textContainer.style.letterSpacing = `${textStyle.letterSpacing}`;\n      this.$iframe.contentDocument!.body.appendChild($textContainer);\n      this.$textContainers.set(textStyleKey, $textContainer);\n    }\n    const $textContainer = this.$textContainers.get(textStyleKey);\n    return $textContainer!;\n  }\n\n  measure(text: string, textStyle: TextStyle) {\n    // Substitute trailing new line with space\n    const adjustedText = text.replace(/\\n$/, ' ');\n    const $textContainer = this.getTextContainerElement(textStyle);\n    if ($textContainer.innerHTML !== adjustedText) {\n      $textContainer.innerHTML = adjustedText;\n    }\n    const boundingClientRect = $textContainer.getBoundingClientRect();\n    return {\n      width: boundingClientRect.width,\n      height: boundingClientRect.height,\n    };\n  }\n}\n\nconst textMeasurer = new TextMeasurer();\n\nexport default function measureText(text: string, textStyle: TextStyle): Measurement {\n  return textMeasurer.measure(text, textStyle);\n}\n","import WordView, { WordViewConfig, WordViewPositionBox, WordViewDOMElements } from './WordView';\nimport measureText from './helpers/measureText';\nimport WordViewModel from '../viewmodel/WordViewModel';\nimport TextViewModel from '../viewmodel/TextViewModel';\n\nconst placeholderTextStyle = {\n  fontFamily: 'Arial',\n  fontSize: 18,\n  fontWeight: 400,\n  lineHeight: 36,\n  letterSpacing: 0,\n};\n\n/**\n * View for a text word.\n */\nexport default class TextView extends WordView {\n  /** Cached width of the rendered text word */\n  private width?: number;\n  /** Cached height of the rendered text word */\n  private height?: number;\n  /** Whether the view is mounted to DOM. */\n  private mounted: boolean;\n  /** DOM text node. */\n  private domTextWord?: Text;\n\n  constructor(wordViewModel: WordViewModel, config: WordViewConfig) {\n    super(wordViewModel, config);\n    this.mounted = false;\n  }\n\n  mount() {\n    if (this.mounted) {\n      return;\n    }\n    const { domLineContent } = this.getLineView().getDOM();\n    const textViewModel = <TextViewModel> this.wordViewModel;\n    let text = '';\n    textViewModel.getSegments().forEach(segment => {\n      text += segment.inline.getContent().substring(segment.from, segment.to + 1);\n    });\n    this.domTextWord = document.createTextNode(text);\n    domLineContent.appendChild(this.domTextWord);\n  }\n\n  getDOM(): WordViewDOMElements {\n    return {\n      domWord: this.domTextWord!,\n      domWordContent: this.domTextWord!,\n    };\n  }\n\n  getWidth(): number {\n    if (this.width === undefined) {\n      this.measure();\n    }\n    return this.width!;\n  }\n\n  getHeight(): number {\n    if (this.height === undefined) {\n      this.measure();\n    }\n    return this.height!;\n  }\n\n  mapModelPositionRangeToViewPositionBox(from: number, to: number): WordViewPositionBox {\n    return {\n      x1: this.getScreenX(from),\n      x2: this.getScreenX(to),\n      height: this.getHeight(),\n    };\n  }\n\n  mapViewPositionToModelPosition(x: number): number {\n    const textViewModel = <TextViewModel> this.wordViewModel;\n    let text = '';\n    textViewModel.getSegments().forEach(segment => {\n      text += segment.inline.getContent().substring(segment.from, segment.to + 1);\n    });\n    let lastWidth = 0;\n    for (let n = 1, nn = text.length; n < nn; n++) {\n      const width = measureText(text.substring(0, n), placeholderTextStyle).width;\n      if (width > x) {\n        if (x - lastWidth > width - x) {\n          return n;\n        }\n        return n - 1;\n      }\n      lastWidth = width;\n    }\n    const width = this.getWidth();\n    if (x - lastWidth > width - x) {\n      return text.length;\n    }\n    return text.length - 1;\n  }\n\n  /**\n   * Measures the dimensions of the rendered text word.\n   */\n  private measure() {\n    const textViewModel = <TextViewModel> this.wordViewModel;\n    let text = '';\n    textViewModel.getSegments().forEach(segment => {\n      text += segment.inline.getContent().substring(segment.from, segment.to + 1);\n    });\n    const measurement = measureText(text, placeholderTextStyle);\n    this.width = measurement.width;\n    this.height = measurement.height;\n  }\n\n  /**\n   * Gets screen x coordinate by document position.\n   * @param at - Document position within the text word.\n   */\n  private getScreenX(at: number): number {\n    const textViewModel = <TextViewModel> this.wordViewModel;\n    let text = '';\n    textViewModel.getSegments().forEach(segment => {\n      text += segment.inline.getContent().substring(segment.from, segment.to + 1);\n    });\n    if (at === 0) {\n      return 0;\n    }\n    return measureText(text.substring(0, at), placeholderTextStyle).width;\n  }\n}\n","import TaleWeaver from '../TaleWeaver';\nimport Event from './Event';\nimport CursorCommand from '../command/CursorCommand';\nimport DocumentCommand from '../command/DocumentCommand';\n\nexport default abstract class EventObserver {\n  protected taleWeaver: TaleWeaver;\n\n  constructor(taleWeaver: TaleWeaver) {\n    this.taleWeaver = taleWeaver;\n  }\n\n  dispatchCursorCommand(cursorCommand: CursorCommand) {\n    const cursorTransformation = cursorCommand(this.taleWeaver);\n    this.taleWeaver.applyEditorCursorTransformation(cursorTransformation);\n  }\n\n  dispatchDocumentCommand(documentCommand: DocumentCommand) {\n    const documentTransformation = documentCommand(this.taleWeaver);\n    this.taleWeaver.applyDocumentTransformation(documentTransformation);\n  }\n\n  abstract onEvent(event: Event): void;\n}\n","import EventObserver from './EventObserver';\nimport Event, { KeyPressEvent } from './Event';\nimport {\n  moveBackward,\n  moveForward,\n  moveBackwardByWord,\n  moveForwardByWord,\n  moveToLineStart,\n  moveToLineEnd,\n  moveToDocumentStart,\n  moveToDocumentEnd,\n  moveHeadBackward,\n  moveHeadForward,\n  moveHeadBackwardByWord,\n  moveHeadForwardByWord,\n  moveHeadToLineStart,\n  moveHeadToLineEnd,\n  moveHeadToDocumentStart,\n  moveHeadToDocumentEnd,\n  moveToPreviousLine,\n  moveToNextLine,\n  moveHeadToPreviousLine,\n  moveHeadToNextLine,\n} from '../command/cursor';\n\nexport default class EditorCursorEventObserver extends EventObserver {\n  onEvent(event: Event) {\n    if (event instanceof KeyPressEvent) {\n      const keyPressEvent = <KeyPressEvent> event;\n      if (keyPressEvent.key === 'ArrowLeft') {\n        if (keyPressEvent.shift) {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveHeadBackwardByWord());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveHeadToLineStart());\n          } else {\n            this.dispatchCursorCommand(moveHeadBackward());\n          }\n        } else {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveBackwardByWord());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveToLineStart());\n          } else {\n            this.dispatchCursorCommand(moveBackward());\n          }\n        }\n      } else if (keyPressEvent.key === 'ArrowRight') {\n        if (keyPressEvent.shift) {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveHeadForwardByWord());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveHeadToLineEnd());\n          } else {\n            this.dispatchCursorCommand(moveHeadForward());\n          }\n        } else {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveForwardByWord());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveToLineEnd());\n          } else {\n            this.dispatchCursorCommand(moveForward());\n          }\n        }\n      } else if (keyPressEvent.key === 'ArrowUp') {\n        if (keyPressEvent.shift) {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveHeadToLineStart());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveHeadToDocumentStart());\n          } else {\n            this.dispatchCursorCommand(moveHeadToPreviousLine());\n          }\n        } else {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveToLineStart());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveToDocumentStart());\n          } else {\n            this.dispatchCursorCommand(moveToPreviousLine());\n          }\n        }\n      } else if (keyPressEvent.key === 'ArrowDown') {\n        if (keyPressEvent.shift) {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveHeadToLineEnd());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveHeadToDocumentEnd());\n          } else {\n            this.dispatchCursorCommand(moveHeadToNextLine())\n          }\n        } else {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveToLineEnd());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveToDocumentEnd());\n          } else {\n            this.dispatchCursorCommand(moveToNextLine())\n          }\n        }\n      }\n    }\n  }\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursorHead from '../../transform/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadBackwardByWord(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const docView = taleWeaver.getDocView();\n    const viewAwarePosition = docView.resolveModelPosition(head);\n    if (viewAwarePosition.wordViewPosition > 0) {\n      transformation.addStep(new TranslateCursorHead(0 - viewAwarePosition.wordViewPosition));\n    } else {\n      const previousWordView = viewAwarePosition.wordView.getPreviousWordView();\n      if (previousWordView) {\n        transformation.addStep(new TranslateCursorHead(0 - previousWordView.getSize()));\n      }\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursorHead from '../../transform/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadBackward(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    if (editorCursor.getHead() < 1) {\n      return transformation;\n    }\n    transformation.addStep(new TranslateCursorHead(-1));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursor from '../../transform/cursortransformationsteps/TranslateCursor';\n\nexport default function moveBackwardByWord(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const docView = taleWeaver.getDocView();\n    const viewAwarePosition = docView.resolveModelPosition(head);\n    if (viewAwarePosition.wordViewPosition > 0) {\n      transformation.addStep(new TranslateCursor(0 - viewAwarePosition.wordViewPosition));\n    } else {\n      const previousWordView = viewAwarePosition.wordView.getPreviousWordView();\n      if (previousWordView) {\n        transformation.addStep(new TranslateCursor(0 - previousWordView.getSize()));\n      }\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursor from '../../transform/cursortransformationsteps/TranslateCursor';\n\nexport default function moveBackward(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const anchor = editorCursor.getAnchor();\n    const head = editorCursor.getHead();\n    if (anchor === head) {\n      if (head < 1) {\n        return transformation;\n      }\n      transformation.addStep(new TranslateCursor(-1));\n    } else {\n      if (anchor < head) {\n        transformation.addStep(new TranslateCursor(anchor - head));\n      } else if (anchor > head) {\n        transformation.addStep(new TranslateCursor(0));\n      }\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursorHead from '../../transform/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadForwardByWord(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const docView = taleWeaver.getDocView();\n    const viewAwarePosition = docView.resolveModelPosition(head);\n    if (viewAwarePosition.wordViewPosition < viewAwarePosition.wordView.getSize()) {\n      transformation.addStep(new TranslateCursorHead(viewAwarePosition.wordView.getSize() - viewAwarePosition.wordViewPosition));\n    } else {\n      const nextWordView = viewAwarePosition.wordView.getNextWordView();\n      if (nextWordView) {\n        transformation.addStep(new TranslateCursorHead(nextWordView.getSize()));\n      }\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursorHead from '../../transform/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadForward(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    if (editorCursor.getHead() >= taleWeaver.getDoc().getSize() - 1) {\n      return transformation;\n    }\n    transformation.addStep(new TranslateCursorHead(1));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursor from '../../transform/cursortransformationsteps/TranslateCursor';\n\nexport default function moveForwardByWord(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const docView = taleWeaver.getDocView();\n    const viewAwarePosition = docView.resolveModelPosition(head);\n    if (viewAwarePosition.wordViewPosition < viewAwarePosition.wordView.getSize()) {\n      transformation.addStep(new TranslateCursor(viewAwarePosition.wordView.getSize() - viewAwarePosition.wordViewPosition));\n    } else {\n      const nextWordView = viewAwarePosition.wordView.getNextWordView();\n      if (nextWordView) {\n        transformation.addStep(new TranslateCursor(nextWordView.getSize()));\n      }\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursor from '../../transform/cursortransformationsteps/TranslateCursor';\n\nexport default function moveForward(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const anchor = editorCursor.getAnchor();\n    const head = editorCursor.getHead();\n    if (anchor === head) {\n      const documentSize = taleWeaver.getDoc().getSize();\n      if (head >= documentSize - 1) {\n        return transformation;\n      }\n      transformation.addStep(new TranslateCursor(1));\n    } else {\n      if (anchor < head) {\n        transformation.addStep(new TranslateCursor(0));\n      } else if (anchor > head) {\n        transformation.addStep(new TranslateCursor(anchor - head));\n      }\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursorHead from '../../transform/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadToDocumentStart(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    transformation.addStep(new TranslateCursorHead(0 - head));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursorHead from '../../transform/cursortransformationsteps/TranslateCursorHead';\nimport moveHeadToLineStart from './moveHeadToLineStart';\n\nexport default function moveHeadToPreviousLine(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const docView = taleWeaver.getDocView();\n    const viewAwarePosition = docView.resolveModelPosition(head);\n    const previousLineView = viewAwarePosition.lineView.getPreviousLineView();\n    if (!previousLineView) {\n      return moveHeadToLineStart()(taleWeaver);\n    }\n    const editorCursorView = docView.getEditorCursorView();\n    if (!editorCursorView) {\n      return transformation;\n    }\n    let lineViewX: number;\n    if (editorCursorView.getLineViewX() !== null) {\n      lineViewX = editorCursorView.getLineViewX()!;\n    } else {\n      lineViewX = viewAwarePosition.lineView.mapModelPositionRangeToViewPositionBox(\n        viewAwarePosition.lineViewPosition,\n        viewAwarePosition.lineViewPosition,\n      ).x1;\n    }\n    const previousLinePosition = previousLineView.mapViewPositionToModelPosition(lineViewX);\n    transformation.addStep(new TranslateCursorHead(0 - viewAwarePosition.lineViewPosition - previousLineView.getSize() + previousLinePosition, true));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursor from '../../transform/cursortransformationsteps/TranslateCursor';\n\nexport default function moveToDocumentStart(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    transformation.addStep(new TranslateCursor(0 - head));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursor from '../../transform/cursortransformationsteps/TranslateCursor';\nimport moveToLineStart from './moveToLineStart';\n\nexport default function moveToPreviousLine(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const position = Math.min(editorCursor.getHead(), editorCursor.getAnchor());\n    const docView = taleWeaver.getDocView();\n    const viewAwarePosition = docView.resolveModelPosition(position);\n    const previousLineView = viewAwarePosition.lineView.getPreviousLineView();\n    if (!previousLineView) {\n      return moveToLineStart()(taleWeaver);\n    }\n    const editorCursorView = docView.getEditorCursorView();\n    if (!editorCursorView) {\n      return transformation;\n    }\n    let lineViewX: number;\n    if (editorCursorView.getLineViewX() !== null) {\n      lineViewX = editorCursorView.getLineViewX()!;\n    } else {\n      lineViewX = viewAwarePosition.lineView.mapModelPositionRangeToViewPositionBox(\n        viewAwarePosition.lineViewPosition,\n        viewAwarePosition.lineViewPosition,\n      ).x1;\n    }\n    const previousLinePosition = previousLineView.mapViewPositionToModelPosition(lineViewX);\n    transformation.addStep(new TranslateCursor(0 - viewAwarePosition.lineViewPosition - previousLineView.getSize() + previousLinePosition, true));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursorHead from '../../transform/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadToDocumentEnd(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentSize = taleWeaver.getDoc().getSize();\n    transformation.addStep(new TranslateCursorHead(documentSize - 1 - head));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursorHead from '../../transform/cursortransformationsteps/TranslateCursorHead';\nimport moveHeadToLineEnd from './moveHeadToLineEnd';\n\nexport default function moveHeadToNextLine(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const docView = taleWeaver.getDocView();\n    const viewAwarePosition = docView.resolveModelPosition(head);\n    const nextLineView = viewAwarePosition.lineView.getNextLineView();\n    if (!nextLineView) {\n      return moveHeadToLineEnd()(taleWeaver);\n    }\n    const editorCursorView = docView.getEditorCursorView();\n    if (!editorCursorView) {\n      return transformation;\n    }\n    let lineViewX: number;\n    if (editorCursorView.getLineViewX() !== null) {\n      lineViewX = editorCursorView.getLineViewX()!;\n    } else {\n      lineViewX = viewAwarePosition.lineView.mapModelPositionRangeToViewPositionBox(\n        viewAwarePosition.lineViewPosition,\n        viewAwarePosition.lineViewPosition,\n      ).x1;\n    }\n    const nextLinePosition = nextLineView.mapViewPositionToModelPosition(lineViewX);\n    transformation.addStep(new TranslateCursorHead(viewAwarePosition.lineView.getSize() - viewAwarePosition.lineViewPosition + nextLinePosition, true));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursor from '../../transform/cursortransformationsteps/TranslateCursor';\n\nexport default function moveToDocumentEnd(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentSize = taleWeaver.getDoc().getSize();\n    transformation.addStep(new TranslateCursor(documentSize - 1- head));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../transform/CursorTransformation';\nimport TranslateCursor from '../../transform/cursortransformationsteps/TranslateCursor';\nimport moveToLineEnd from './moveToLineEnd';\n\nexport default function moveToNextLine(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const position = Math.max(editorCursor.getHead(), editorCursor.getAnchor());\n    const docView = taleWeaver.getDocView();\n    const viewAwarePosition = docView.resolveModelPosition(position);\n    const nextLineView = viewAwarePosition.lineView.getNextLineView();\n    if (!nextLineView) {\n      return moveToLineEnd()(taleWeaver);\n    }\n    const editorCursorView = docView.getEditorCursorView();\n    if (!editorCursorView) {\n      return transformation;\n    }\n    let lineViewX: number;\n    if (editorCursorView.getLineViewX() !== null) {\n      lineViewX = editorCursorView.getLineViewX()!;\n    } else {\n      lineViewX = viewAwarePosition.lineView.mapModelPositionRangeToViewPositionBox(\n        viewAwarePosition.lineViewPosition,\n        viewAwarePosition.lineViewPosition,\n      ).x1;\n    }\n    const nextLinePosition = nextLineView.mapViewPositionToModelPosition(lineViewX);\n    transformation.addStep(new TranslateCursor(viewAwarePosition.lineView.getSize() - viewAwarePosition.lineViewPosition + nextLinePosition, true));\n    return transformation;\n  };\n}\n","import DocumentTransformationStep from './DocumentTransformationStep';\n\n/**\n * Describes a document transformation as a series\n * of steps.\n */\nexport default class DocumentTransformation {\n  private steps: DocumentTransformationStep[] = [];\n\n  /**\n   * Create a new document transformation.\n   */\n  constructor() {\n    this.steps = [];\n  }\n\n  /**\n   * Add a step to the transformation.\n   */\n  addStep(step: DocumentTransformationStep) {\n    this.steps.push(step);\n  }\n\n  /**\n   * Get all steps of the transformation.\n   */\n  getSteps(): DocumentTransformationStep[] {\n    return this.steps;\n  }\n}\n","import EventObserver from './EventObserver';\nimport Event, { KeyPressEvent } from './Event';\nimport {\n  insertText,\n} from '../command/document';\n\nexport default class DocumentEventObserver extends EventObserver {\n  onEvent(event: Event) {\n    if (event instanceof KeyPressEvent) {\n      const keyPressEvent = <KeyPressEvent> event;\n      if (keyPressEvent.key === 'a') {\n        this.dispatchDocumentCommand(insertText('a'));\n      }\n    }\n  }\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport DocumentCommand from '../DocumentCommand';\nimport DocumentTransformation from '../../transform/DocumentTransformation';\nimport Assign from '../../transform/documenttransformationsteps/Assign';\n\nexport default function insertText(text: string): DocumentCommand {\n  return (taleWeaver: TaleWeaver): DocumentTransformation => {\n    const transformation = new DocumentTransformation();\n    transformation.addStep(new Assign(text));\n    return transformation;\n  };\n}\n","import Block from './model/Block';\nimport Inline from './model/Inline';\nimport Paragraph from './model/Paragraph';\nimport Text from './model/Text';\nimport WordViewModel from './viewmodel/WordViewModel';\nimport TextViewModel from './viewmodel/TextViewModel';\nimport LineView from './view/LineView';\nimport WordView from './view/WordView';\nimport ParagraphLineView from './view/ParagraphLineView';\nimport TextView from './view/TextView';\nimport EventObserver from './event/EventObserver';\nimport CursorTransformer from './transform/CursorTransformer';\nimport DocTransformer from './transform/DocumentTransformer';\nimport EditorCursorEventObserver from './event/EditorCursorEventObserver';\nimport DocumentEventObserver from './event/DocumentEventObserver';\n\ntype BlockClass = new (...args: any[]) => Block;\ntype InlineClass = new (...args: any[]) => Inline;\ntype WordViewModelClass = new (...args: any[]) => WordViewModel;\ntype LineViewClass = new (...args: any[]) => LineView;\ntype WordViewClass = new (...args: any[]) => WordView;\ntype EventObserverClass = new (...args: any[]) => EventObserver;\n\nclass Config {\n  protected blockClasses: { [key: string]: BlockClass };\n  protected inlineClasses: { [key: string]: InlineClass };\n  protected wordViewModelClasses: { [key: string]: WordViewModelClass };\n  protected lineViewClasses: { [key: string]: LineViewClass };\n  protected wordViewClasses: { [key: string]: WordViewClass };\n  protected eventObserverClasses: EventObserverClass[];\n\n  constructor() {\n    this.blockClasses = {};\n    this.inlineClasses = {};\n    this.wordViewModelClasses = {};\n    this.lineViewClasses = {};\n    this.wordViewClasses = {};\n    this.eventObserverClasses = [];\n    this.registerBlockType('Paragraph', Paragraph, ParagraphLineView);\n    this.registerInlineType('Text', Text, TextViewModel, TextView);\n    this.registerEventObserverClass(EditorCursorEventObserver);\n    this.registerEventObserverClass(DocumentEventObserver);\n  }\n\n  registerBlockType(type: string, blockClass: BlockClass, lineViewClass: LineViewClass) {\n    this.blockClasses[type] = blockClass;\n    this.lineViewClasses[type] = lineViewClass;\n  }\n\n  registerInlineType(type: string, inlineClass: InlineClass, wordViewModelClass: WordViewModelClass, wordViewClass: WordViewClass) {\n    this.inlineClasses[type] = inlineClass;\n    this.wordViewModelClasses[type] = wordViewModelClass;\n    this.wordViewClasses[type] = wordViewClass;\n  }\n\n  getBlockClass(type: string): BlockClass {\n    const blockClass = this.blockClasses[type];\n    if (!blockClass) {\n      throw new Error(`Block type ${type} is not registered.`);\n    }\n    return blockClass\n  }\n\n  getInlineClass(type: string): InlineClass {\n    const inlineClass = this.inlineClasses[type];\n    if (!inlineClass) {\n      throw new Error(`Inline type ${type} is not regsitered.`);\n    }\n    return inlineClass;\n  }\n\n  getWordViewModelClass(type: string): WordViewModelClass {\n    const wordViewModelClass = this.wordViewModelClasses[type];\n    if (!wordViewModelClass) {\n      throw new Error(`Inline type ${type} is not regsitered.`);\n    }\n    return wordViewModelClass;\n  }\n\n  getLineViewClass(type: string): LineViewClass {\n    const lineViewClass = this.lineViewClasses[type];\n    if (!lineViewClass) {\n      throw new Error(`Block type ${type} is not regsitered.`);\n    }\n    return lineViewClass;\n  }\n\n  getWordViewClass(type: string): WordViewClass {\n    const wordViewClass = this.wordViewClasses[type];\n    if (!wordViewClass) {\n      throw new Error(`Inline type ${type} is not regsitered.`);\n    }\n    return wordViewClass;\n  }\n\n  registerEventObserverClass(eventObserverClass: EventObserverClass) {\n    this.eventObserverClasses.push(eventObserverClass)\n  }\n\n  getEventObserverClasses(): EventObserverClass[] {\n    return this.eventObserverClasses;\n  }\n}\n\nexport default Config;\n","/**\n * Interface for extra observer args, which is just\n * an arbitrary key-value map.\n */\nexport interface CursorTransformationExtraArgs {\n  preserveLineViewPosition: boolean;\n}\n\n/** Observer to cursor state change. */\ntype CursorObserver = (cursor: Cursor, extraArgs: CursorTransformationExtraArgs) => void;\n\n/**\n * Generates a unique cursor ID.\n */\nfunction generateID(): string {\n  // Generate cursor ID with current timestamp and a random number.\n  return `${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`\n}\n\n/**\n * Models a cursor on the document.\n */\nexport default class Cursor {\n  /** ID of the cursor. */\n  private id: string;\n  /** Anchor position of the cursor. */\n  private anchor: number;\n  /** Head position of the cursor. */\n  private head: number;\n  /** Observers registered with the cursor. */\n  private observers: CursorObserver[];\n\n  /**\n   * Creates a new cursor instance.\n   * @param anchor - Initial anchor position of the cursor.\n   * @param head - Initial head position of the cursor.\n   * @param id - ID of the cursor.\n   */\n  constructor(anchor: number, head: number, id?: string) {\n    this.id = id || generateID();\n    this.anchor = anchor;\n    this.head = head;\n    this.observers = [];\n  }\n\n  /**\n   * Notifies observers of state change.\n   */\n  private notifyObservers(extraArgs: CursorTransformationExtraArgs) {\n    this.observers.forEach(observer => {\n      observer(this, extraArgs);\n    });\n    document.getElementById('status')!.innerText = `${this.anchor}, ${this.head}`;\n  }\n\n  /**\n   * Gets the ID of the cursor.\n   */\n  getID() {\n    return this.id;\n  }\n\n  /**\n   * Registers an observer.\n   * @param observer - Observer to register.\n   */\n  observe(observer: CursorObserver) {\n    this.observers.push(observer);\n  }\n\n  /**\n   * Moves the cursor to a certain position.\n   * @param position - Position to move cursor to.\n   */\n  moveTo(position: number, extraArgs: CursorTransformationExtraArgs) {\n    this.anchor = position;\n    this.head = position;\n    this.notifyObservers(extraArgs);\n  }\n\n  /**\n   * Moves the cursor head to a certain position.\n   * The anchor is not moved.\n   * @param position - Position to move cursor head to.\n   */\n  moveHeadTo(position: number, extraArgs: CursorTransformationExtraArgs) {\n    this.head = position;\n    this.notifyObservers(extraArgs);\n  }\n\n  /**\n   * Gets the anchor position.\n   */\n  getAnchor(): number {\n    return this.anchor!;\n  }\n\n  /**\n   * Gets the head position.\n   */\n  getHead(): number {\n    return this.head!;\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport TaleWeaver from './editor/TaleWeaver';\nimport Serializer from './editor/state/helpers/Serializer';\nimport Config from './editor/Config';\nimport Cursor from './editor/cursor/Cursor';\n\nconst docText = `\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Donec luctus commodo magna eu gravida. Quisque et neque ornare nunc maximus faucibus. Ut molestie diam non interdum fringilla. In hac habitasse platea dictumst. Proin dignissim id diam a pharetra. Praesent nec arcu felis. Nam et cursus mi. Duis facilisis ex vel leo vulputate laoreet. Pellentesque turpis quam, sollicitudin at lobortis non, rhoncus eu neque. Quisque egestas, ex vitae porta accumsan, justo dui elementum nisi, et bibendum lectus diam ut mauris. Proin imperdiet vulputate congue. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse nec tristique odio. Nulla eget tortor eu felis mattis mattis. Duis in nulla ultricies, egestas nunc ac, tempor tellus.\nCras condimentum nisi diam, vitae ornare libero porttitor at. Curabitur id nibh aliquam lacus malesuada tincidunt id eget mauris. Donec venenatis non ipsum quis fermentum. Vestibulum dignissim finibus neque, et mattis orci mollis id. Nunc pellentesque, neque sed fermentum fermentum, felis nunc porttitor lorem, et pulvinar leo quam ut elit. Quisque sit amet venenatis mauris. In hac habitasse platea dictumst. Praesent sem mauris, tincidunt ut sollicitudin et, molestie ac magna. Etiam faucibus porta dapibus. Cras velit augue, molestie id est in, ullamcorper sodales mauris. Nunc ullamcorper eros purus, eget placerat eros pharetra fermentum. Nunc ullamcorper euismod dui, tempor pulvinar mi pretium vel. Nullam nec nisi mi. Phasellus fermentum diam vel lacus bibendum imperdiet. Cras enim mi, cursus at velit feugiat, sagittis sagittis urna.\nMaecenas id efficitur nulla, ornare posuere felis. Nulla lobortis tortor vel massa lobortis, sit amet rhoncus neque placerat. Curabitur maximus iaculis faucibus. In tincidunt posuere justo at pulvinar. Maecenas viverra at odio nec porta. Pellentesque ultrices eros vitae velit scelerisque, et tempor lectus sodales. Duis tempus quam nec tortor consequat consectetur. Nulla facilisi. Nam id lectus magna. Nulla metus mauris, tincidunt at ante a, pulvinar tincidunt metus. Nulla nec magna sit amet sapien feugiat commodo at in dolor. Aenean mauris enim, posuere et dolor quis, ornare sollicitudin dui. Vivamus aliquet metus turpis, in maximus enim aliquam in. Sed vel quam vitae metus condimentum aliquam.\nSuspendisse egestas vulputate arcu, ut laoreet felis feugiat sed. Donec dui sem, aliquet euismod sollicitudin sed, cursus non urna. Ut blandit enim diam, vitae rhoncus nisl accumsan non. Nulla facilisi. Vestibulum nec scelerisque augue, sed volutpat est. Integer augue turpis, varius ac velit non, ornare venenatis lectus. Nullam porta neque vel risus semper ornare id a enim. Cras tristique non quam quis commodo.\nFusce condimentum arcu et diam faucibus, sit amet mattis velit pharetra. Praesent sagittis rhoncus libero, placerat ornare dui varius eget. Fusce consequat metus ut dignissim luctus. In congue lectus ut magna varius, at aliquam mi rutrum. Nam eu nunc eu ipsum varius pulvinar ac ut nulla. Nullam non elit neque. Vestibulum quis molestie dolor, eu vehicula risus. Sed luctus velit sem, id vestibulum orci blandit at. In aliquam gravida aliquam. Vivamus semper vulputate purus eu vehicula. Ut condimentum quis velit et feugiat. Curabitur eget ex eget mi interdum condimentum eget sit amet purus. Aliquam et libero erat. Aliquam erat volutpat.\n`.trim();\n\nlet serialized = '<Doc {}>\\n';\ndocText.split('\\n').forEach(docLineText => {\n  serialized += `<Block.Paragraph {}>\\n`;\n  serialized += `<Inline.Text {}>\\n`;\n  docLineText.split('').forEach(char => {\n    serialized += `${char}\\n`;\n  });\n  serialized += '\\\\n\\n';\n  serialized += `</Inline>\\n`;\n  serialized += `</Block>\\n`;\n});\nserialized += '</Doc>';\n\ntype TaleWeaverComponentProps = {\n  initialData: string;\n}\ntype TaleWeaverComponentState = {\n  taleWeaver: TaleWeaver;\n}\nclass TaleWeaverComponent extends React.Component<TaleWeaverComponentProps, TaleWeaverComponentState> {\n  private domRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: TaleWeaverComponentProps) {\n    super(props);\n    this.domRef = React.createRef();\n    const config = new Config();\n    const serializer = new Serializer();\n    const state = serializer.parse(props.initialData);\n    const editorCursor = new Cursor(0, 0);\n    const taleWeaver = new TaleWeaver(config, state, editorCursor);\n    this.state = { taleWeaver };\n  }\n\n  componentDidMount() {\n    const domElement = this.domRef.current!;\n    this.state.taleWeaver.mount(domElement);\n  }\n\n  render() {\n    return (\n      <div className=\"tw--container\" ref={this.domRef} />\n    );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <TaleWeaverComponent initialData={serialized} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}