{"version":3,"sources":["editor/model/DocumentElement.ts","editor/model/block/ParagraphElement.ts","editor/model/BlockElement.ts","editor/model/InlineElement.ts","editor/model/word/TextWord.ts","editor/model/Word.ts","editor/model/inline/TextElement.ts","editor/view/PageView.ts","editor/state/CursorTransformation.ts","editor/state/cursortransformationsteps/TranslateCursor.ts","editor/command/cursor/moveToLineStart.ts","editor/command/cursor/moveToLineEnd.ts","editor/state/cursortransformationsteps/TranslateCursorHead.ts","editor/command/cursor/moveHeadTo.ts","editor/command/cursor/moveHeadToLineStart.ts","editor/command/cursor/moveHeadToLineEnd.ts","editor/view/EditorCursorView.ts","editor/helpers/isElementInViewport.ts","editor/command/cursor/moveTo.ts","editor/event/Event.ts","editor/view/DocumentView.ts","editor/helpers/throttle.ts","editor/view/ParagraphLineView.ts","editor/view/LineView.ts","editor/view/WordView.ts","editor/view/helpers/measureText.ts","editor/view/TextView.ts","editor/state/CursorTransformer.ts","editor/state/DocumentTransformer.ts","editor/event/EditorCursorEventObserver.ts","editor/command/cursor/moveHeadBackwardByWord.ts","editor/command/cursor/moveHeadBackward.ts","editor/command/cursor/moveBackwardByWord.ts","editor/command/cursor/moveBackward.ts","editor/command/cursor/moveHeadForwardByWord.ts","editor/command/cursor/moveHeadForward.ts","editor/command/cursor/moveForwardByWord.ts","editor/command/cursor/moveForward.ts","editor/command/cursor/moveHeadToDocumentStart.ts","editor/command/cursor/moveHeadToPreviousLine.ts","editor/command/cursor/moveToDocumentStart.ts","editor/command/cursor/moveToPreviousLine.ts","editor/command/cursor/moveHeadToDocumentEnd.ts","editor/command/cursor/moveHeadToNextLine.ts","editor/command/cursor/moveToDocumentEnd.ts","editor/command/cursor/moveToNextLine.ts","editor/event/EventObserver.ts","editor/TaleWeaver.ts","editor/state/State.ts","editor/cursor/Cursor.ts","App.tsx","editor/state/helpers/parseStateJSON.ts","serviceWorker.ts","index.tsx"],"names":["DocumentElement","Object","classCallCheck","this","children","child","push","index","indexOf","splice","position","cumulatedSize","n","nn","length","getSize","size","forEach","ParagraphElement","BlockElement","parent","InlineElement","text","TextWord","Word","inlineElement","BREAKABLE_CHARS","TextElement","words","getText","wordFromIndex","textIndex","textLength","char","word","setText","substring","PageView","documentView","config","lineViews","mounted","lineView","pageViews","getPageViews","setPageView","domDocumentContent","getDOM","domPage","document","createElement","className","style","width","concat","height","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","userSelect","appendChild","domPageContent","domInputOverlay","top","bottom","left","right","opacity","zIndex","mount","from","to","viewPositionBoxes","offset","cumulatedHeight","lineViewPositionBox","mapModelPositionRangeToViewPositionBox","Math","max","min","x1","y1","x2","y2","getHeight","x","y","mapViewPositionToModelPosition","lineViewAwarePosition","resolveModelPosition","objectSpread","pageView","pageViewPosition","Error","CursorTransformation","steps","step","TranslateCursor","displacement","preserveLineViewPosition","arguments","undefined","moveToLineStart","taleWeaver","transformation","editorCursor","getState","getEditorCursor","head","getHead","viewAwarePosition","getDocumentView","lineViewPosition","addStep","moveToLineEnd","TranslateCursorHead","moveHeadTo","moveHeadToLineStart","moveHeadRightByLine","EditorCursorView","domSelections","selecting","blinkState","blinkInterval","lineViewX","lastLineViewX","renderHead","renderSelections","_viewPositionBoxes$","mapModelPositionRangeToViewPositionBoxes","pageViewPositionBox","domHead","parentElement","removeChild","element","rect","getBoundingClientRect","window","innerHeight","documentElement","clientHeight","innerWidth","clientWidth","isElementInViewport","scrollIntoView","block","_this","anchor","getAnchor","selectionsCount","domSelection","pop","background","selectionIndex","_ref","pointerEvents","_this2","marginLeft","visibility","render","startBlinking","observe","extraArgs","stopBlinking","_this3","setInterval","clearInterval","applyEditorCursorTransformation","moveTo","KeyPressEvent","key","shift","meta","alt","DocumentView","handleSelectStart","event","preventDefault","handleMouseDown","editorCursorView","clientX","clientY","beginSelect","handleMouseMove","func","milliseconds","throttledRunTimeout","lastRunAt","_len","args","Array","_key","clearTimeout","setTimeout","apply","Date","now","throttle","moveSelect","handleMouseUp","endSelect","handleKeyDown","dispatchEvent","shiftKey","metaKey","altKey","handleKeyUp","wordViewBlocks","buildWordViewBlocks","buildLineViews","buildPageViews","buildEditorCursorView","domWrapper","domDocument","addEventListener","_loop","clientRects","offsets","sqDistances","map","clientRect","xDistance","yDistance","toConsumableArray","pageModelPosition","pageViewAwarePosition","documentViewPosition","registry","getRegistry","getChildren","blockElement","wordViewBlock","wordViews","getWords","wordView","getWordViewClass","getType","_this4","pageContentWidth","pageWidth","pagePaddingLeft","pagePaddingRight","LineView","getLineViewClass","cumulatedWidth","getWidth","setLineView","appendWordView","_this5","pageViewConigs","pageHeight","pagePaddingTop","pagePaddingBottom","pageContentHeight","appendLineView","setDocumentView","ParagraphLineView","possibleConstructorReturn","getPrototypeOf","call","getPageView","domParagraphLine","domLine","domLineContent","getLineViews","previousPageView","getPreviousPageView","previousPageLineViews","nextPageView","getNextPageView","viewPositionBox","wordViewPositionBox","wordViewAwarePosition","WordView","getWordViews","previousLineView","getPreviousLineView","previousLineWordViews","nextLineView","getNextLineView","wordViewPosition","textMeasurer","TextMeasurer","$iframe","src","border","body","$textContainers","Map","createClass","value","textStyle","textStyleKey","JSON","stringify","getTextStyleKey","has","$textContainer","display","whiteSpace","fontFamily","fontSize","fontWeight","lineHeight","letterSpacing","contentDocument","set","get","adjustedText","replace","getTextContainerElement","innerHTML","boundingClientRect","measureText","measure","placeholderTextStyle","TextView","getLineView","textWord","domTextWord","createTextNode","domWord","domWordContent","getScreenX","lastWidth","measurement","at","CursorTransformer","cursor","getSteps","getDisplacement","getExtraArgs","DocumentTransformer","EditorCursorEventObserver","keyPressEvent","dispatchCursorCommand","previousWordView","getPreviousWordView","nextWordView","getNextWordView","moveHeadToLineEnd","getDocumentElement","getEditorCursorView","getLineViewX","previousLinePosition","documentSize","nextLinePosition","EventObserver","cursorCommand","cursorTransformation","TaleWeaverRegistry","blockElementClasses","inlineElementClasses","lineViewClasses","wordViewClasses","eventObservers","registerDocumentElementClass","registerBlockElementClass","registerInlineElementClass","registerDocumentViewClass","registerPageViewClass","registerLineViewClass","registerWordViewClass","registerCursorTransformer","registerDocumentTransformer","registerEventObserver","documentElementClass","type","blockElementClass","inlineElementClass","documentViewClass","pageViewClass","lineViewClass","wordViewClass","cursorTransformer","documentTransformer","eventObserver","TaleWeaver","state","getDocumentViewClass","State","observerCursors","getEventObservers","onEvent","getCursorTransformer","Cursor","id","toString","random","observers","observer","notifyObservers","initialStateJSON","TaleWeaverComponent","props","domRef","React","createRef","setState","stateJSON","getDocumentElementClass","blockElementJSON","getBlockElementClass","inlineElementJSON","getInlineElementClass","setDocumentElement","setEditorCursor","observerCursorJSON","observerCursor","appendObserverCursor","parseStateJSON","domElement","current","attach","react_default","a","ref","Component","App","App_TaleWeaverComponent","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.614d74ee.chunk.js","sourcesContent":["import BlockElement from './BlockElement';\n\n/**\n * Models a document. This is the root of the\n * element tree.\n */\nexport default class DocumentElement {\n  /** Child elements. */\n  protected children: BlockElement[];\n\n  /**\n   * Creates a new document element instance.\n   */\n  constructor() {\n    this.children = [];\n  }\n\n  /**\n   * Appends a child element.\n   * @param child - Child element to append.\n   */\n  appendChild(child: BlockElement) {\n    this.children.push(child);\n  }\n\n  /**\n   * Removes a child element;\n   * @param child - Child element to remove.\n   */\n  removeChild(child: BlockElement) {\n    const index = this.children.indexOf(child);\n    if (index < 0) {\n      return;\n    }\n    this.children.splice(index, 1);\n  }\n\n  /**\n   * Gets all child elements.\n   */\n  getChildren(): BlockElement[] {\n    return this.children;\n  }\n\n  /**\n   * Gets a child element at a certain position in the document.\n   * @param position - Position in the document.\n   */\n  getChildAt(position: number): BlockElement | null {\n    let cumulatedSize = 0;\n    for (let n = 0, nn = this.children.length; n < nn; n++) {\n      cumulatedSize += this.children[n].getSize();\n      if (cumulatedSize > position) {\n        return this.children[n];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Gets the size of the document.\n   */\n  getSize(): number {\n    let size = 0;\n    this.children.forEach(child => {\n      size += child.getSize();\n    });\n    return size;\n  }\n}\n","import BlockElement from '../BlockElement';\n\n/**\n * Paragraph block element.\n */\nexport default class ParagraphElement extends BlockElement {\n  getType(): string {\n    return 'Paragraph';\n  }\n}\n","import DocumentElement from './DocumentElement';\nimport InlineElement from './InlineElement';\n\n/**\n * Models a block element in a document.\n * A block element should be the child of a\n * document element and may contain inline\n * elements as children.\n */\nexport default abstract class BlockElement {\n  /** Parent element. */\n  protected parent?: DocumentElement;\n  /** Child elements. */\n  protected children: InlineElement[];\n\n  /** Creates a new block element instance. */\n  constructor() {\n    this.children = [];\n  }\n\n  /**\n   * Gets the type of block element.\n   */\n  abstract getType(): string;\n\n  /**\n   * Sets the parent element.\n   * @param parent - Parent element to set.\n   */\n  setParent(parent: DocumentElement) {\n    this.parent = parent;\n  }\n\n  /**\n   * Gets a parent element.\n   */\n  getParent(): DocumentElement {\n    return this.parent!;\n  }\n\n  /**\n   * Appends a child element.\n   * @param child - Child element to append.\n   */\n  appendChild(child: InlineElement) {\n    this.children.push(child);\n  }\n\n  /**\n   * Removes a child element.\n   * @param child - Child element to remove.\n   */\n  removeChild(child: InlineElement) {\n    const index = this.children.indexOf(child);\n    if (index < 0) {\n      return;\n    }\n    this.children.splice(index, 1);\n  }\n\n  /**\n   * Gets all child elements.\n   */\n  getChildren(): InlineElement[] {\n    return this.children;\n  }\n\n  /**\n   * Gets a child element at a certain position in the block element.\n   * @param position - Position in the block element.\n   */\n  getChildAt(position: number): InlineElement | null {\n    let cumulatedSize = 0;\n    for (let n = 0, nn = this.children.length; n < nn; n++) {\n      cumulatedSize += this.children[n].getSize();\n      if (cumulatedSize > position) {\n        return this.children[n];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Gets the size of the block element.\n   */\n  getSize(): number {\n    let size = 0;\n    this.children.forEach(child => {\n      size += child.getSize();\n    });\n    return size;\n  }\n}\n","import BlockElement from './BlockElement';\nimport Word from './Word';\n\n/**\n * Models an inline element in a document.\n * An inline element should be the child of\n * a block element.\n */\nexport default abstract class InlineElement {\n  /** Parent element. */\n  protected parent?: BlockElement;\n  /** Text content. */\n  protected text?: string;\n\n  /**\n   * Gets the type of inline element.\n   */\n  abstract getType(): string;\n\n  /**\n   * Sets the parent element.\n   * @param parent - Parent element to set.\n   */\n  setParent(parent: BlockElement) {\n    this.parent = parent;\n  }\n\n  /**\n   * Gets a parent element.\n   */\n  getParent(): BlockElement {\n    return this.parent!;\n  }\n\n  /**\n   * Sets the text content.\n   * @param text - Text content to set.\n   */\n  setText(text: string) {\n    this.text = text;\n  }\n\n  /**\n   * Gets the text content.\n   */\n  getText(): string {\n    return this.text!;\n  }\n\n  /**\n   * Gets the size of the inline element.\n   */\n  abstract getSize(): number;\n\n  /**\n   * Breaks down the inline element into words.\n   */\n  abstract getWords(): Word[];\n}\n","import Word from '../Word';\n\n/**\n * Word for text elements.\n */\nexport default class TextWord extends Word {\n  getType(): string {\n    return 'Text';\n  }\n}\n","import InlineElement from './InlineElement';\n\n/**\n * Models a segment of the document that\n * cannot be split when rendered. This is\n * the basic building block of a document's\n * layout.\n */\nexport default abstract class Word {\n  /** Inline element this word belongs to. */\n  protected inlineElement: InlineElement;\n  /** Text content. */\n  protected text?: string;\n\n  /**\n   * Creates a new word instance.\n   * @param inlineElement - Inline element this word belongs to.\n   */\n  constructor(inlineElement: InlineElement) {\n    this.inlineElement = inlineElement;\n  }\n\n  /**\n   * Gets the type of word.\n   */\n  abstract getType(): string;\n\n  /**\n   * Gets the inline element this word belongs to.\n   */\n  getInlineElement(): InlineElement {\n    return this.inlineElement;\n  }\n\n  /**\n   * Sets the text content.\n   * @param text - The text content to set.\n   */\n  setText(text: string) {\n    this.text = text;\n  }\n\n  /**\n   * Gets the text content.\n   */\n  getText(): string {\n    return this.text!;\n  };\n\n  /**\n   * Gets the size of the word.\n   */\n  getSize(): number {\n    return this.text!.length;\n  }\n}\n","import InlineElement from '../InlineElement';\nimport TextWord from '../word/TextWord';\n\n/**\n * We can break the inline element at the\n * position after these characters.\n */\nconst BREAKABLE_CHARS = [\n  ' ',\n  '\\t',\n  '-',\n];\n\n/**\n * Text inline element.\n */\nexport default class TextElement extends InlineElement {\n  getType(): string {\n    return 'Text';\n  }\n\n  getSize(): number {\n    return this.text!.length;\n  }\n\n  getWords(): TextWord[] {\n    const words: TextWord[] = [];\n    const text = this.getText();\n    let wordFromIndex = 0;\n    let textIndex = 0;\n    for (let textLength = text.length; textIndex < textLength; textIndex++) {\n      const char = text[textIndex];\n      if (BREAKABLE_CHARS.indexOf(char) >= 0) {\n        const word = new TextWord(this);\n        word.setText(text.substring(wordFromIndex, textIndex + 1));\n        words.push(word);\n        wordFromIndex = textIndex + 1;\n      }\n    }\n    if (wordFromIndex !== textIndex) {\n      const word = new TextWord(this);\n      word.setText(text.substring(wordFromIndex, textIndex + 1));\n      words.push(word);\n    }\n    return words;\n  }\n}\n","import DocumentView from './DocumentView';\nimport LineView, { LineViewAwarePosition } from './LineView';\n\n/**\n * Page view configs.\n */\nexport interface PageViewConfig {\n  width: number;\n  height: number;\n  paddingTop: number;\n  paddingBottom: number;\n  paddingLeft: number;\n  paddingRight: number;\n}\n\nexport interface PageViewDOMElements {\n  domPage: HTMLDivElement;\n  domPageContent: HTMLDivElement;\n}\n\nexport interface PageViewPositionBox {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n}\n\nexport interface PageViewAwarePosition extends LineViewAwarePosition {\n  pageView: PageView;\n  pageViewPosition: number;\n};\n\nexport default class PageView {\n  private documentView: DocumentView;\n  private config: PageViewConfig;\n\n  private lineViews: LineView[];\n\n  private mounted: boolean;\n  private domPage?: HTMLDivElement;\n  private domPageContent?: HTMLDivElement;\n  private domInputOverlay?: HTMLInputElement;\n\n  constructor(documentView: DocumentView, config: PageViewConfig) {\n    this.documentView = documentView;\n    this.config = config;\n\n    this.lineViews = [];\n\n    this.mounted = false;\n  }\n\n  /**\n   * Gets the model size of the page.\n   */\n  getSize(): number {\n    let size = 0;\n    this.lineViews!.forEach(lineView => size += lineView.getSize());\n    return size;\n  }\n\n  /**\n   * Gets the parent document view.\n   */\n  getDocumentView(): DocumentView {\n    return this.documentView!;\n  }\n\n  /**\n   * Gets the previous page view in the parent document view.\n   */\n  getPreviousPageView(): PageView | null {\n    const pageViews = this.documentView!.getPageViews();\n    const index = pageViews.indexOf(this);\n    if (index < 0) {\n      return null;\n    }\n    if (index === 0) {\n      return null;\n    }\n    return pageViews[index - 1];\n  }\n\n  /**\n   * Gets the next page view in the parent document view.\n   */\n  getNextPageView(): PageView | null {\n    const pageViews = this.documentView!.getPageViews();\n    const index = pageViews.indexOf(this);\n    if (index < 0) {\n      return null;\n    }\n    if (index === pageViews.length - 1) {\n      return null;\n    }\n    return pageViews[index + 1];\n  }\n\n  /**\n   * Appends a line view to the page.\n   */\n  appendLineView(lineView: LineView) {\n    this.lineViews.push(lineView);\n    lineView.setPageView(this);\n  }\n\n  /**\n   * Remove a line view from the page.\n   */\n  removeLineView(lineView: LineView) {\n    const index = this.lineViews.indexOf(lineView);\n    if (index < 0) {\n      return;\n    }\n    this.lineViews.splice(index, 1);\n  }\n\n  /**\n   * Gets the child line views.\n   */\n  getLineViews(): LineView[] {\n    return this.lineViews;\n  }\n\n  /**\n   * Mounts the view to DOM.\n   */\n  mount() {\n    // Do not mount if already mounted\n    if (this.mounted) {\n      return;\n    }\n\n    // Get wrapper element\n    const { domDocumentContent } = this.documentView.getDOM();\n\n    // Build page element\n    this.domPage = document.createElement('div');\n    this.domPage.className = 'tw--page';\n    this.domPage.style.width = `${this.config.width}px`;\n    this.domPage.style.height = `${this.config.height}px`;\n    this.domPage.style.padding = `${this.config.paddingTop}px ${this.config.paddingRight}px ${this.config.paddingBottom}px ${this.config.paddingLeft}px`;\n    this.domPage.style.userSelect = 'none';\n    this.domPage.style.position = 'relative';\n    domDocumentContent.appendChild(this.domPage);\n\n    // Build page content element\n    this.domPageContent = document.createElement('div');\n    this.domPageContent.className = 'tw--page-content';\n    this.domPageContent.style.position = 'relative';\n    this.domPageContent.style.height = '100%';\n    this.domPage.appendChild(this.domPageContent);\n\n    // Build input overlay for capturing mobile input\n    this.domInputOverlay = document.createElement('input');\n    this.domInputOverlay.className = 'tw--page-input-overlay';\n    this.domInputOverlay.style.position = 'absolute';\n    this.domInputOverlay.style.top = '0';\n    this.domInputOverlay.style.bottom = '0';\n    this.domInputOverlay.style.left = '0';\n    this.domInputOverlay.style.width = '100%';\n    this.domInputOverlay.style.right = '0';\n    this.domInputOverlay.style.opacity = '0';\n    this.domInputOverlay.style.zIndex = '5';\n    this.domPage.appendChild(this.domInputOverlay);\n\n    // Mount line views\n    this.lineViews.forEach(lineView => lineView.mount());\n  }\n\n  /**\n   * Gets DOM elements mounted by the view.\n   */\n  getDOM(): PageViewDOMElements {\n    return {\n      domPage: this.domPage!,\n      domPageContent: this.domPageContent!,\n    };\n  }\n\n  /**\n   * Gets the height of the view.\n   */\n  getHeight(): number {\n    return this.config.height;\n  }\n\n  /**\n   * Maps a model position range to view position boxes.\n   * @param from - Left-bound of the model position range.\n   * @param to - Right-bound of the model position range.\n   */\n  mapModelPositionRangeToViewPositionBoxes(from: number, to: number): PageViewPositionBox[] {\n    // Iterate through lines to break up model position range\n    const viewPositionBoxes: PageViewPositionBox[] = [];\n    let offset = 0;\n    let cumulatedHeight = 0;\n    for (let n = 0, nn = this.lineViews.length; n < nn; n++) {\n      const lineView = this.lineViews[n];\n      // If overlap between position range and line\n      if (to >= offset && from < offset + lineView.getSize()) {\n        // Get line view position boxes\n        const lineViewPositionBox = lineView.mapModelPositionRangeToViewPositionBox(\n          Math.max(0, from - offset),\n          Math.min(lineView.getSize(), to - offset),\n        );\n        // Map line view position box to document view position box\n        viewPositionBoxes.push({\n          x1: lineViewPositionBox.x1,\n          y1: cumulatedHeight,\n          x2: lineViewPositionBox.x2,\n          y2: cumulatedHeight + lineViewPositionBox.height,\n        });\n      }\n      offset += lineView.getSize();\n      cumulatedHeight += lineView.getHeight();\n    }\n    return viewPositionBoxes;\n  }\n\n  /**\n   * Maps a view position to model position.\n   * @param x - X-coordinate of the view position.\n   * @param y - Y-coordinate of the view position.\n   */\n  mapViewPositionToModelPosition(x: number, y: number): number {\n    // Iterate through lines until the line that contains the view position\n    // is found\n    let offset = 0;\n    let cumulatedHeight = 0;\n    for (let n = 0, nn = this.lineViews.length; n < nn; n++) {\n      const lineView = this.lineViews[n];\n      // If posterior of line is past Y-coordinate\n      if (cumulatedHeight + lineView.getHeight() >= y) {\n        // Get model position in line\n        const lineModelPosition = lineView.mapViewPositionToModelPosition(x);\n        // Map line model position to page model position\n        return offset + lineModelPosition;\n      }\n      offset += lineView.getSize();\n      cumulatedHeight += lineView.getHeight();\n    }\n    return offset - 1;\n  }\n\n  /**\n   * Resolves a flat model position to a view-aware position\n   * object.\n   * @param position - Flat model position to resolve.\n   */\n  resolveModelPosition(position: number): PageViewAwarePosition {\n    // Iterate through lines until the line that contains the view position\n    // is found\n    let offset = 0;\n    for (let n = 0, nn = this.lineViews.length; n < nn; n++) {\n      const lineView = this.lineViews[n];\n      // If posterior of line is past position\n      if (offset + lineView.getSize() > position) {\n        // Resolve model position in line\n        const lineViewAwarePosition = lineView.resolveModelPosition(position - offset);\n        // Map line view aware position to page view aware position\n        return {\n          ...lineViewAwarePosition,\n          pageView: this,\n          pageViewPosition: position,\n        };\n      }\n      offset += lineView.getSize();\n    }\n    throw new Error(`Cannot resolve page model position ${position}.`);\n  }\n}\n","import CursorTransformationStep from './CursorTransformationStep';\n\n/**\n * Describes a cursor transformation as a series\n * of steps.\n */\nexport default class CursorTransformation {\n  private steps: CursorTransformationStep[] = [];\n\n  /**\n   * Create a new cursor transformation.\n   */\n  constructor() {\n    this.steps = [];\n  }\n\n  /**\n   * Add a step to the transformation.\n   */\n  addStep(step: CursorTransformationStep) {\n    this.steps.push(step);\n  }\n\n  /**\n   * Get all steps of the transformation.\n   */\n  getSteps(): CursorTransformationStep[] {\n    return this.steps;\n  }\n}\n","import CursorTransformationStep from '../CursorTransformationStep';\nimport { CursorTransformationExtraArgs } from '../../cursor/Cursor';\n\n/**\n * A transformation step for translating the cursor\n * by a certain displacement. The cursor head gets\n * displaced and the anchor gets moved to the head.\n */\nexport default class TranslateCursor implements CursorTransformationStep {\n  private displacement: number;\n  private preserveLineViewPosition: boolean;\n\n  /**\n   * Create a new move cursor anchor transformation step.\n   * @param displacement - Vector to displace the cursor anchor by.\n   * @param preserveLineViewPosition - Whether to preserve line view position.\n   */\n  constructor(displacement: number, preserveLineViewPosition: boolean = false) {\n    this.displacement = displacement;\n    this.preserveLineViewPosition = preserveLineViewPosition;\n  }\n\n  getType(): string {\n    return 'TranslateCursor';\n  }\n\n  getExtraArgs(): CursorTransformationExtraArgs {\n    return { preserveLineViewPosition: this.preserveLineViewPosition };\n  }\n\n  /**\n   * Get displacement vector.\n   */\n  getDisplacement(): number {\n    return this.displacement;\n  }\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursor from '../../state/cursortransformationsteps/TranslateCursor';\n\nexport default function moveToLineStart(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentView = taleWeaver.getDocumentView();\n    const viewAwarePosition = documentView.resolveModelPosition(head);\n    if (viewAwarePosition.lineViewPosition > 0) {\n      transformation.addStep(new TranslateCursor(0 - viewAwarePosition.lineViewPosition));\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursor from '../../state/cursortransformationsteps/TranslateCursor';\n\nexport default function moveToLineEnd(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentView = taleWeaver.getDocumentView();\n    const viewAwarePosition = documentView.resolveModelPosition(head);\n    if (viewAwarePosition.lineViewPosition < viewAwarePosition.lineView.getSize() - 1) {\n      transformation.addStep(new TranslateCursor(viewAwarePosition.lineView.getSize() - 1 - viewAwarePosition.lineViewPosition));\n    }\n    return transformation;\n  };\n}\n","import CursorTransformationStep from '../CursorTransformationStep';\nimport { CursorTransformationExtraArgs } from '../../cursor/Cursor';\n\n/**\n * A transformation step for translating the cursor head\n * by a certain displacement.\n */\nexport default class TranslateCursorHead implements CursorTransformationStep {\n  private displacement: number;\n  private preserveLineViewPosition: boolean;\n\n  /**\n   * Create a new move cursor head transformation step.\n   * @param displacement - Vector to displace the cursor head by.\n   * @param preserveLineViewPosition - Whether to preserve line view position.\n   */\n  constructor(displacement: number, preserveLineViewPosition: boolean = false) {\n    this.displacement = displacement;\n    this.preserveLineViewPosition = preserveLineViewPosition;\n  }\n\n  getType(): string {\n    return 'TranslateCursorHead';\n  }\n\n  getExtraArgs(): CursorTransformationExtraArgs {\n    return { preserveLineViewPosition: this.preserveLineViewPosition };\n  }\n\n  /**\n   * Get displacement vector.\n   */\n  getDisplacement(): number {\n    return this.displacement;\n  }\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursorHead from '../../state/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadTo(position: number): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    transformation.addStep(new TranslateCursorHead(position - editorCursor.getHead()));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursorHead from '../../state/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadToLineStart(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentView = taleWeaver.getDocumentView();\n    const viewAwarePosition = documentView.resolveModelPosition(head);\n    if (viewAwarePosition.lineViewPosition > 0) {\n      transformation.addStep(new TranslateCursorHead(0 - viewAwarePosition.lineViewPosition));\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursorHead from '../../state/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadRightByLine(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentView = taleWeaver.getDocumentView();\n    const viewAwarePosition = documentView.resolveModelPosition(head);\n    if (viewAwarePosition.lineViewPosition < viewAwarePosition.lineView.getSize() - 1) {\n      transformation.addStep(new TranslateCursorHead(viewAwarePosition.lineView.getSize() - 1 - viewAwarePosition.lineViewPosition));\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../TaleWeaver';\nimport Cursor from '../cursor/Cursor';\nimport DocumentView from './DocumentView';\nimport { moveTo, moveHeadTo } from '../command/cursor';\nimport isElementInViewport from '../helpers/isElementInViewport';\n\nexport default class EditorCursorView {\n  private taleWeaver: TaleWeaver;\n  private editorCursor: Cursor;\n  private documentView?: DocumentView;\n  private domHead?: HTMLElement;\n  private domSelections: HTMLElement[];\n  private selecting: boolean;\n  private blinkState: boolean;\n  private blinkInterval: NodeJS.Timeout | null;\n  private lineViewX: number | null;\n  private lastLineViewX: number;\n\n  constructor(taleWeaver: TaleWeaver, editorCursor: Cursor) {\n    this.taleWeaver = taleWeaver;\n    this.editorCursor = editorCursor;\n    this.domSelections = [];\n    this.selecting = false;\n    this.blinkState = false;\n    this.blinkInterval = null;\n    this.lineViewX = null;\n    this.lastLineViewX = 0;\n  }\n\n  private render(preserveLineViewPosition: boolean = false) {\n    this.renderHead(preserveLineViewPosition);\n    this.renderSelections();\n  }\n\n  private renderHead(preserveLineViewPosition: boolean) {\n    const editorCursor = this.editorCursor;\n    const head = editorCursor.getHead();\n    const viewPositionBoxes = this.documentView!.mapModelPositionRangeToViewPositionBoxes(head, head);\n    const { pageView, pageViewPositionBox } = viewPositionBoxes[0];\n    const domHead = this.domHead!;\n    domHead.style.left = `${pageViewPositionBox.x1}px`;\n    domHead.style.top = `${pageViewPositionBox.y1}px`;\n    domHead.style.height = `${pageViewPositionBox.y2 - pageViewPositionBox.y1}px`;\n    const { domPageContent } = pageView.getDOM();\n    if (domHead.parentElement && domHead.parentElement !== domPageContent) {\n      domHead.parentElement!.removeChild(domHead);\n    }\n    if (!domHead.parentElement) {\n      domPageContent.appendChild(domHead);\n    }\n    if (preserveLineViewPosition) {\n      if (this.lineViewX === null) {\n        this.lineViewX = this.lastLineViewX;\n      }\n    } else {\n      this.lineViewX = null;\n    }\n    this.lastLineViewX = pageViewPositionBox.x1;\n\n    // Scroll view port to head if head is out of view port\n    if (!isElementInViewport(domHead)) {\n      domHead.scrollIntoView({ block: 'nearest' });\n    }\n  }\n\n  private renderSelections() {\n    const editorCursor = this.editorCursor;\n    const anchor = editorCursor.getAnchor();\n    const head = editorCursor.getHead();\n    const from = Math.min(anchor, head);\n    const to = Math.max(anchor, head);\n    const viewPositionBoxes = this.documentView!.mapModelPositionRangeToViewPositionBoxes(from, to);\n    let selectionsCount = viewPositionBoxes.length;\n    while (this.domSelections.length > selectionsCount) {\n      const domSelection = this.domSelections.pop()!;\n      domSelection.parentElement!.removeChild(domSelection);\n    }\n    while (this.domSelections.length < selectionsCount) {\n      const domSelection = document.createElement('div');\n      domSelection.className = 'tw--editor-cursor-selection';\n      domSelection.style.position = 'absolute';\n      domSelection.style.background = 'hsla(217, 100%, 65%, 0.25)';\n      this.domSelections.push(domSelection);\n    }\n    let selectionIndex = 0;\n    viewPositionBoxes.forEach(({ pageView, pageViewPositionBox }) => {\n      const { domPageContent } = pageView.getDOM();\n      const domSelection = this.domSelections[selectionIndex]!;\n      domSelection.style.left = `${pageViewPositionBox.x1}px`;\n      domSelection.style.width = `${pageViewPositionBox.x2 - pageViewPositionBox.x1}px`;\n      domSelection.style.top = `${pageViewPositionBox.y1}px`;\n      domSelection.style.height = `${pageViewPositionBox.y2 - pageViewPositionBox.y1}px`;\n      domSelection.style.pointerEvents = 'none';\n      if (domSelection.parentElement && domSelection.parentElement !== domPageContent) {\n        domSelection.parentElement!.removeChild(domSelection);\n      }\n      if (!domSelection.parentElement) {\n        domPageContent.appendChild(domSelection);\n      }\n      selectionIndex++;\n    });\n  }\n\n  getLineViewX(): number | null {\n    return this.lineViewX;\n  }\n\n  setDocumentView(documentView: DocumentView) {\n    this.documentView = documentView;\n  }\n\n  mount() {\n    if (!this.domHead) {\n      this.domHead = document.createElement('div');\n      this.domHead.className = 'tw--editor-cursor-head';\n      this.domHead.style.position = 'absolute';\n      this.domHead.style.width = '2px';\n      this.domHead.style.marginLeft = '-1px';\n      this.domHead.style.background = 'hsla(217, 100%, 65%, 1)';\n      this.domHead.style.visibility = 'hidden';\n    }\n    this.render();\n    this.startBlinking();\n    this.editorCursor.observe((editorCursor, extraArgs) => {\n      this.render(extraArgs.preserveLineViewPosition);\n      if (this.blinkInterval !== null) {\n        this.stopBlinking();\n        this.startBlinking();\n      }\n    });\n  }\n\n  getEditorCursor(): Cursor {\n    return this.editorCursor;\n  }\n\n  getDocumentView(): DocumentView {\n    return this.documentView!;\n  }\n\n  startBlinking() {\n    if (this.blinkInterval !== null) {\n      return;\n    }\n    this.blinkInterval = setInterval(() => {\n      if (this.blinkState) {\n        this.domHead!.style.visibility = 'hidden';\n      } else {\n        this.domHead!.style.visibility = 'visible';\n      }\n      this.blinkState = !this.blinkState;\n    }, 500);\n  }\n\n  stopBlinking() {\n    if (this.blinkInterval === null) {\n      return;\n    }\n    this.blinkState = true;\n    this.domHead!.style.visibility = 'visible';\n    clearInterval(this.blinkInterval);\n    this.blinkInterval = null;\n  }\n\n  beginSelect(position: number) {\n    this.taleWeaver.getState().applyEditorCursorTransformation(moveTo(position)(this.taleWeaver));\n    this.selecting = true;\n    this.stopBlinking();\n  }\n\n  moveSelect(position: number) {\n    if (this.selecting) {\n      this.taleWeaver.getState().applyEditorCursorTransformation(moveHeadTo(position)(this.taleWeaver));\n    }\n  }\n\n  endSelect(position: number) {\n    this.taleWeaver.getState().applyEditorCursorTransformation(moveHeadTo(position)(this.taleWeaver));\n    this.selecting = false;\n    this.startBlinking();\n  }\n}\n","export default function isElementInViewport(element: HTMLElement) {\n  const rect = element.getBoundingClientRect();\n  return (\n      rect.top >= 0 &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement!.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement!.clientWidth)\n  );\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursor from '../../state/cursortransformationsteps/TranslateCursor';\n\nexport default function moveTo(position: number): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    transformation.addStep(new TranslateCursor(position - editorCursor.getHead()));\n    return transformation;\n  };\n}\n","export default interface Event {}\n\nexport class KeyPressEvent implements Event {\n  public readonly key: string;\n  public readonly shift: boolean;\n  public readonly meta: boolean;\n  public readonly alt: boolean;\n\n  constructor(key: string, shift: boolean, meta: boolean, alt: boolean) {\n    this.key = key;\n    this.shift = shift;\n    this.meta = meta;\n    this.alt = alt;\n  }\n}\n","import TaleWeaver from '../TaleWeaver';\nimport DocumentElement from '../model/DocumentElement';\nimport BlockElement from '../model/BlockElement';\nimport throttle from '../helpers/throttle';\nimport PageView, { PageViewPositionBox, PageViewAwarePosition } from './PageView';\nimport WordView from './WordView';\nimport LineView from './LineView';\nimport EditorCursorView from './EditorCursorView';\nimport { KeyPressEvent } from '../event/Event';\n\n/**\n * Box views of a block element, useful\n * as an intermediate data structure\n * where the word views can be further\n * broken down into line views.\n */\ninterface WordViewBlock {\n  blockElement: BlockElement;\n  wordViews: WordView[];\n};\n\n/**\n * Document view configs.\n */\ninterface DocumentViewConfig {\n  /** Width of a page in the document. */\n  pageWidth: number;\n  /** Height of a page in the document. */\n  pageHeight: number;\n  /** Topping padding of a page in the document. */\n  pagePaddingTop: number;\n  /** Bottom padding of a page in the document. */\n  pagePaddingBottom: number;\n  /** Left padding of a page in the document. */\n  pagePaddingLeft: number;\n  /** Right padding of a page in the document. */\n  pagePaddingRight: number;\n};\n\nexport interface DocumentViewDOMElements {\n  domDocument: HTMLDivElement;\n  domDocumentContent: HTMLDivElement;\n}\n\nexport interface DocumentViewPositionBox {\n  pageView: PageView;\n  pageViewPositionBox: PageViewPositionBox;\n};\n\nexport interface DocumentViewAwarePosition extends PageViewAwarePosition {\n  documentView: DocumentView;\n  documentViewPosition: number;\n};\n\n/**\n * View of a document.\n */\nexport default class DocumentView {\n  private taleWeaver: TaleWeaver;\n  private documentElement: DocumentElement;\n  private config: DocumentViewConfig;\n\n  private wordViewBlocks: WordViewBlock[];\n  private lineViews: LineView[];\n  private pageViews: PageView[];\n  private editorCursorView: EditorCursorView | null;\n\n  private mounted: boolean;\n  private domDocument?: HTMLDivElement;\n  private domDocumentContent?: HTMLDivElement;\n\n  /**\n   * Creates a new document view instance.\n   * @param taleWeaver - A TaleWeaver instance.\n   * @param config - Configs for the document view.\n   */\n  constructor(taleWeaver: TaleWeaver, documentElement: DocumentElement, config: DocumentViewConfig) {\n    this.taleWeaver = taleWeaver;\n    this.documentElement = documentElement;\n    this.config = config;\n\n    this.wordViewBlocks = [];\n    this.lineViews = [];\n    this.pageViews = [];\n    this.editorCursorView = null;\n\n    this.mounted = false;\n    \n    // Build child views\n    this.buildWordViewBlocks();\n    this.buildLineViews();\n    this.buildPageViews();\n    this.buildEditorCursorView();\n  }\n\n  /**\n   * Gets the model size of the document.\n   */\n  getSize(): number {\n    return this.documentElement.getSize();\n  }\n\n  /**\n   * Gets the child page views.\n   */\n  getPageViews(): PageView[] {\n    return this.pageViews;\n  }\n\n  /**\n   * Gets the child editor cursor view.\n   */\n  getEditorCursorView(): EditorCursorView | null {\n    return this.editorCursorView;\n  }\n\n  /**\n   * Mounts the view to DOM.\n   * @param domWrapper - DOM wrapper for the document view.\n   */\n  mount(domWrapper: HTMLElement) {\n    // Do not mount if already mounted\n    if (this.mounted) {\n      return;\n    }\n\n    // Build document element\n    this.domDocument = document.createElement('div');\n    this.domDocument.className = 'tw--document';\n    domWrapper.appendChild(this.domDocument);\n\n    // Build document content element\n    this.domDocumentContent = document.createElement('div');\n    this.domDocumentContent.className = 'tw--document-content';\n    this.domDocument.appendChild(this.domDocumentContent);\n\n    // Mount page views\n    this.pageViews.forEach(pageView => pageView.mount());\n\n    // Mount editor cursor view\n    this.editorCursorView!.mount();\n\n    // Attach event listeners\n    this.domDocument.addEventListener('selectstart', this.handleSelectStart);\n    this.domDocument.addEventListener('mousedown', this.handleMouseDown);\n    this.domDocument.addEventListener('mousemove', this.handleMouseMove);\n    this.domDocument.addEventListener('mouseup', this.handleMouseUp);\n    window.addEventListener('keydown', this.handleKeyDown);\n    window.addEventListener('keyup', this.handleKeyUp);\n  }\n\n  /**\n   * Gets DOM elements mounted by the view.\n   */\n  getDOM(): DocumentViewDOMElements {\n    return {\n      domDocument: this.domDocument!,\n      domDocumentContent: this.domDocumentContent!,\n    };\n  }\n\n  /**\n   * Maps a model position range to view position boxes.\n   * @param from - Left-bound of the model position range.\n   * @param to - Right-bound of the model position range.\n   */\n  mapModelPositionRangeToViewPositionBoxes(from: number, to: number): DocumentViewPositionBox[] {\n    // Iterate through pages to break up model position range\n    const viewPositionBoxes: DocumentViewPositionBox[] = [];\n    let offset = 0;\n    for (let n = 0, nn = this.pageViews.length; n < nn; n++) {\n      const pageView = this.pageViews[n];\n      // If overlap between position range and page\n      if (to >= offset && from < offset + pageView.getSize()) {\n        // Get page view position boxes\n        const pageViewPositionBoxes = pageView.mapModelPositionRangeToViewPositionBoxes(\n          Math.max(0, from - offset),\n          Math.min(pageView.getSize(), to - offset),\n        );\n        // Map page view position boxes to document view position boxes\n        pageViewPositionBoxes.forEach(pageViewPositionBox => {\n          viewPositionBoxes.push({\n            pageView,\n            pageViewPositionBox,\n          });\n        });\n      }\n      offset += pageView.getSize();\n    }\n    return viewPositionBoxes;\n  }\n\n  /**\n   * Maps a view position to model position.\n   * @param x - X-coordinate of the view position.\n   * @param y - Y-coordinate of the view position.\n   */\n  mapViewPositionToModelPosition(x: number, y: number): number {\n    // Iterate through pages until the page that contains the view position\n    // is found\n    let offset = 0;\n    const clientRects: ClientRect[] = [];\n    const offsets: number[] = [];\n    for (let n = 0, nn = this.pageViews.length; n < nn; n++) {\n      const pageView = this.pageViews[n];\n      // Get page bounding client rect\n      const { domPageContent } = pageView.getDOM();\n      clientRects.push(domPageContent.getBoundingClientRect());\n      offsets.push(offset);\n      offset += pageView.getSize();\n    }\n    // Find page view closest to the view position\n    const sqDistances = clientRects.map(clientRect => {\n      const xDistance = Math.max(Math.max(clientRect.left - x, 0), Math.max(x - (clientRect.left + clientRect.width), 0));\n      const yDistance = Math.max(Math.max(clientRect.top - y, 0), Math.max(y - (clientRect.top + clientRect.height), 0));\n      return xDistance * xDistance + yDistance * yDistance;\n    });\n    const index = sqDistances.indexOf(Math.min(...sqDistances));\n    // Map position on closest page\n    const pageView = this.pageViews[index];\n    const clientRect = clientRects[index];\n    const pageModelPosition = pageView.mapViewPositionToModelPosition(\n      Math.min(Math.max(x - clientRect.left, 0), clientRect.width),\n      Math.min(Math.max(y - clientRect.top, 0), clientRect.height),\n    );\n    return offsets[index] + pageModelPosition;\n  }\n\n  /**\n   * Resolves a flat model position to a view-aware position\n   * object.\n   * @param position - Flat model position to resolve.\n   */\n  resolveModelPosition(position: number): DocumentViewAwarePosition {\n    // Iterate through pages until the page that contains the view position\n    // is found\n    let offset = 0;\n    for (let n = 0, nn = this.pageViews.length; n < nn; n++) {\n      const pageView = this.pageViews[n];\n      // If posterior of page is past position\n      if (offset + pageView.getSize() > position) {\n        // Resolve model position in page\n        const pageViewAwarePosition = pageView.resolveModelPosition(position - offset);\n        // Map page view aware position to document view aware position\n        return {\n          ...pageViewAwarePosition,\n          documentView: this,\n          documentViewPosition: position,\n        };\n      }\n      offset += pageView.getSize();\n    }\n    throw new Error(`Cannot resolve document model position ${position}.`);\n  }\n\n  /**\n   * Builds word views for each block element in\n   * the document.\n   */\n  private buildWordViewBlocks() {\n    const registry = this.taleWeaver.getRegistry();\n    // Reset wordViewBlocks\n    this.wordViewBlocks.length = 0;\n    // Loop through block elements in the document\n    this.documentElement.getChildren().forEach(blockElement => {\n      const wordViewBlock: WordViewBlock = {\n        blockElement,\n        wordViews: [],\n      };\n      // Loop through inline elements in the block element\n      blockElement.getChildren().forEach(inlineElement => {\n        const words = inlineElement.getWords();\n        // Loop through words in the inline element\n        words.forEach(word => {\n          // Build word view from word\n          const WordView = registry.getWordViewClass(word.getType())!;\n          const wordView = new WordView(word, {});\n          wordViewBlock.wordViews.push(wordView);\n        });\n      });\n      this.wordViewBlocks.push(wordViewBlock);\n    });\n  }\n\n  /**\n   * Builds line views from word views, should not\n   * be called unless buildWordViewBlocks was called.\n   */\n  private buildLineViews() {\n    // Reset lineViews\n    this.lineViews.length = 0;\n    const registry = this.taleWeaver.getRegistry();\n    // Determine page content width as width minus paddings\n    const pageContentWidth = this.config.pageWidth - this.config.pagePaddingLeft - this.config.pagePaddingRight;\n    // Loop through blocks of word views\n    this.wordViewBlocks.forEach(wordViewBlock => {\n      // Build line views for block\n      const LineView = registry.getLineViewClass(wordViewBlock.blockElement.getType())!;\n      let lineView = new LineView({\n        width: this.config.pageWidth - this.config.pagePaddingLeft - this.config.pagePaddingRight,\n      });\n      this.lineViews.push(lineView);\n      let cumulatedWidth = 0;\n      // Loop through word views in block\n      wordViewBlock.wordViews.forEach(wordView => {\n        // Start new line if current line i is full\n        if (cumulatedWidth + wordView.getWidth() > pageContentWidth) {\n          lineView = new LineView({\n            width: this.config.pageWidth - this.config.pagePaddingLeft - this.config.pagePaddingRight,\n          });\n          this.lineViews.push(lineView);\n          cumulatedWidth = 0;\n        }\n        // Append word view to current line view\n        wordView.setLineView(lineView);\n        lineView.appendWordView(wordView);\n        cumulatedWidth += wordView.getWidth();\n      });\n    });\n  }\n\n  /**\n   * Builds page views from line views, should not\n   * be called unless buildLineViews was called.\n   */\n  private buildPageViews() {\n    // Reset pageViews\n    this.pageViews.length = 0;\n    // Build page views\n    const pageViewConigs = {\n      width: this.config.pageWidth,\n      height: this.config.pageHeight,\n      paddingTop: this.config.pagePaddingTop,\n      paddingBottom: this.config.pagePaddingBottom,\n      paddingLeft: this.config.pagePaddingLeft,\n      paddingRight: this.config.pagePaddingRight,\n    };\n    let pageView = new PageView(this, pageViewConigs);\n    this.pageViews.push(pageView);\n    let cumulatedHeight = 0;\n    // Determine page content height as height minus paddings\n    const pageContentHeight = this.config.pageHeight - this.config.pagePaddingTop - this.config.pagePaddingBottom;\n    // Loop through line views\n    this.lineViews.forEach(lineView => {\n      // Start new page if current page is full\n      if (cumulatedHeight + lineView.getHeight() > pageContentHeight) {\n        pageView = new PageView(this, pageViewConigs);\n        this.pageViews.push(pageView);\n        cumulatedHeight = 0;\n      }\n      // Append line view to page view\n      lineView.setPageView(pageView);\n      pageView.appendLineView(lineView);\n      cumulatedHeight += lineView.getHeight();\n    });\n  }\n\n  /**\n   * Builds editor cursor views.\n   */\n  private buildEditorCursorView() {\n    const editorCursor = this.taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return;\n    }\n    this.editorCursorView = new EditorCursorView(this.taleWeaver!, editorCursor);\n    this.editorCursorView.setDocumentView(this);\n  }\n\n  /**\n   * Handles selectstart DOM event.\n   */\n  private handleSelectStart = (event: Event) => {\n    // Disable browser select functionality\n    event.preventDefault();\n  }\n\n  /**\n   * Handles mouse down DOM event.\n   */\n  private handleMouseDown = (event: MouseEvent) => {\n    // No need to handle mouse down if no editor cursor\n    if (!this.editorCursorView) {\n      return;\n    }\n    const position = this.mapViewPositionToModelPosition(event.clientX, event.clientY);\n    this.editorCursorView.beginSelect(position);\n  }\n\n  /**\n   * Handles mouse move DOM event.\n   */\n  private handleMouseMove = throttle((event: MouseEvent) => {\n    // No need to handle mouse down if no editor cursor\n    if (!this.editorCursorView) {\n      return;\n    }\n    const position = this.mapViewPositionToModelPosition(event.clientX, event.clientY);\n    this.editorCursorView.moveSelect(position);\n  }, 5)\n\n  /**\n   * Handles mouse up DOM event.\n   */\n  private handleMouseUp = (event: MouseEvent) => {\n    // No need to handle mouse down if no editor cursor\n    if (!this.editorCursorView) {\n      return;\n    }\n    const position = this.mapViewPositionToModelPosition(event.clientX, event.clientY);\n    this.editorCursorView.endSelect(position);\n  }\n\n  /**\n   * Handles key down DOM event.\n   */\n  private handleKeyDown = (event: KeyboardEvent) => {\n    this.taleWeaver.getState().dispatchEvent(new KeyPressEvent(event.key, event.shiftKey, event.metaKey, event.altKey));\n    event.preventDefault();\n  }\n\n  /**\n   * Handles key up DOM event.\n   */\n  private handleKeyUp = (event: KeyboardEvent) => {\n  }\n}\n","/**\n * Throttles a function so that it runs at most\n * once per specified number of milliseconds.\n */\nexport default function throttle(func: (...args: any) => void, milliseconds: number) {\n  let throttledRunTimeout: NodeJS.Timeout;\n  let lastRunAt: number;\n  return (...args: any) => {\n    if (!lastRunAt) {\n      func(...args);\n      lastRunAt = Date.now();\n    } else {\n      clearTimeout(throttledRunTimeout);\n      throttledRunTimeout = setTimeout(() => {\n        func(...args);\n        lastRunAt = Date.now();\n      }, milliseconds - (Date.now() - lastRunAt));\n    }\n  };\n}\n","import LineView, { LineViewDOMElements, LineViewConfig } from './LineView';\n\nexport default class ParagraphLineView extends LineView {\n  private domParagraphLine?: HTMLDivElement;\n  private mounted: boolean;\n\n  constructor(config: LineViewConfig) {\n    super(config);\n    this.mounted = false;\n  }\n\n  mount() {\n    if (this.mounted) {\n      return;\n    }\n    // Get wrapper element\n    const { domPageContent } = this.getPageView().getDOM();\n\n    // Build line element\n    this.domParagraphLine = document.createElement('div');\n    this.domParagraphLine.className = 'tw--paragraph-line';\n    domPageContent.appendChild(this.domParagraphLine);\n\n    // Mount word views\n    this.wordViews.forEach(wordView => wordView.mount());\n  }\n\n  getDOM(): LineViewDOMElements {\n    return {\n      domLine: this.domParagraphLine!,\n      domLineContent: this.domParagraphLine!,\n    };\n  }\n}\n","import PageView from './PageView';\nimport WordView, { WordViewAwarePosition } from './WordView';\n\n/**\n * Line view configs.\n */\nexport interface LineViewConfig {\n  width: number;\n}\n\nexport interface LineViewDOMElements {\n  domLine: HTMLElement;\n  domLineContent: HTMLElement;\n}\n\n/**\n * Describes a screen selection within a line view.\n */\nexport interface LineViewPositionBox {\n  x1: number;\n  x2: number;\n  height: number;\n}\n\nexport interface LineViewAwarePosition extends WordViewAwarePosition {\n  lineView: LineView;\n  lineViewPosition: number;\n};\n\n/**\n * Abstract class for line views.\n */\nexport default abstract class LineView {\n  /** Config for the line view. */\n  protected config: LineViewConfig;\n  /** Parent page view. */\n  protected pageView?: PageView;\n  /** Child word views. */\n  protected wordViews: WordView[];\n\n  /**\n   * Creates a new line view instance.\n   * @param config - Config for the line view.\n   */\n  constructor(config: LineViewConfig) {\n    this.config = config;\n    this.wordViews = [];\n  }\n\n  /**\n   * Gets the size of the line in the document.\n   */\n  getSize(): number {\n    let size = 0;\n    this.wordViews!.forEach(wordView => size += wordView.getSize());\n    return size;\n  }\n\n  /**\n   * Sets the parent page view.\n   * @param pageView - Parent page view.\n   */\n  setPageView(pageView: PageView) {\n    this.pageView = pageView;\n  }\n\n  /**\n   * Gets the parent page view.\n   */\n  getPageView(): PageView {\n    return this.pageView!;\n  }\n\n  /**\n   * Gets the previous line view in the parent page view.\n   */\n  getPreviousLineView(): LineView | null {\n    const lineViews = this.pageView!.getLineViews();\n    const index = lineViews.indexOf(this);\n\n    // Short circuit if line view is not found in the parent\n    // page view\n    if (index < 0) {\n      return null;\n    }\n\n    // If this is the first line of the page, try to move\n    // to last line of previous page\n    if (index === 0) {\n      const previousPageView = this.pageView!.getPreviousPageView();\n      if (!previousPageView) {\n        return null;\n      }\n      const previousPageLineViews = previousPageView.getLineViews();\n      return previousPageLineViews[previousPageLineViews.length - 1];\n    }\n    return lineViews[index - 1];\n  }\n\n  /**\n   * Gets the next line view in the parent page view.\n   */\n  getNextLineView(): LineView | null {\n    const lineViews = this.pageView!.getLineViews();\n    const index = lineViews.indexOf(this);\n\n    // Short circuit if line view is not found in the parent\n    // page view\n    if (index < 0) {\n      return null;\n    }\n\n    // If this is the last line of the page, try to move\n    // to first line of next page\n    if (index === lineViews.length - 1) {\n      const nextPageView = this.pageView!.getNextPageView();\n      if (!nextPageView) {\n        return null;\n      }\n      const nextPageLineViews = nextPageView.getLineViews();\n      return nextPageLineViews[0];\n    }\n    return lineViews[index + 1];\n  }\n\n  /**\n   * Appends a child word view.\n   * @param wordView - Child word view to append.\n   */\n  appendWordView(wordView: WordView) {\n    this.wordViews.push(wordView);\n  }\n\n  /**\n   * Removes a child word view.\n   * @param wordView - Child word view to remove.\n   */\n  removeWordView(wordView: WordView) {\n    const index = this.wordViews.indexOf(wordView);\n    if (index < 0) {\n      return;\n    }\n    this.wordViews.splice(index, 1);\n  }\n\n  /**\n   * Gets the child word views.\n   */\n  getWordViews(): WordView[] {\n    return this.wordViews;\n  }\n\n  /**\n   * Mounts the view to DOM.\n   */\n  abstract mount(): void;\n\n  /**\n   * Gets DOM elements mounted by the view.\n   */\n  abstract getDOM(): LineViewDOMElements;\n\n  /**\n   * Gets the height of the view.\n   */\n  getHeight(): number {\n    return Math.max(...this.wordViews.map(wordView => wordView.getHeight()));\n  }\n\n  /**\n   * Maps a model position range to view position boxes.\n   * @param from - Left-bound of the model position range.\n   * @param to - Right-bound of the model position range.\n   */\n  mapModelPositionRangeToViewPositionBox(from: number, to: number): LineViewPositionBox {\n    // Iterate through words to break up model position range\n    const viewPositionBox: LineViewPositionBox = {\n      x1: -1,\n      x2: -1,\n      height: 0,\n    };\n    let offset = 0;\n    let cumulatedWidth = 0;\n    for (let n = 0, nn = this.wordViews.length; n < nn; n++) {\n      const wordView = this.wordViews[n];\n      // If overlap between position range and word\n      if (to >= offset && from < offset + wordView.getSize()) {\n        const wordViewPositionBox = wordView.mapModelPositionRangeToViewPositionBox(\n          Math.max(0, from - offset),\n          Math.min(wordView.getSize(), to - offset),\n        );\n        if (offset <= from && offset + wordView.getSize() > from) {\n          viewPositionBox.x1 = cumulatedWidth + wordViewPositionBox.x1;\n        }\n        if (offset <= to && offset + wordView.getSize() >= to) {\n          viewPositionBox.x2 = cumulatedWidth + wordViewPositionBox.x2;\n        }\n        if (viewPositionBox.height < wordViewPositionBox.height) {\n          viewPositionBox.height = wordViewPositionBox.height;\n        }\n      }\n      offset += wordView.getSize();\n      cumulatedWidth += wordView.getWidth();\n    }\n    return viewPositionBox;\n  }\n\n  /**\n   * Maps a view position to model position.\n   * @param x - X-coordinate of the view position.\n   */\n  mapViewPositionToModelPosition(x: number): number {\n    // Iterate through words until the word that contains the view position\n    // is found\n    let offset = 0;\n    let cumulatedWidth = 0;\n    for (let n = 0, nn = this.wordViews.length; n < nn; n++) {\n      const wordView = this.wordViews[n];\n      // If posterior of word is past X-coordinate\n      if (cumulatedWidth + wordView.getWidth() >= x) {\n        // Get model position in word\n        const wordModelPosition = wordView.mapViewPositionToModelPosition(x - cumulatedWidth);\n        // Map word model position to line model position\n        return offset + wordModelPosition;\n      }\n      offset += wordView.getSize();\n      cumulatedWidth += wordView.getWidth();\n    }\n    return offset - 1;\n  }\n\n  /**\n   * Resolves a flat model position to a view-aware position\n   * object.\n   * @param position - Flat model position to resolve.\n   */\n  resolveModelPosition(position: number): LineViewAwarePosition {\n    // Iterate through words until the word that contains the view position\n    // is found\n    let offset = 0;\n    for (let n = 0, nn = this.wordViews.length; n < nn; n++) {\n      const wordView = this.wordViews[n];\n      // If posterior of word is past position\n      if (offset + wordView.getSize() >= position) {\n        // Resolve model position in word\n        const wordViewAwarePosition = wordView.resolveModelPosition(position - offset);\n        // Map word view aware position to line view aware position\n        return {\n          ...wordViewAwarePosition,\n          lineView: this,\n          lineViewPosition: position,\n        };\n      }\n      offset += wordView.getSize();\n    }\n    throw new Error(`Cannot resolve line model position ${position}.`);\n  }\n}\n","import LineView from './LineView';\nimport Word from '../model/Word';\n\n/**\n * Word view config.\n */\nexport interface WordViewConfig {\n}\n\nexport interface WordViewDOMElements {\n  domWord: HTMLElement | Text;\n  domWordContent: HTMLElement | Text;\n}\n\n/**\n * Describes a screen selection within a word view.\n */\nexport interface WordViewPositionBox {\n  x1: number;\n  x2: number;\n  height: number;\n}\n\nexport interface WordViewAwarePosition {\n  wordView: WordView;\n  wordViewPosition: number;\n};\n\n/**\n * Abstract class for word views.\n */\nexport default abstract class WordView {\n  /** Config for the word view. */\n  protected config: WordViewConfig;\n  /** Word model. */\n  protected word: Word;\n  /** Parent line view. */\n  protected lineView?: LineView;\n  /** Rendered DOM element. */\n  protected domElement?: HTMLElement | Text;\n\n  /**\n   * Creates a new work view instance.\n   * @param config - Config for the word view.\n   */\n  constructor(word: Word, config: WordViewConfig) {\n    this.word = word;\n    this.config = config;\n  }\n\n  /**\n   * Gets the size of the word in the document.\n   */\n  getSize(): number {\n    return this.word.getSize();\n  }\n\n  /**\n   * Sets the parent line view.\n   * @param lineView - Parent line view.\n   */\n  setLineView(lineView: LineView) {\n    this.lineView = lineView;\n  }\n\n  /**\n   * Gets the parent line view.\n   */\n  getLineView(): LineView {\n    return this.lineView!;\n  }\n\n  /**\n   * Gets the previous word view in the parent line view.\n   */\n  getPreviousWordView(): WordView | null {\n    const wordViews = this.lineView!.getWordViews();\n    const index = wordViews.indexOf(this);\n\n    // Short circuit if word view is not found in the parent\n    // line view\n    if (index < 0) {\n      return null;\n    }\n\n    // If this is the first word of the line, try to move\n    // to last word of previous line\n    if (index === 0) {\n      const previousLineView = this.lineView!.getPreviousLineView();\n      if (!previousLineView) {\n        return null;\n      }\n      const previousLineWordViews = previousLineView.getWordViews();\n      return previousLineWordViews[previousLineWordViews.length - 1];\n    }\n    return wordViews[index - 1];\n  }\n\n  /**\n   * Gets the next word view in the parent line view.\n   */\n  getNextWordView(): WordView | null {\n    const wordViews = this.lineView!.getWordViews();\n    const index = wordViews.indexOf(this);\n\n    // Short circuit if word view is not found in the parent\n    // line view\n    if (index < 0) {\n      return null;\n    }\n\n    // If this is the last word of the line, try to move\n    // to first word of next line\n    if (index === wordViews.length - 1) {\n      const nextLineView = this.lineView!.getNextLineView();\n      if (!nextLineView) {\n        return null;\n      }\n      const nextLineWordViews = nextLineView.getWordViews();\n      return nextLineWordViews[0];\n    }\n    return wordViews[index + 1];\n  }\n\n  /**\n   * Mounts the view to DOM.\n   */\n  abstract mount(): void;\n\n  /**\n   * Gets DOM elements mounted by the view.\n   */\n  abstract getDOM(): WordViewDOMElements;\n\n  /**\n   * Gets the width of the word view.\n   */\n  abstract getWidth(): number;\n\n  /**\n   * Gets the height of the word view.\n   */\n  abstract getHeight(): number;\n\n  /**\n   * Maps a model position range to view position boxes.\n   * @param from - Left-bound of the model position range.\n   * @param to - Right-bound of the model position range.\n   */\n  abstract mapModelPositionRangeToViewPositionBox(from: number, to: number): WordViewPositionBox;\n\n  /**\n   * Maps a view position to model position.\n   * @param x - X-coordinate of the view position.\n   */\n  abstract mapViewPositionToModelPosition(x: number): number;\n\n  /**\n   * Resolves a flat model position to a view-aware position\n   * object.\n   * @param position - Flat model position to resolve.\n   */\n  resolveModelPosition(position: number): WordViewAwarePosition {\n    return {\n      wordView: this,\n      wordViewPosition: position,\n    };\n  }\n}\n","import TextStyle from './TextStyle';\n\ntype Measurement = {\n  width: number;\n  height: number;\n};\n\nfunction getTextStyleKey(textStyle: TextStyle): string {\n  return JSON.stringify(textStyle);\n}\n\nexport class TextMeasurer {\n  private $iframe: HTMLIFrameElement;\n  private $textContainers: Map<string, HTMLSpanElement>;\n\n  constructor() {\n    this.$iframe = document.createElement('iframe');\n    this.$iframe.src = 'about:blank';\n    this.$iframe.style.width = '0';\n    this.$iframe.style.height = '0';\n    this.$iframe.style.border = 'none';\n    document.body.appendChild(this.$iframe);\n    this.$textContainers = new Map<string, HTMLSpanElement>();\n  }\n\n  getTextContainerElement(textStyle: TextStyle): HTMLSpanElement {\n    const textStyleKey = getTextStyleKey(textStyle);\n    if (!this.$textContainers.has(textStyleKey)) {\n      const $textContainer = document.createElement('span');\n      $textContainer.style.display = 'inline-block';\n      $textContainer.style.whiteSpace = 'pre';\n      $textContainer.style.fontFamily = textStyle.fontFamily;\n      $textContainer.style.fontSize = `${textStyle.fontSize}px`;\n      $textContainer.style.fontWeight = `${textStyle.fontWeight}`;\n      $textContainer.style.lineHeight = `${textStyle.lineHeight}px`;\n      $textContainer.style.letterSpacing = `${textStyle.letterSpacing}`;\n      this.$iframe.contentDocument!.body.appendChild($textContainer);\n      this.$textContainers.set(textStyleKey, $textContainer);\n    }\n    const $textContainer = this.$textContainers.get(textStyleKey);\n    return $textContainer!;\n  }\n\n  measure(text: string, textStyle: TextStyle) {\n    // Substitute trailing new line with space\n    const adjustedText = text.replace(/\\n$/, ' ');\n    const $textContainer = this.getTextContainerElement(textStyle);\n    if ($textContainer.innerHTML !== adjustedText) {\n      $textContainer.innerHTML = adjustedText;\n    }\n    const boundingClientRect = $textContainer.getBoundingClientRect();\n    return {\n      width: boundingClientRect.width,\n      height: boundingClientRect.height,\n    };\n  }\n}\n\nconst textMeasurer = new TextMeasurer();\n\nexport default function measureText(text: string, textStyle: TextStyle): Measurement {\n  return textMeasurer.measure(text, textStyle);\n}\n","import WordView, { WordViewConfig, WordViewPositionBox, WordViewDOMElements } from './WordView';\nimport Word from '../model/Word';\nimport TextWord from '../model/word/TextWord';\nimport measureText from './helpers/measureText';\n\nconst placeholderTextStyle = {\n  fontFamily: 'Arial',\n  fontSize: 18,\n  fontWeight: 400,\n  lineHeight: 36,\n  letterSpacing: 0,\n};\n\n/**\n * View for a text word.\n */\nexport default class TextView extends WordView {\n  /** Cached width of the rendered text word */\n  private width?: number;\n  /** Cached height of the rendered text word */\n  private height?: number;\n  /** Whether the view is mounted to DOM. */\n  private mounted: boolean;\n  /** DOM text node. */\n  private domTextWord?: Text;\n\n  constructor(word: Word, config: WordViewConfig) {\n    super(word, config);\n    this.mounted = false;\n  }\n\n  mount() {\n    if (this.mounted) {\n      return;\n    }\n    const { domLineContent } = this.getLineView().getDOM();\n    const textWord = <TextWord> this.word;\n    this.domTextWord = document.createTextNode(textWord.getText());\n    domLineContent.appendChild(this.domTextWord);\n  }\n\n  getDOM(): WordViewDOMElements {\n    return {\n      domWord: this.domTextWord!,\n      domWordContent: this.domTextWord!,\n    };\n  }\n\n  getWidth(): number {\n    if (this.width === undefined) {\n      this.measure();\n    }\n    return this.width!;\n  }\n\n  getHeight(): number {\n    if (this.height === undefined) {\n      this.measure();\n    }\n    return this.height!;\n  }\n\n  mapModelPositionRangeToViewPositionBox(from: number, to: number): WordViewPositionBox {\n    return {\n      x1: this.getScreenX(from),\n      x2: this.getScreenX(to),\n      height: this.getHeight(),\n    };\n  }\n\n  mapViewPositionToModelPosition(x: number): number {\n    const textWord = <TextWord> this.word;\n    const text = textWord.getText();\n    let lastWidth = 0;\n    for (let n = 1, nn = text.length; n < nn; n++) {\n      const width = measureText(text.substring(0, n), placeholderTextStyle).width;\n      if (width > x) {\n        if (x - lastWidth > width - x) {\n          return n;\n        }\n        return n - 1;\n      }\n      lastWidth = width;\n    }\n    if (x === lastWidth) {\n      return text.length - 1;\n    }\n    return text.length;\n  }\n\n  /**\n   * Measures the dimensions of the rendered text word.\n   */\n  private measure() {\n    const textWord = <TextWord> this.word;\n    const measurement = measureText(textWord.getText(), placeholderTextStyle);\n    this.width = measurement.width;\n    this.height = measurement.height;\n  }\n\n  /**\n   * Gets screen x coordinate by document position.\n   * @param at - Document position within the text word.\n   */\n  private getScreenX(at: number): number {\n    const textWord = <TextWord> this.word;\n    const text = textWord.getText();\n    if (at === 0) {\n      return 0;\n    }\n    return measureText(text.substring(0, at), placeholderTextStyle).width;\n  }\n}\n","import Cursor from '../cursor/Cursor';\nimport CursorTransformation from './CursorTransformation';\nimport TranslateCursor from './cursortransformationsteps/TranslateCursor';\nimport TranslateCursorHead from './cursortransformationsteps/TranslateCursorHead';\n\n/**\n * Transformer for applying transformations\n * on cursors.\n */\nexport default class CursorTransformer {\n  /**\n   * Applies a transformation on a cursor.\n   * @param cursor - Cursor to apply transformation on.\n   * @param transformation - Transformation to apply.\n   */\n  apply(cursor: Cursor, transformation: CursorTransformation) {\n    const steps = transformation.getSteps();\n    steps.forEach(step => {\n      if (step instanceof TranslateCursor) {\n        cursor.moveTo(cursor.getHead() + step.getDisplacement(), step.getExtraArgs());\n      } else if (step instanceof TranslateCursorHead) {\n        cursor.moveHeadTo(cursor.getHead() + step.getDisplacement(), step.getExtraArgs());\n      } else {\n        throw new Error(`Unrecognized cursor transformation step: ${step.getType()}`);\n      }\n    });\n  }\n}\n","import DocumentElement from '../model/DocumentElement';\nimport DocumentTransformation from './DocumentTransformation';\n\n/**\n * Transformer for applying transformations\n * on cursors.\n */\nexport default class DocumentTransformer {\n  /**\n   * Applies a transformation on a document element.\n   * @param document - Document to apply transformation on.\n   * @param transformation - Transformation to apply.\n   */\n  apply(documentElement: DocumentElement, transformation: DocumentTransformation) {\n    const steps = transformation.getSteps();\n    steps.forEach(step => {\n      // if (step instanceof TranslateCursor) {\n      //   cursor.moveTo(cursor.getHead() + step.getDisplacement());\n      // } else if (step instanceof TranslateCursorHead) {\n      //   cursor.moveHeadTo(cursor.getHead() + step.getDisplacement());\n      // } else {\n      //   throw new Error(`Unrecognized cursor transformation step: ${step.getType()}`);\n      // }\n    });\n  }\n}\n","import EventObserver from '../event/EventObserver';\nimport Event, { KeyPressEvent } from '../event/Event';\nimport {\n  moveBackward,\n  moveForward,\n  moveBackwardByWord,\n  moveForwardByWord,\n  moveToLineStart,\n  moveToLineEnd,\n  moveToDocumentStart,\n  moveToDocumentEnd,\n  moveHeadBackward,\n  moveHeadForward,\n  moveHeadBackwardByWord,\n  moveHeadForwardByWord,\n  moveHeadToLineStart,\n  moveHeadToLineEnd,\n  moveHeadToDocumentStart,\n  moveHeadToDocumentEnd,\n  moveToPreviousLine,\n  moveToNextLine,\n  moveHeadToPreviousLine,\n  moveHeadToNextLine,\n} from '../command/cursor';\n\nexport default class EditorCursorEventObserver extends EventObserver {\n  onEvent(event: Event) {\n    if (event instanceof KeyPressEvent) {\n      const keyPressEvent = <KeyPressEvent> event;\n      if (keyPressEvent.key === 'ArrowLeft') {\n        if (keyPressEvent.shift) {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveHeadBackwardByWord());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveHeadToLineStart());\n          } else {\n            this.dispatchCursorCommand(moveHeadBackward());\n          }\n        } else {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveBackwardByWord());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveToLineStart());\n          } else {\n            this.dispatchCursorCommand(moveBackward());\n          }\n        }\n      } else if (keyPressEvent.key === 'ArrowRight') {\n        if (keyPressEvent.shift) {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveHeadForwardByWord());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveHeadToLineEnd());\n          } else {\n            this.dispatchCursorCommand(moveHeadForward());\n          }\n        } else {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveForwardByWord());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveToLineEnd());\n          } else {\n            this.dispatchCursorCommand(moveForward());\n          }\n        }\n      } else if (keyPressEvent.key === 'ArrowUp') {\n        if (keyPressEvent.shift) {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveHeadToLineStart());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveHeadToDocumentStart());\n          } else {\n            this.dispatchCursorCommand(moveHeadToPreviousLine());\n          }\n        } else {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveToLineStart());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveToDocumentStart());\n          } else {\n            this.dispatchCursorCommand(moveToPreviousLine());\n          }\n        }\n      } else if (keyPressEvent.key === 'ArrowDown') {\n        if (keyPressEvent.shift) {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveHeadToLineEnd());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveHeadToDocumentEnd());\n          } else {\n            this.dispatchCursorCommand(moveHeadToNextLine())\n          }\n        } else {\n          if (keyPressEvent.alt) {\n            this.dispatchCursorCommand(moveToLineEnd());\n          } else if (keyPressEvent.meta) {\n            this.dispatchCursorCommand(moveToDocumentEnd());\n          } else {\n            this.dispatchCursorCommand(moveToNextLine())\n          }\n        }\n      }\n    }\n  }\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursorHead from '../../state/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadBackwardByWord(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentView = taleWeaver.getDocumentView();\n    const viewAwarePosition = documentView.resolveModelPosition(head);\n    if (viewAwarePosition.wordViewPosition > 0) {\n      transformation.addStep(new TranslateCursorHead(0 - viewAwarePosition.wordViewPosition));\n    } else {\n      const previousWordView = viewAwarePosition.wordView.getPreviousWordView();\n      if (previousWordView) {\n        transformation.addStep(new TranslateCursorHead(0 - previousWordView.getSize()));\n      }\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursorHead from '../../state/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadBackward(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    if (editorCursor.getHead() < 1) {\n      return transformation;\n    }\n    transformation.addStep(new TranslateCursorHead(-1));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursor from '../../state/cursortransformationsteps/TranslateCursor';\n\nexport default function moveBackwardByWord(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentView = taleWeaver.getDocumentView();\n    const viewAwarePosition = documentView.resolveModelPosition(head);\n    if (viewAwarePosition.wordViewPosition > 0) {\n      transformation.addStep(new TranslateCursor(0 - viewAwarePosition.wordViewPosition));\n    } else {\n      const previousWordView = viewAwarePosition.wordView.getPreviousWordView();\n      if (previousWordView) {\n        transformation.addStep(new TranslateCursor(0 - previousWordView.getSize()));\n      }\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursor from '../../state/cursortransformationsteps/TranslateCursor';\n\nexport default function moveBackward(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const anchor = editorCursor.getAnchor();\n    const head = editorCursor.getHead();\n    if (anchor === head) {\n      if (head < 1) {\n        return transformation;\n      }\n      transformation.addStep(new TranslateCursor(-1));\n    } else {\n      if (anchor < head) {\n        transformation.addStep(new TranslateCursor(anchor - head));\n      } else if (anchor > head) {\n        transformation.addStep(new TranslateCursor(0));\n      }\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursorHead from '../../state/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadForwardByWord(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentView = taleWeaver.getDocumentView();\n    const viewAwarePosition = documentView.resolveModelPosition(head);\n    if (viewAwarePosition.wordViewPosition < viewAwarePosition.wordView.getSize()) {\n      transformation.addStep(new TranslateCursorHead(viewAwarePosition.wordView.getSize() - viewAwarePosition.wordViewPosition));\n    } else {\n      const nextWordView = viewAwarePosition.wordView.getNextWordView();\n      if (nextWordView) {\n        transformation.addStep(new TranslateCursorHead(nextWordView.getSize()));\n      }\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursorHead from '../../state/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadForward(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    if (editorCursor.getHead() > taleWeaver.getState().getDocumentElement().getSize() - 1) {\n      return transformation;\n    }\n    transformation.addStep(new TranslateCursorHead(1));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursor from '../../state/cursortransformationsteps/TranslateCursor';\n\nexport default function moveForwardByWord(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentView = taleWeaver.getDocumentView();\n    const viewAwarePosition = documentView.resolveModelPosition(head);\n    if (viewAwarePosition.wordViewPosition < viewAwarePosition.wordView.getSize()) {\n      transformation.addStep(new TranslateCursor(viewAwarePosition.wordView.getSize() - viewAwarePosition.wordViewPosition));\n    } else {\n      const nextWordView = viewAwarePosition.wordView.getNextWordView();\n      if (nextWordView) {\n        transformation.addStep(new TranslateCursor(nextWordView.getSize()));\n      }\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursor from '../../state/cursortransformationsteps/TranslateCursor';\n\nexport default function moveForward(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const anchor = editorCursor.getAnchor();\n    const head = editorCursor.getHead();\n    if (anchor === head) {\n      const documentSize = taleWeaver.getState().getDocumentElement().getSize();\n      if (head > documentSize - 1) {\n        return transformation;\n      }\n      transformation.addStep(new TranslateCursor(1));\n    } else {\n      if (anchor < head) {\n        transformation.addStep(new TranslateCursor(0));\n      } else if (anchor > head) {\n        transformation.addStep(new TranslateCursor(anchor - head));\n      }\n    }\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursorHead from '../../state/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadToDocumentStart(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    transformation.addStep(new TranslateCursorHead(0 - head));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursorHead from '../../state/cursortransformationsteps/TranslateCursorHead';\nimport moveHeadToLineStart from './moveHeadToLineStart';\n\nexport default function moveHeadToPreviousLine(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentView = taleWeaver.getDocumentView();\n    const viewAwarePosition = documentView.resolveModelPosition(head);\n    const previousLineView = viewAwarePosition.lineView.getPreviousLineView();\n    if (!previousLineView) {\n      return moveHeadToLineStart()(taleWeaver);\n    }\n    const editorCursorView = documentView.getEditorCursorView();\n    if (!editorCursorView) {\n      return transformation;\n    }\n    let lineViewX: number;\n    if (editorCursorView.getLineViewX() !== null) {\n      lineViewX = editorCursorView.getLineViewX()!;\n    } else {\n      lineViewX = viewAwarePosition.lineView.mapModelPositionRangeToViewPositionBox(\n        viewAwarePosition.lineViewPosition,\n        viewAwarePosition.lineViewPosition,\n      ).x1;\n    }\n    const previousLinePosition = previousLineView.mapViewPositionToModelPosition(lineViewX);\n    transformation.addStep(new TranslateCursorHead(0 - viewAwarePosition.lineViewPosition - previousLineView.getSize() + previousLinePosition, true));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursor from '../../state/cursortransformationsteps/TranslateCursor';\n\nexport default function moveToDocumentStart(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    transformation.addStep(new TranslateCursor(0 - head));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursor from '../../state/cursortransformationsteps/TranslateCursor';\nimport moveToLineStart from './moveToLineStart';\n\nexport default function moveToPreviousLine(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const position = Math.min(editorCursor.getHead(), editorCursor.getAnchor());\n    const documentView = taleWeaver.getDocumentView();\n    const viewAwarePosition = documentView.resolveModelPosition(position);\n    const previousLineView = viewAwarePosition.lineView.getPreviousLineView();\n    if (!previousLineView) {\n      return moveToLineStart()(taleWeaver);\n    }\n    const editorCursorView = documentView.getEditorCursorView();\n    if (!editorCursorView) {\n      return transformation;\n    }\n    let lineViewX: number;\n    if (editorCursorView.getLineViewX() !== null) {\n      lineViewX = editorCursorView.getLineViewX()!;\n    } else {\n      lineViewX = viewAwarePosition.lineView.mapModelPositionRangeToViewPositionBox(\n        viewAwarePosition.lineViewPosition,\n        viewAwarePosition.lineViewPosition,\n      ).x1;\n    }\n    const previousLinePosition = previousLineView.mapViewPositionToModelPosition(lineViewX);\n    transformation.addStep(new TranslateCursor(0 - viewAwarePosition.lineViewPosition - previousLineView.getSize() + previousLinePosition, true));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursorHead from '../../state/cursortransformationsteps/TranslateCursorHead';\n\nexport default function moveHeadToDocumentEnd(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentSize = taleWeaver.getState().getDocumentElement().getSize();\n    transformation.addStep(new TranslateCursorHead(documentSize - 1 - head));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursorHead from '../../state/cursortransformationsteps/TranslateCursorHead';\nimport moveHeadToLineEnd from './moveHeadToLineEnd';\n\nexport default function moveHeadToNextLine(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentView = taleWeaver.getDocumentView();\n    const viewAwarePosition = documentView.resolveModelPosition(head);\n    const nextLineView = viewAwarePosition.lineView.getNextLineView();\n    if (!nextLineView) {\n      return moveHeadToLineEnd()(taleWeaver);\n    }\n    const editorCursorView = documentView.getEditorCursorView();\n    if (!editorCursorView) {\n      return transformation;\n    }\n    let lineViewX: number;\n    if (editorCursorView.getLineViewX() !== null) {\n      lineViewX = editorCursorView.getLineViewX()!;\n    } else {\n      lineViewX = viewAwarePosition.lineView.mapModelPositionRangeToViewPositionBox(\n        viewAwarePosition.lineViewPosition,\n        viewAwarePosition.lineViewPosition,\n      ).x1;\n    }\n    const nextLinePosition = nextLineView.mapViewPositionToModelPosition(lineViewX);\n    transformation.addStep(new TranslateCursorHead(viewAwarePosition.lineView.getSize() - viewAwarePosition.lineViewPosition + nextLinePosition, true));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursor from '../../state/cursortransformationsteps/TranslateCursor';\n\nexport default function moveToDocumentEnd(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const head = editorCursor.getHead();\n    const documentSize = taleWeaver.getState().getDocumentElement().getSize();\n    transformation.addStep(new TranslateCursor(documentSize - 1- head));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../../TaleWeaver';\nimport CursorCommand from '../CursorCommand';\nimport CursorTransformation from '../../state/CursorTransformation';\nimport TranslateCursor from '../../state/cursortransformationsteps/TranslateCursor';\nimport moveToLineEnd from './moveToLineEnd';\n\nexport default function moveToNextLine(): CursorCommand {\n  return (taleWeaver: TaleWeaver): CursorTransformation => {\n    const transformation = new CursorTransformation();\n    const editorCursor = taleWeaver.getState().getEditorCursor();\n    if (!editorCursor) {\n      return transformation;\n    }\n    const position = Math.max(editorCursor.getHead(), editorCursor.getAnchor());\n    const documentView = taleWeaver.getDocumentView();\n    const viewAwarePosition = documentView.resolveModelPosition(position);\n    const nextLineView = viewAwarePosition.lineView.getNextLineView();\n    if (!nextLineView) {\n      return moveToLineEnd()(taleWeaver);\n    }\n    const editorCursorView = documentView.getEditorCursorView();\n    if (!editorCursorView) {\n      return transformation;\n    }\n    let lineViewX: number;\n    if (editorCursorView.getLineViewX() !== null) {\n      lineViewX = editorCursorView.getLineViewX()!;\n    } else {\n      lineViewX = viewAwarePosition.lineView.mapModelPositionRangeToViewPositionBox(\n        viewAwarePosition.lineViewPosition,\n        viewAwarePosition.lineViewPosition,\n      ).x1;\n    }\n    const nextLinePosition = nextLineView.mapViewPositionToModelPosition(lineViewX);\n    transformation.addStep(new TranslateCursor(viewAwarePosition.lineView.getSize() - viewAwarePosition.lineViewPosition + nextLinePosition, true));\n    return transformation;\n  };\n}\n","import TaleWeaver from '../TaleWeaver';\nimport Event from './Event';\nimport CursorCommand from '../command/CursorCommand';\n\nexport default abstract class EventObserver {\n  protected taleWeaver: TaleWeaver;\n\n  constructor(taleWeaver: TaleWeaver) {\n    this.taleWeaver = taleWeaver;\n  }\n\n  dispatchCursorCommand(cursorCommand: CursorCommand) {\n    const cursorTransformation = cursorCommand(this.taleWeaver);\n    this.taleWeaver.getState().applyEditorCursorTransformation(cursorTransformation);\n  }\n\n  abstract onEvent(event: Event): void;\n}\n","import DocumentElement from './model/DocumentElement';\nimport BlockElement from './model/BlockElement';\nimport InlineElement from './model/InlineElement';\nimport ParagraphElement from './model/block/ParagraphElement';\nimport TextElement from './model/inline/TextElement';\nimport DocumentView from './view/DocumentView';\nimport PageView from './view/PageView';\nimport LineView from './view/LineView';\nimport WordView from './view/WordView';\nimport ParagraphLineView from './view/ParagraphLineView';\nimport TextView from './view/TextView';\nimport State from './state/State';\nimport CursorTransformer from './state/CursorTransformer';\nimport DocumentTransformer from './state/DocumentTransformer';\nimport EventObserver from './event/EventObserver';\nimport EditorCursorEventObserver from './event/EditorCursorEventObserver';\n\ntype DocumentElementClass = new (...args: any[]) => DocumentElement;\ntype BlockElementClass = new (...args: any[]) => BlockElement;\ntype InlineElementClass = new (...args: any[]) => InlineElement;\ntype DocumentViewClass = new (...args: any[]) => DocumentView;\ntype PageViewClass = new (...args: any[]) => PageView;\ntype LineViewClass = new (...args: any[]) => LineView;\ntype WordViewClass = new (...args: any[]) => WordView;\n\n/**\n * Configs for TaleWeaver.\n */\ntype TaleWeaverConfig = {\n  /** Width of a page in the document. */\n  pageWidth: number;\n  /** Height of a page in the document. */\n  pageHeight: number;\n  /** Topping padding of a page in the document. */\n  pagePaddingTop: number;\n  /** Bottom padding of a page in the document. */\n  pagePaddingBottom: number;\n  /** Left padding of a page in the document. */\n  pagePaddingLeft: number;\n  /** Right padding of a page in the document. */\n  pagePaddingRight: number;\n}\n\n/**\n * Registry for model element classes and view classes.\n * Useful for customizing and extending TaleWeaver.\n */\nclass TaleWeaverRegistry {\n  /** TaleWeaver instance. */\n  private taleWeaver: TaleWeaver;\n  /** Registered document element class. */\n  private documentElementClass?: DocumentElementClass;\n  /** Registered block element classes. */\n  private blockElementClasses: Map<string, BlockElementClass>;\n  /** Registered inline element classes. */\n  private inlineElementClasses: Map<string, InlineElementClass>;\n  /** Registered document view class. */\n  private documentViewClass?: DocumentViewClass;\n  /** Registered page view class. */\n  private pageViewClass?: PageViewClass;\n  /** Registered line view classes. */\n  private lineViewClasses: Map<string, LineViewClass>;\n  /** Registered box view classes. */\n  private wordViewClasses: Map<string, WordViewClass>;\n  /** Registered cursor transformer. */\n  private cursorTransformer?: CursorTransformer;\n  /** Registered document transformer. */\n  private documentTransformer?: DocumentTransformer;\n  /** Registered event handlers. */\n  private eventObservers: EventObserver[];\n\n  /**\n   * Creates a new TaleWeaver registry instance.\n   */\n  constructor(taleWeaver: TaleWeaver) {\n    this.taleWeaver = taleWeaver;\n\n    // Init registry maps\n    this.blockElementClasses = new Map<string, BlockElementClass>();\n    this.inlineElementClasses = new Map<string, InlineElementClass>();\n    this.lineViewClasses = new Map<string, LineViewClass>();\n    this.wordViewClasses = new Map<string, WordViewClass>();\n    this.eventObservers = [];\n\n    // Register defaults\n    this.registerDocumentElementClass(DocumentElement);\n    this.registerBlockElementClass('Paragraph', ParagraphElement);\n    this.registerInlineElementClass('Text', TextElement);\n    this.registerDocumentViewClass(DocumentView);\n    this.registerPageViewClass(PageView);\n    this.registerLineViewClass('Paragraph', ParagraphLineView);\n    this.registerWordViewClass('Text', TextView);\n    this.registerCursorTransformer(new CursorTransformer());\n    this.registerDocumentTransformer(new DocumentTransformer());\n    this.registerEventObserver(new EditorCursorEventObserver(this.taleWeaver));\n  }\n\n  /**\n   * Registers the document element class.\n   * @param documentElementClass - Document element class to register.\n   */\n  registerDocumentElementClass(documentElementClass: DocumentElementClass) {\n    this.documentElementClass = documentElementClass;\n  }\n\n  /**\n   * Gets the registered document element class.\n   */\n  getDocumentElementClass(): DocumentElementClass {\n    if (!this.documentElementClass) {\n      throw new Error('No document element class registered.');\n    }\n    return this.documentElementClass;\n  }\n\n  /**\n   * Registers a block element class by type.\n   * @param type - Type of the block element class.\n   * @param blockElementClass - Block element class to register.\n   */\n  registerBlockElementClass(type: string, blockElementClass: BlockElementClass) {\n    this.blockElementClasses.set(type, blockElementClass);\n  }\n\n  /**\n   * Gets a registered block element class by type.\n   * @param type - Type of the block element class.\n   */\n  getBlockElementClass(type: string): BlockElementClass {\n    const blockElementClass = this.blockElementClasses.get(type);\n    if (!blockElementClass) {\n      throw new Error(`Unregistered block element class type: ${type}.`);\n    }\n    return blockElementClass;\n  }\n\n  /**\n   * Registers an inline element class by type.\n   * @param type - Type of the inline element class.\n   * @param inlineElementClass - Inline element class to register.\n   */\n  registerInlineElementClass(type: string, inlineElementClass: InlineElementClass) {\n    this.inlineElementClasses.set(type, inlineElementClass);\n  }\n\n  /**\n   * Gets a registered inline element class by type.\n   * @param type - Type of the inline element class.\n   */\n  getInlineElementClass(type: string): InlineElementClass {\n    const inlineElementClass = this.inlineElementClasses.get(type);\n    if (!inlineElementClass) {\n      throw new Error(`Unregistered inline element class type: ${type}.`);\n    }\n    return inlineElementClass;\n  }\n\n  /**\n   * Registers the document view class.\n   * @param documentViewClass - Document view class to register.\n   */\n  registerDocumentViewClass(documentViewClass: DocumentViewClass) {\n    this.documentViewClass = documentViewClass;\n  }\n\n  /**\n   * Gets the registered document view class.\n   */\n  getDocumentViewClass(): DocumentViewClass {\n    if (!this.documentViewClass) {\n      throw new Error('No document view class registered.');\n    }\n    return this.documentViewClass;\n  }\n\n  /**\n   * Registers the page view class.\n   * @param pageViewClass - Page view class to register.\n   */\n  registerPageViewClass(pageViewClass: PageViewClass) {\n    this.pageViewClass = pageViewClass;\n  }\n\n  /**\n   * Gets the registered page view class.\n   */\n  getPageViewClass(): PageViewClass {\n    if (!this.pageViewClass) {\n      throw new Error('No page view class registered.');\n    }\n    return this.pageViewClass;\n  }\n\n  /**\n   * Regsiters a line view class by type.\n   * @param type - Type of the line view class.\n   * @param lineViewClass - Line view class to register.\n   */\n  registerLineViewClass(type: string, lineViewClass: LineViewClass) {\n    this.lineViewClasses.set(type, lineViewClass);\n  }\n\n  /**\n   * Gets a registered line view class by type.\n   * @param type - Type of the line view class.\n   */\n  getLineViewClass(type: string): LineViewClass {\n    const lineViewClass = this.lineViewClasses.get(type);\n    if (!lineViewClass) {\n      throw new Error(`Unregistered line view class: ${type}.`);\n    }\n    return lineViewClass;\n  }\n\n  /**\n   * Registers a box view class by type.\n   * @param type - Type of the box view class.\n   * @param wordViewType - Box view class to register.\n   */\n  registerWordViewClass(type: string, wordViewClass: WordViewClass) {\n    this.wordViewClasses.set(type, wordViewClass);\n  }\n\n  /**\n   * Gets a registered box view class by type.\n   * @param type - Type of the box view class.\n   */\n  getWordViewClass(type: string): WordViewClass {\n    const wordViewClass = this.wordViewClasses.get(type);\n    if (!wordViewClass) {\n      throw new Error(`Unregistered box view class: ${type}.`);\n    }\n    return wordViewClass;\n  }\n\n  /**\n   * Registers the cursor transformer.\n   * @param cursorTransformer - Cursor transformer to register.\n   */\n  registerCursorTransformer(cursorTransformer: CursorTransformer) {\n    this.cursorTransformer = cursorTransformer;\n  }\n\n  /**\n   * Gets the registered cursor transformer.\n   */\n  getCursorTransformer(): CursorTransformer {\n    if (!this.cursorTransformer) {\n      throw new Error('No cursor transformer registered.');\n    }\n    return this.cursorTransformer;\n  }\n\n  /**\n   * Registers the document transformer.\n   * @param documentTransformer - Document transformer to register.\n   */\n  registerDocumentTransformer(documentTransformer: DocumentTransformer) {\n    this.documentTransformer = documentTransformer;\n  }\n\n  /**\n   * Gets the registered document transformer.\n   */\n  getDocumentTransformer(): DocumentTransformer {\n    if (!this.documentTransformer) {\n      throw new Error('No document transformer registered.');\n    }\n    return this.documentTransformer;\n  }\n\n  /**\n   * Registers an event handler.\n   * @param eventObserver - Event handler to register.\n   */\n  registerEventObserver(eventObserver: EventObserver) {\n    this.eventObservers.push(eventObserver)\n  }\n\n  /**\n   * Gets all registered event handlers.\n   */\n  getEventObservers(): EventObserver[] {\n    return this.eventObservers;\n  }\n}\n\n/**\n * Root of TaleWeaver, holds things together.\n */\nexport default class TaleWeaver {\n  private config: TaleWeaverConfig;\n  private registry: TaleWeaverRegistry;\n  private state?: State;\n  private documentView?: DocumentView;\n\n  /**\n   * Creates a new TaleWeaver instance.\n   * @param config - Configs for TaleWeaver.\n   */\n  constructor(config: TaleWeaverConfig) {\n    this.config = config;\n    this.registry = new TaleWeaverRegistry(this);\n  }\n\n  /**\n   * Gets the registry.\n   */\n  getRegistry(): TaleWeaverRegistry {\n    return this.registry;\n  }\n\n  /**\n   * Gets the configs.\n   */\n  getConfig(): TaleWeaverConfig {\n    return this.config;\n  }\n\n  /**\n   * Sets the state.\n   * @param state - State to set.\n   */\n  setState(state: State) {\n    this.state = state!;\n  }\n\n  /**\n   * Gets the state.\n   */\n  getState(): State {\n    return this.state!;\n  }\n\n  /**\n   * Sets the document view.\n   * @param documentView - The document view to set.\n   */\n  setDocumentView(documentView: DocumentView) {\n    this.documentView = documentView;\n  }\n\n  /**\n   * Gets the document view.\n   */\n  getDocumentView(): DocumentView {\n    return this.documentView!;\n  }\n\n  /**\n   * Attaches TaleWeaver to the DOM.\n   * @param domWrapper - Wrapper DOM element for TaleWeaver.\n   */\n  attach(domWrapper: HTMLElement) {\n    const DocumentView = this.registry.getDocumentViewClass();\n    const documentView = new DocumentView(\n      this,\n      this.getState().getDocumentElement(),\n      {\n        pageWidth: this.config.pageWidth,\n        pageHeight: this.config.pageHeight,\n        pagePaddingTop: this.config.pagePaddingTop,\n        pagePaddingBottom: this.config.pagePaddingBottom,\n        pagePaddingLeft: this.config.pagePaddingLeft,\n        pagePaddingRight: this.config.pagePaddingRight,\n      },\n    );\n    this.setDocumentView(documentView);\n    this.getDocumentView().mount(domWrapper);\n  }\n}\n","import DocumentElement from '../model/DocumentElement';\nimport Cursor from '../cursor/Cursor';\nimport CursorTransformation from './CursorTransformation';\nimport TaleWeaver from '../TaleWeaver';\nimport Event from '../event/Event';\n\n/**\n * State container for TaleWeaver.\n * Keeps track of the state of the document\n * and its cursors.\n */\nexport default class State {\n  /** TaleWeaver instance. */\n  private taleWeaver: TaleWeaver;\n  /** Document element. */\n  private documentElement?: DocumentElement;\n  /** Editor cursor. */\n  private editorCursor: Cursor | null;\n  /** Observer cursors. */\n  private observerCursors: Cursor[];\n\n  /**\n   * Creates a new state instance.\n   * @param taleWeaver - TaleWeaver instance.\n   */\n  constructor(taleWeaver: TaleWeaver) {\n    this.taleWeaver = taleWeaver;\n    this.editorCursor = null;\n    this.observerCursors = [];\n  }\n\n  /**\n   * Sets the document element.\n   * @param documentElement - Document element to set.\n   */\n  setDocumentElement(documentElement: DocumentElement) {\n    this.documentElement = documentElement;\n  }\n\n  /**\n   * Gets the document element.\n   */\n  getDocumentElement(): DocumentElement {\n    return this.documentElement!;\n  }\n\n  /**\n   * Sets the editor cursor.\n   * @param cursor - Editor cursor to set.\n   */\n  setEditorCursor(cursor: Cursor) {\n    this.editorCursor = cursor;\n  }\n\n  /**\n   * Gets the editor cursor. It's possible to not have an editor cursor.\n   */\n  getEditorCursor(): Cursor | null {\n    return this.editorCursor;\n  }\n\n  /**\n   * Gets all observer cursors.\n   */\n  getObserverCursors(): Cursor[] {\n    return this.observerCursors;\n  }\n\n  /**\n   * Appends an observer cursor.\n   * @param cursor - Observer cursor to append.\n   */\n  appendObserverCursor(cursor: Cursor) {\n    this.observerCursors.push(cursor);\n  }\n\n  /**\n   * Removes an observer cursor.\n   * @param cursor - Observer cursor to remove.\n   */\n  removeObserverCursor(cursor: Cursor) {\n    const index = this.observerCursors.indexOf(cursor);\n    if (index < 0) {\n      return;\n    }\n    this.observerCursors.splice(index, 1);\n  }\n\n  /**\n   * Dispatches an event to the event observers.\n   * @param event - Event to dispatch.\n   */\n  dispatchEvent(event: Event) {\n    const eventObservers = this.taleWeaver.getRegistry().getEventObservers();\n    eventObservers.forEach(eventObserver => {\n      eventObserver.onEvent(event);\n    });\n  }\n\n  /**\n   * Applies a transformation on the editor cursor.\n   * @param transformation - Cursor transformation to apply.\n   */\n  applyEditorCursorTransformation(transformation: CursorTransformation) {\n    if (!this.editorCursor) {\n      throw new Error('No editor cursor available to apply transformation.');\n    }\n    const transformer = this.taleWeaver.getRegistry().getCursorTransformer();\n    transformer.apply(this.editorCursor, transformation);\n  }\n}\n","/**\n * Interface for extra observer args, which is just\n * an arbitrary key-value map.\n */\nexport interface CursorTransformationExtraArgs {\n  preserveLineViewPosition: boolean;\n}\n\n/** Observer to cursor state change. */\ntype CursorObserver = (cursor: Cursor, extraArgs: CursorTransformationExtraArgs) => void;\n\n/**\n * Generates a unique cursor ID.\n */\nfunction generateID(): string {\n  // Generate cursor ID with current timestamp and a random number.\n  return `${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`\n}\n\n/**\n * Models a cursor on the document.\n */\nexport default class Cursor {\n  /** ID of the cursor. */\n  private id: string;\n  /** Anchor position of the cursor. */\n  private anchor: number;\n  /** Head position of the cursor. */\n  private head: number;\n  /** Observers registered with the cursor. */\n  private observers: CursorObserver[];\n\n  /**\n   * Creates a new cursor instance.\n   * @param anchor - Initial anchor position of the cursor.\n   * @param head - Initial head position of the cursor.\n   * @param id - ID of the cursor.\n   */\n  constructor(anchor: number, head: number, id?: string) {\n    this.id = id || generateID();\n    this.anchor = anchor;\n    this.head = head;\n    this.observers = [];\n  }\n\n  /**\n   * Notifies observers of state change.\n   */\n  private notifyObservers(extraArgs: CursorTransformationExtraArgs) {\n    this.observers.forEach(observer => {\n      observer(this, extraArgs);\n    });\n  }\n\n  /**\n   * Gets the ID of the cursor.\n   */\n  getID() {\n    return this.id;\n  }\n\n  /**\n   * Registers an observer.\n   * @param observer - Observer to register.\n   */\n  observe(observer: CursorObserver) {\n    this.observers.push(observer);\n  }\n\n  /**\n   * Moves the cursor to a certain position.\n   * @param position - Position to move cursor to.\n   */\n  moveTo(position: number, extraArgs: CursorTransformationExtraArgs) {\n    this.anchor = position;\n    this.head = position;\n    this.notifyObservers(extraArgs);\n  }\n\n  /**\n   * Moves the cursor head to a certain position.\n   * The anchor is not moved.\n   * @param position - Position to move cursor head to.\n   */\n  moveHeadTo(position: number, extraArgs: CursorTransformationExtraArgs) {\n    this.head = position;\n    this.notifyObservers(extraArgs);\n  }\n\n  /**\n   * Gets the anchor position.\n   */\n  getAnchor(): number {\n    return this.anchor!;\n  }\n\n  /**\n   * Gets the head position.\n   */\n  getHead(): number {\n    return this.head!;\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport TaleWeaver from './editor/TaleWeaver';\nimport parseStateJSON from './editor/state/helpers/parseStateJSON';\n\nconst initialStateJSON = {\n  document: {\n    children: [\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ex magna, consequat efficitur augue a, auctor sodales dolor. Aenean mauris risus, dignissim eu lacus vel, pharetra imperdiet dolor. Cras egestas nulla ac mattis rhoncus. Mauris nec vulputate dui, ac condimentum velit. Aenean ex nibh, blandit at congue ac, gravida sed nisi. Duis lacinia a ipsum id tincidunt. Vestibulum tristique dolor nec ante imperdiet, sed laoreet elit cursus. Maecenas accumsan magna a neque blandit, in efficitur lectus porttitor. Nam tristique augue nec ornare vestibulum. Interdum et malesuada fames ac ante ipsum primis in faucibus. Mauris tristique ante vel quam sollicitudin, sodales congue nulla semper.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Proin fermentum, odio non accumsan luctus, leo dui vulputate justo, sollicitudin auctor ligula magna eu felis. Pellentesque velit massa, interdum vel pretium at, mollis ut est. Cras vitae est convallis, egestas mauris sit amet, hendrerit dolor. Donec eget rhoncus mi. Nullam accumsan vehicula porttitor. Pellentesque vitae nisi feugiat, molestie est ac, suscipit nisi. Donec sagittis elit mi, in aliquam tellus suscipit quis. Nulla facilisi. Integer viverra molestie turpis, et blandit dui faucibus tristique. Cras vitae tortor quis elit posuere lacinia ut blandit felis. Suspendisse potenti. Praesent posuere ipsum vel diam sagittis pretium. Donec viverra lacus justo, nec aliquam ex lacinia a. Phasellus blandit neque leo, ut facilisis urna viverra ut. Ut sodales diam vitae nulla iaculis, vitae varius purus suscipit.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Nunc id faucibus risus. Nulla semper dui vel vulputate porttitor. Integer ante nisl, laoreet ac massa laoreet, finibus pretium lectus. Maecenas aliquet nulla sit amet turpis hendrerit consequat. Fusce gravida at sem id lobortis. Vestibulum placerat nunc vehicula libero molestie convallis. Suspendisse eu ornare turpis.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Mauris sem leo, consectetur vel tempor vel, volutpat eu enim. Sed semper, libero blandit vulputate sollicitudin, odio mauris congue massa, ac ultrices leo enim sodales dolor. Aliquam in diam quis erat dictum pellentesque et ut sapien. Donec nec semper quam. Proin aliquet orci at odio accumsan maximus. Morbi rutrum sit amet quam maximus luctus. Vivamus sit amet lacinia lorem. Nunc eget suscipit lectus, ullamcorper eleifend dolor. Aliquam aliquam maximus lectus at malesuada. In fermentum ante non metus lobortis, vel ultrices purus tempus. In vestibulum mauris non elit faucibus, quis tempus ipsum tincidunt.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'In cursus et arcu eget blandit. Vestibulum volutpat mauris eu est tempus, a ultrices justo vulputate. Suspendisse potenti. Maecenas at molestie tellus. Nulla facilisi. Etiam ac justo quis lectus blandit lacinia. Pellentesque nisl sapien, malesuada eu risus nec, malesuada posuere nisl.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ex magna, consequat efficitur augue a, auctor sodales dolor. Aenean mauris risus, dignissim eu lacus vel, pharetra imperdiet dolor. Cras egestas nulla ac mattis rhoncus. Mauris nec vulputate dui, ac condimentum velit. Aenean ex nibh, blandit at congue ac, gravida sed nisi. Duis lacinia a ipsum id tincidunt. Vestibulum tristique dolor nec ante imperdiet, sed laoreet elit cursus. Maecenas accumsan magna a neque blandit, in efficitur lectus porttitor. Nam tristique augue nec ornare vestibulum. Interdum et malesuada fames ac ante ipsum primis in faucibus. Mauris tristique ante vel quam sollicitudin, sodales congue nulla semper.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Proin fermentum, odio non accumsan luctus, leo dui vulputate justo, sollicitudin auctor ligula magna eu felis. Pellentesque velit massa, interdum vel pretium at, mollis ut est. Cras vitae est convallis, egestas mauris sit amet, hendrerit dolor. Donec eget rhoncus mi. Nullam accumsan vehicula porttitor. Pellentesque vitae nisi feugiat, molestie est ac, suscipit nisi. Donec sagittis elit mi, in aliquam tellus suscipit quis. Nulla facilisi. Integer viverra molestie turpis, et blandit dui faucibus tristique. Cras vitae tortor quis elit posuere lacinia ut blandit felis. Suspendisse potenti. Praesent posuere ipsum vel diam sagittis pretium. Donec viverra lacus justo, nec aliquam ex lacinia a. Phasellus blandit neque leo, ut facilisis urna viverra ut. Ut sodales diam vitae nulla iaculis, vitae varius purus suscipit.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Nunc id faucibus risus. Nulla semper dui vel vulputate porttitor. Integer ante nisl, laoreet ac massa laoreet, finibus pretium lectus. Maecenas aliquet nulla sit amet turpis hendrerit consequat. Fusce gravida at sem id lobortis. Vestibulum placerat nunc vehicula libero molestie convallis. Suspendisse eu ornare turpis.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Mauris sem leo, consectetur vel tempor vel, volutpat eu enim. Sed semper, libero blandit vulputate sollicitudin, odio mauris congue massa, ac ultrices leo enim sodales dolor. Aliquam in diam quis erat dictum pellentesque et ut sapien. Donec nec semper quam. Proin aliquet orci at odio accumsan maximus. Morbi rutrum sit amet quam maximus luctus. Vivamus sit amet lacinia lorem. Nunc eget suscipit lectus, ullamcorper eleifend dolor. Aliquam aliquam maximus lectus at malesuada. In fermentum ante non metus lobortis, vel ultrices purus tempus. In vestibulum mauris non elit faucibus, quis tempus ipsum tincidunt.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'In cursus et arcu eget blandit. Vestibulum volutpat mauris eu est tempus, a ultrices justo vulputate. Suspendisse potenti. Maecenas at molestie tellus. Nulla facilisi. Etiam ac justo quis lectus blandit lacinia. Pellentesque nisl sapien, malesuada eu risus nec, malesuada posuere nisl.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ex magna, consequat efficitur augue a, auctor sodales dolor. Aenean mauris risus, dignissim eu lacus vel, pharetra imperdiet dolor. Cras egestas nulla ac mattis rhoncus. Mauris nec vulputate dui, ac condimentum velit. Aenean ex nibh, blandit at congue ac, gravida sed nisi. Duis lacinia a ipsum id tincidunt. Vestibulum tristique dolor nec ante imperdiet, sed laoreet elit cursus. Maecenas accumsan magna a neque blandit, in efficitur lectus porttitor. Nam tristique augue nec ornare vestibulum. Interdum et malesuada fames ac ante ipsum primis in faucibus. Mauris tristique ante vel quam sollicitudin, sodales congue nulla semper.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Proin fermentum, odio non accumsan luctus, leo dui vulputate justo, sollicitudin auctor ligula magna eu felis. Pellentesque velit massa, interdum vel pretium at, mollis ut est. Cras vitae est convallis, egestas mauris sit amet, hendrerit dolor. Donec eget rhoncus mi. Nullam accumsan vehicula porttitor. Pellentesque vitae nisi feugiat, molestie est ac, suscipit nisi. Donec sagittis elit mi, in aliquam tellus suscipit quis. Nulla facilisi. Integer viverra molestie turpis, et blandit dui faucibus tristique. Cras vitae tortor quis elit posuere lacinia ut blandit felis. Suspendisse potenti. Praesent posuere ipsum vel diam sagittis pretium. Donec viverra lacus justo, nec aliquam ex lacinia a. Phasellus blandit neque leo, ut facilisis urna viverra ut. Ut sodales diam vitae nulla iaculis, vitae varius purus suscipit.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Nunc id faucibus risus. Nulla semper dui vel vulputate porttitor. Integer ante nisl, laoreet ac massa laoreet, finibus pretium lectus. Maecenas aliquet nulla sit amet turpis hendrerit consequat. Fusce gravida at sem id lobortis. Vestibulum placerat nunc vehicula libero molestie convallis. Suspendisse eu ornare turpis.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Mauris sem leo, consectetur vel tempor vel, volutpat eu enim. Sed semper, libero blandit vulputate sollicitudin, odio mauris congue massa, ac ultrices leo enim sodales dolor. Aliquam in diam quis erat dictum pellentesque et ut sapien. Donec nec semper quam. Proin aliquet orci at odio accumsan maximus. Morbi rutrum sit amet quam maximus luctus. Vivamus sit amet lacinia lorem. Nunc eget suscipit lectus, ullamcorper eleifend dolor. Aliquam aliquam maximus lectus at malesuada. In fermentum ante non metus lobortis, vel ultrices purus tempus. In vestibulum mauris non elit faucibus, quis tempus ipsum tincidunt.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'In cursus et arcu eget blandit. Vestibulum volutpat mauris eu est tempus, a ultrices justo vulputate. Suspendisse potenti. Maecenas at molestie tellus. Nulla facilisi. Etiam ac justo quis lectus blandit lacinia. Pellentesque nisl sapien, malesuada eu risus nec, malesuada posuere nisl.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ex magna, consequat efficitur augue a, auctor sodales dolor. Aenean mauris risus, dignissim eu lacus vel, pharetra imperdiet dolor. Cras egestas nulla ac mattis rhoncus. Mauris nec vulputate dui, ac condimentum velit. Aenean ex nibh, blandit at congue ac, gravida sed nisi. Duis lacinia a ipsum id tincidunt. Vestibulum tristique dolor nec ante imperdiet, sed laoreet elit cursus. Maecenas accumsan magna a neque blandit, in efficitur lectus porttitor. Nam tristique augue nec ornare vestibulum. Interdum et malesuada fames ac ante ipsum primis in faucibus. Mauris tristique ante vel quam sollicitudin, sodales congue nulla semper.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Proin fermentum, odio non accumsan luctus, leo dui vulputate justo, sollicitudin auctor ligula magna eu felis. Pellentesque velit massa, interdum vel pretium at, mollis ut est. Cras vitae est convallis, egestas mauris sit amet, hendrerit dolor. Donec eget rhoncus mi. Nullam accumsan vehicula porttitor. Pellentesque vitae nisi feugiat, molestie est ac, suscipit nisi. Donec sagittis elit mi, in aliquam tellus suscipit quis. Nulla facilisi. Integer viverra molestie turpis, et blandit dui faucibus tristique. Cras vitae tortor quis elit posuere lacinia ut blandit felis. Suspendisse potenti. Praesent posuere ipsum vel diam sagittis pretium. Donec viverra lacus justo, nec aliquam ex lacinia a. Phasellus blandit neque leo, ut facilisis urna viverra ut. Ut sodales diam vitae nulla iaculis, vitae varius purus suscipit.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Nunc id faucibus risus. Nulla semper dui vel vulputate porttitor. Integer ante nisl, laoreet ac massa laoreet, finibus pretium lectus. Maecenas aliquet nulla sit amet turpis hendrerit consequat. Fusce gravida at sem id lobortis. Vestibulum placerat nunc vehicula libero molestie convallis. Suspendisse eu ornare turpis.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Mauris sem leo, consectetur vel tempor vel, volutpat eu enim. Sed semper, libero blandit vulputate sollicitudin, odio mauris congue massa, ac ultrices leo enim sodales dolor. Aliquam in diam quis erat dictum pellentesque et ut sapien. Donec nec semper quam. Proin aliquet orci at odio accumsan maximus. Morbi rutrum sit amet quam maximus luctus. Vivamus sit amet lacinia lorem. Nunc eget suscipit lectus, ullamcorper eleifend dolor. Aliquam aliquam maximus lectus at malesuada. In fermentum ante non metus lobortis, vel ultrices purus tempus. In vestibulum mauris non elit faucibus, quis tempus ipsum tincidunt.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'In cursus et arcu eget blandit. Vestibulum volutpat mauris eu est tempus, a ultrices justo vulputate. Suspendisse potenti. Maecenas at molestie tellus. Nulla facilisi. Etiam ac justo quis lectus blandit lacinia. Pellentesque nisl sapien, malesuada eu risus nec, malesuada posuere nisl.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ex magna, consequat efficitur augue a, auctor sodales dolor. Aenean mauris risus, dignissim eu lacus vel, pharetra imperdiet dolor. Cras egestas nulla ac mattis rhoncus. Mauris nec vulputate dui, ac condimentum velit. Aenean ex nibh, blandit at congue ac, gravida sed nisi. Duis lacinia a ipsum id tincidunt. Vestibulum tristique dolor nec ante imperdiet, sed laoreet elit cursus. Maecenas accumsan magna a neque blandit, in efficitur lectus porttitor. Nam tristique augue nec ornare vestibulum. Interdum et malesuada fames ac ante ipsum primis in faucibus. Mauris tristique ante vel quam sollicitudin, sodales congue nulla semper.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Proin fermentum, odio non accumsan luctus, leo dui vulputate justo, sollicitudin auctor ligula magna eu felis. Pellentesque velit massa, interdum vel pretium at, mollis ut est. Cras vitae est convallis, egestas mauris sit amet, hendrerit dolor. Donec eget rhoncus mi. Nullam accumsan vehicula porttitor. Pellentesque vitae nisi feugiat, molestie est ac, suscipit nisi. Donec sagittis elit mi, in aliquam tellus suscipit quis. Nulla facilisi. Integer viverra molestie turpis, et blandit dui faucibus tristique. Cras vitae tortor quis elit posuere lacinia ut blandit felis. Suspendisse potenti. Praesent posuere ipsum vel diam sagittis pretium. Donec viverra lacus justo, nec aliquam ex lacinia a. Phasellus blandit neque leo, ut facilisis urna viverra ut. Ut sodales diam vitae nulla iaculis, vitae varius purus suscipit.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Nunc id faucibus risus. Nulla semper dui vel vulputate porttitor. Integer ante nisl, laoreet ac massa laoreet, finibus pretium lectus. Maecenas aliquet nulla sit amet turpis hendrerit consequat. Fusce gravida at sem id lobortis. Vestibulum placerat nunc vehicula libero molestie convallis. Suspendisse eu ornare turpis.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Mauris sem leo, consectetur vel tempor vel, volutpat eu enim. Sed semper, libero blandit vulputate sollicitudin, odio mauris congue massa, ac ultrices leo enim sodales dolor. Aliquam in diam quis erat dictum pellentesque et ut sapien. Donec nec semper quam. Proin aliquet orci at odio accumsan maximus. Morbi rutrum sit amet quam maximus luctus. Vivamus sit amet lacinia lorem. Nunc eget suscipit lectus, ullamcorper eleifend dolor. Aliquam aliquam maximus lectus at malesuada. In fermentum ante non metus lobortis, vel ultrices purus tempus. In vestibulum mauris non elit faucibus, quis tempus ipsum tincidunt.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'In cursus et arcu eget blandit. Vestibulum volutpat mauris eu est tempus, a ultrices justo vulputate. Suspendisse potenti. Maecenas at molestie tellus. Nulla facilisi. Etiam ac justo quis lectus blandit lacinia. Pellentesque nisl sapien, malesuada eu risus nec, malesuada posuere nisl.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ex magna, consequat efficitur augue a, auctor sodales dolor. Aenean mauris risus, dignissim eu lacus vel, pharetra imperdiet dolor. Cras egestas nulla ac mattis rhoncus. Mauris nec vulputate dui, ac condimentum velit. Aenean ex nibh, blandit at congue ac, gravida sed nisi. Duis lacinia a ipsum id tincidunt. Vestibulum tristique dolor nec ante imperdiet, sed laoreet elit cursus. Maecenas accumsan magna a neque blandit, in efficitur lectus porttitor. Nam tristique augue nec ornare vestibulum. Interdum et malesuada fames ac ante ipsum primis in faucibus. Mauris tristique ante vel quam sollicitudin, sodales congue nulla semper.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Proin fermentum, odio non accumsan luctus, leo dui vulputate justo, sollicitudin auctor ligula magna eu felis. Pellentesque velit massa, interdum vel pretium at, mollis ut est. Cras vitae est convallis, egestas mauris sit amet, hendrerit dolor. Donec eget rhoncus mi. Nullam accumsan vehicula porttitor. Pellentesque vitae nisi feugiat, molestie est ac, suscipit nisi. Donec sagittis elit mi, in aliquam tellus suscipit quis. Nulla facilisi. Integer viverra molestie turpis, et blandit dui faucibus tristique. Cras vitae tortor quis elit posuere lacinia ut blandit felis. Suspendisse potenti. Praesent posuere ipsum vel diam sagittis pretium. Donec viverra lacus justo, nec aliquam ex lacinia a. Phasellus blandit neque leo, ut facilisis urna viverra ut. Ut sodales diam vitae nulla iaculis, vitae varius purus suscipit.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Nunc id faucibus risus. Nulla semper dui vel vulputate porttitor. Integer ante nisl, laoreet ac massa laoreet, finibus pretium lectus. Maecenas aliquet nulla sit amet turpis hendrerit consequat. Fusce gravida at sem id lobortis. Vestibulum placerat nunc vehicula libero molestie convallis. Suspendisse eu ornare turpis.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Mauris sem leo, consectetur vel tempor vel, volutpat eu enim. Sed semper, libero blandit vulputate sollicitudin, odio mauris congue massa, ac ultrices leo enim sodales dolor. Aliquam in diam quis erat dictum pellentesque et ut sapien. Donec nec semper quam. Proin aliquet orci at odio accumsan maximus. Morbi rutrum sit amet quam maximus luctus. Vivamus sit amet lacinia lorem. Nunc eget suscipit lectus, ullamcorper eleifend dolor. Aliquam aliquam maximus lectus at malesuada. In fermentum ante non metus lobortis, vel ultrices purus tempus. In vestibulum mauris non elit faucibus, quis tempus ipsum tincidunt.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'In cursus et arcu eget blandit. Vestibulum volutpat mauris eu est tempus, a ultrices justo vulputate. Suspendisse potenti. Maecenas at molestie tellus. Nulla facilisi. Etiam ac justo quis lectus blandit lacinia. Pellentesque nisl sapien, malesuada eu risus nec, malesuada posuere nisl.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ex magna, consequat efficitur augue a, auctor sodales dolor. Aenean mauris risus, dignissim eu lacus vel, pharetra imperdiet dolor. Cras egestas nulla ac mattis rhoncus. Mauris nec vulputate dui, ac condimentum velit. Aenean ex nibh, blandit at congue ac, gravida sed nisi. Duis lacinia a ipsum id tincidunt. Vestibulum tristique dolor nec ante imperdiet, sed laoreet elit cursus. Maecenas accumsan magna a neque blandit, in efficitur lectus porttitor. Nam tristique augue nec ornare vestibulum. Interdum et malesuada fames ac ante ipsum primis in faucibus. Mauris tristique ante vel quam sollicitudin, sodales congue nulla semper.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Proin fermentum, odio non accumsan luctus, leo dui vulputate justo, sollicitudin auctor ligula magna eu felis. Pellentesque velit massa, interdum vel pretium at, mollis ut est. Cras vitae est convallis, egestas mauris sit amet, hendrerit dolor. Donec eget rhoncus mi. Nullam accumsan vehicula porttitor. Pellentesque vitae nisi feugiat, molestie est ac, suscipit nisi. Donec sagittis elit mi, in aliquam tellus suscipit quis. Nulla facilisi. Integer viverra molestie turpis, et blandit dui faucibus tristique. Cras vitae tortor quis elit posuere lacinia ut blandit felis. Suspendisse potenti. Praesent posuere ipsum vel diam sagittis pretium. Donec viverra lacus justo, nec aliquam ex lacinia a. Phasellus blandit neque leo, ut facilisis urna viverra ut. Ut sodales diam vitae nulla iaculis, vitae varius purus suscipit.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Nunc id faucibus risus. Nulla semper dui vel vulputate porttitor. Integer ante nisl, laoreet ac massa laoreet, finibus pretium lectus. Maecenas aliquet nulla sit amet turpis hendrerit consequat. Fusce gravida at sem id lobortis. Vestibulum placerat nunc vehicula libero molestie convallis. Suspendisse eu ornare turpis.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Mauris sem leo, consectetur vel tempor vel, volutpat eu enim. Sed semper, libero blandit vulputate sollicitudin, odio mauris congue massa, ac ultrices leo enim sodales dolor. Aliquam in diam quis erat dictum pellentesque et ut sapien. Donec nec semper quam. Proin aliquet orci at odio accumsan maximus. Morbi rutrum sit amet quam maximus luctus. Vivamus sit amet lacinia lorem. Nunc eget suscipit lectus, ullamcorper eleifend dolor. Aliquam aliquam maximus lectus at malesuada. In fermentum ante non metus lobortis, vel ultrices purus tempus. In vestibulum mauris non elit faucibus, quis tempus ipsum tincidunt.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'In cursus et arcu eget blandit. Vestibulum volutpat mauris eu est tempus, a ultrices justo vulputate. Suspendisse potenti. Maecenas at molestie tellus. Nulla facilisi. Etiam ac justo quis lectus blandit lacinia. Pellentesque nisl sapien, malesuada eu risus nec, malesuada posuere nisl.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ex magna, consequat efficitur augue a, auctor sodales dolor. Aenean mauris risus, dignissim eu lacus vel, pharetra imperdiet dolor. Cras egestas nulla ac mattis rhoncus. Mauris nec vulputate dui, ac condimentum velit. Aenean ex nibh, blandit at congue ac, gravida sed nisi. Duis lacinia a ipsum id tincidunt. Vestibulum tristique dolor nec ante imperdiet, sed laoreet elit cursus. Maecenas accumsan magna a neque blandit, in efficitur lectus porttitor. Nam tristique augue nec ornare vestibulum. Interdum et malesuada fames ac ante ipsum primis in faucibus. Mauris tristique ante vel quam sollicitudin, sodales congue nulla semper.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Proin fermentum, odio non accumsan luctus, leo dui vulputate justo, sollicitudin auctor ligula magna eu felis. Pellentesque velit massa, interdum vel pretium at, mollis ut est. Cras vitae est convallis, egestas mauris sit amet, hendrerit dolor. Donec eget rhoncus mi. Nullam accumsan vehicula porttitor. Pellentesque vitae nisi feugiat, molestie est ac, suscipit nisi. Donec sagittis elit mi, in aliquam tellus suscipit quis. Nulla facilisi. Integer viverra molestie turpis, et blandit dui faucibus tristique. Cras vitae tortor quis elit posuere lacinia ut blandit felis. Suspendisse potenti. Praesent posuere ipsum vel diam sagittis pretium. Donec viverra lacus justo, nec aliquam ex lacinia a. Phasellus blandit neque leo, ut facilisis urna viverra ut. Ut sodales diam vitae nulla iaculis, vitae varius purus suscipit.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Nunc id faucibus risus. Nulla semper dui vel vulputate porttitor. Integer ante nisl, laoreet ac massa laoreet, finibus pretium lectus. Maecenas aliquet nulla sit amet turpis hendrerit consequat. Fusce gravida at sem id lobortis. Vestibulum placerat nunc vehicula libero molestie convallis. Suspendisse eu ornare turpis.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'Mauris sem leo, consectetur vel tempor vel, volutpat eu enim. Sed semper, libero blandit vulputate sollicitudin, odio mauris congue massa, ac ultrices leo enim sodales dolor. Aliquam in diam quis erat dictum pellentesque et ut sapien. Donec nec semper quam. Proin aliquet orci at odio accumsan maximus. Morbi rutrum sit amet quam maximus luctus. Vivamus sit amet lacinia lorem. Nunc eget suscipit lectus, ullamcorper eleifend dolor. Aliquam aliquam maximus lectus at malesuada. In fermentum ante non metus lobortis, vel ultrices purus tempus. In vestibulum mauris non elit faucibus, quis tempus ipsum tincidunt.\\n' } ] },\n      { type: 'Paragraph', children: [ { type: 'Text', text: 'In cursus et arcu eget blandit. Vestibulum volutpat mauris eu est tempus, a ultrices justo vulputate. Suspendisse potenti. Maecenas at molestie tellus. Nulla facilisi. Etiam ac justo quis lectus blandit lacinia. Pellentesque nisl sapien, malesuada eu risus nec, malesuada posuere nisl.\\n' } ] },\n    ],\n  },\n  editorCursor: { anchor: 0, head: 20 },\n  observerCursors: [],\n};\n\ntype TaleWeaverComponentProps = {\n  initialStateJSON: object;\n}\ntype TaleWeaverComponentState = {\n  taleWeaver: TaleWeaver;\n}\nclass TaleWeaverComponent extends React.Component<TaleWeaverComponentProps, TaleWeaverComponentState> {\n  private domRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: any) {\n    super(props);\n    this.domRef = React.createRef();\n    const taleWeaver = new TaleWeaver({\n      pageWidth: 800,\n      pageHeight: 1000,\n      pagePaddingTop: 60,\n      pagePaddingBottom: 60,\n      pagePaddingLeft: 60,\n      pagePaddingRight: 60,\n    });\n    taleWeaver.setState(parseStateJSON(taleWeaver, props.initialStateJSON));\n    this.state = { taleWeaver };\n  }\n\n  componentDidMount() {\n    const domElement = this.domRef.current!;\n    this.state.taleWeaver.attach(domElement);\n  }\n\n  render() {\n    return (\n      <div className=\"tw--container\" ref={this.domRef} />\n    );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <TaleWeaverComponent initialStateJSON={initialStateJSON} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import TaleWeaver from '../../TaleWeaver';\nimport State from '../State';\nimport Cursor from '../../cursor/Cursor';\n\ntype InlineElementJSON = {\n  type: string;\n  text: string;\n}\ntype BlockElementJSON = {\n  type: string;\n  children: InlineElementJSON[];\n}\ntype DocumentElementJSON = {\n  children: BlockElementJSON[];\n}\ntype CursorJSON = {\n  anchor: number;\n  head: number;\n}\ntype StateJSON = {\n  document: DocumentElementJSON;\n  editorCursor: CursorJSON | null;\n  observerCursors: CursorJSON[];\n}\n\n/**\n * Parses a JSON-serialized state.\n * @param taleWeaver - TaleWeaver instance.\n * @param stateJSON - JSON-serialized state to parse.\n */\nexport default function parseStateJSON(taleWeaver: TaleWeaver, stateJSON: StateJSON): State {\n  // Create state\n  const state = new State(taleWeaver);\n\n  // Parse document state\n  const registry = taleWeaver.getRegistry();\n  const DocumentElement = registry.getDocumentElementClass();\n  const documentElement = new DocumentElement();\n  stateJSON.document.children.forEach(blockElementJSON => {\n    const BlockElement = registry.getBlockElementClass(blockElementJSON.type);\n    const blockElement = new BlockElement();\n    blockElementJSON.children.forEach(inlineElementJSON => {\n      const InlineElement = registry.getInlineElementClass(inlineElementJSON.type);\n      const inlineElement = new InlineElement();\n      inlineElement.setText(inlineElementJSON.text);\n      blockElement.appendChild(inlineElement);\n    });\n    documentElement.appendChild(blockElement);\n  });\n  state.setDocumentElement(documentElement);\n\n  // Parse editor cursor state\n  if (stateJSON.editorCursor) {\n    const editorCursor = new Cursor(stateJSON.editorCursor.anchor, stateJSON.editorCursor.head);\n    state.setEditorCursor(editorCursor);\n  }\n\n  // Parse observer cursors states\n  stateJSON.observerCursors.forEach(observerCursorJSON => {\n    const observerCursor = new Cursor(observerCursorJSON.anchor, observerCursorJSON.head);\n    state.appendObserverCursor(observerCursor);\n  });\n\n  return state;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}